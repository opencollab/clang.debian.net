DC-Build-Header: eurephia 1.1.0-6.1 / 2021-10-26 23:02:04 +0000
DC-Task: type:rebuild-binarch-only source:eurephia version:1.1.0-6.1 chroot:unstable esttime:69 logfile:/tmp/eurephia_1.1.0-6.1_unstable_clang12.log modes:clang12:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang12 eurephia_1.1.0-6.1'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-11-192.eu-central-1.compute.internal

+==============================================================================+
| eurephia 1.1.0-6.1 (amd64)                   Tue, 26 Oct 2021 23:02:04 +0000 |
+==============================================================================+

Package: eurephia
Version: 1.1.0-6.1
Source Version: 1.1.0-6.1
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-766da44a-c26c-4b51-8251-8bc256ca2653' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang12
------------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=12
+ echo 'Install of clang-12'
Install of clang-12
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [165 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [63.6 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [63.6 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-2004.40-F-2021-10-26-0202.15.pdiff [47.3 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-2004.40-F-2021-10-26-0202.15.pdiff [47.3 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-2004.40-F-2021-10-26-0202.15.pdiff [55.9 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-2004.40-F-2021-10-26-0202.15.pdiff [55.9 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Translation-en [6586 kB]
Fetched 6981 kB in 3s (2714 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-12 libomp-12-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386 libclang-common-12-dev
  libclang-cpp12 libclang1-12 libedit2 libelf1 libgc1 libgcc-9-dev libicu67
  libllvm12 libmd0 libobjc-11-dev libobjc4 libomp5-12 libunwind-12 libxml2
  libz3-4 llvm-12-linker-tools
Suggested packages:
  clang-12-doc libomp-12-doc
Recommended packages:
  llvm-12-dev python3
The following NEW packages will be installed:
  clang-12 lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386
  libclang-common-12-dev libclang-cpp12 libclang1-12 libedit2 libelf1 libgc1
  libgcc-9-dev libicu67 libllvm12 libmd0 libobjc-11-dev libobjc-9-dev libobjc4
  libomp-12-dev libomp5-12 libunwind-12 libxml2 libz3-4 llvm-12-linker-tools
0 upgraded, 25 newly installed, 0 to remove and 0 not upgraded.
Need to get 67.6 MB of archives.
After this operation, 349 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libmd0 amd64 1.0.4-1 [29.6 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.11.3-1 [108 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20210910-1 [97.5 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 libicu67 amd64 67.1-7 [8622 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.12+dfsg-5 [696 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 libz3-4 amd64 4.8.12-1+b1 [6997 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libllvm12 amd64 1:12.0.1-15 [19.4 MB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libclang-cpp12 amd64 1:12.0.1-15 [9996 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libgc1 amd64 1:8.0.4-3 [239 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 11.2.0-10 [43.2 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libobjc-11-dev amd64 11.2.0-10 [170 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.32-4 [2624 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 11.2.0-10 [49.9 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 11.2.0-10 [601 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-12-dev amd64 1:12.0.1-15 [4819 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 llvm-12-linker-tools amd64 1:12.0.1-15 [1222 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libclang1-12 amd64 1:12.0.1-15 [5644 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 clang-12 amd64 1:12.0.1-15 [117 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libasan5 amd64 9.4.0-3 [2734 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.185-2 [172 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libgcc-9-dev amd64 9.4.0-3 [2343 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.4.0-3 [219 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libunwind-12 amd64 1:12.0.1-15 [63.9 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 libomp5-12 amd64 1:12.0.1-15 [405 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libomp-12-dev amd64 1:12.0.1-15 [104 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 67.6 MB in 0s (151 MB/s)
Selecting previously unselected package libmd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12431 files and directories currently installed.)
Preparing to unpack .../00-libmd0_1.0.4-1_amd64.deb ...
Unpacking libmd0:amd64 (1.0.4-1) ...
Selecting previously unselected package libbsd0:amd64.
Preparing to unpack .../01-libbsd0_0.11.3-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.11.3-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../02-libedit2_3.1-20210910-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20210910-1) ...
Selecting previously unselected package libicu67:amd64.
Preparing to unpack .../03-libicu67_67.1-7_amd64.deb ...
Unpacking libicu67:amd64 (67.1-7) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../04-libxml2_2.9.12+dfsg-5_amd64.deb ...
Unpacking libxml2:amd64 (2.9.12+dfsg-5) ...
Selecting previously unselected package libz3-4:amd64.
Preparing to unpack .../05-libz3-4_4.8.12-1+b1_amd64.deb ...
Unpacking libz3-4:amd64 (4.8.12-1+b1) ...
Selecting previously unselected package libllvm12:amd64.
Preparing to unpack .../06-libllvm12_1%3a12.0.1-15_amd64.deb ...
Unpacking libllvm12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libclang-cpp12.
Preparing to unpack .../07-libclang-cpp12_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang-cpp12 (1:12.0.1-15) ...
Selecting previously unselected package libgc1:amd64.
Preparing to unpack .../08-libgc1_1%3a8.0.4-3_amd64.deb ...
Unpacking libgc1:amd64 (1:8.0.4-3) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../09-libobjc4_11.2.0-10_amd64.deb ...
Unpacking libobjc4:amd64 (11.2.0-10) ...
Selecting previously unselected package libobjc-11-dev:amd64.
Preparing to unpack .../10-libobjc-11-dev_11.2.0-10_amd64.deb ...
Unpacking libobjc-11-dev:amd64 (11.2.0-10) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../11-libc6-i386_2.32-4_amd64.deb ...
Unpacking libc6-i386 (2.32-4) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../12-lib32gcc-s1_11.2.0-10_amd64.deb ...
Unpacking lib32gcc-s1 (11.2.0-10) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../13-lib32stdc++6_11.2.0-10_amd64.deb ...
Unpacking lib32stdc++6 (11.2.0-10) ...
Selecting previously unselected package libclang-common-12-dev.
Preparing to unpack .../14-libclang-common-12-dev_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang-common-12-dev (1:12.0.1-15) ...
Selecting previously unselected package llvm-12-linker-tools.
Preparing to unpack .../15-llvm-12-linker-tools_1%3a12.0.1-15_amd64.deb ...
Unpacking llvm-12-linker-tools (1:12.0.1-15) ...
Selecting previously unselected package libclang1-12.
Preparing to unpack .../16-libclang1-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang1-12 (1:12.0.1-15) ...
Selecting previously unselected package clang-12.
Preparing to unpack .../17-clang-12_1%3a12.0.1-15_amd64.deb ...
Unpacking clang-12 (1:12.0.1-15) ...
Selecting previously unselected package libasan5:amd64.
Preparing to unpack .../18-libasan5_9.4.0-3_amd64.deb ...
Unpacking libasan5:amd64 (9.4.0-3) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../19-libelf1_0.185-2_amd64.deb ...
Unpacking libelf1:amd64 (0.185-2) ...
Selecting previously unselected package libgcc-9-dev:amd64.
Preparing to unpack .../20-libgcc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libgcc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../21-libobjc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libunwind-12:amd64.
Preparing to unpack .../22-libunwind-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libunwind-12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libomp5-12:amd64.
Preparing to unpack .../23-libomp5-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libomp5-12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libomp-12-dev.
Preparing to unpack .../24-libomp-12-dev_1%3a12.0.1-15_amd64.deb ...
Unpacking libomp-12-dev (1:12.0.1-15) ...
Setting up libicu67:amd64 (67.1-7) ...
Setting up libasan5:amd64 (9.4.0-3) ...
Setting up libz3-4:amd64 (4.8.12-1+b1) ...
Setting up libunwind-12:amd64 (1:12.0.1-15) ...
Setting up libgc1:amd64 (1:8.0.4-3) ...
Setting up libmd0:amd64 (1.0.4-1) ...
Setting up libc6-i386 (2.32-4) ...
Setting up libbsd0:amd64 (0.11.3-1) ...
Setting up libelf1:amd64 (0.185-2) ...
Setting up libxml2:amd64 (2.9.12+dfsg-5) ...
Setting up libedit2:amd64 (3.1-20210910-1) ...
Setting up libobjc4:amd64 (11.2.0-10) ...
Setting up libgcc-9-dev:amd64 (9.4.0-3) ...
Setting up lib32gcc-s1 (11.2.0-10) ...
Setting up lib32stdc++6 (11.2.0-10) ...
Setting up libllvm12:amd64 (1:12.0.1-15) ...
Setting up libobjc-9-dev:amd64 (9.4.0-3) ...
Setting up libclang-common-12-dev (1:12.0.1-15) ...
Setting up libomp5-12:amd64 (1:12.0.1-15) ...
Setting up libobjc-11-dev:amd64 (11.2.0-10) ...
Setting up llvm-12-linker-tools (1:12.0.1-15) ...
Setting up libclang1-12 (1:12.0.1-15) ...
Setting up libclang-cpp12 (1:12.0.1-15) ...
Setting up libomp-12-dev (1:12.0.1-15) ...
Setting up clang-12 (1:12.0.1-15) ...
Processing triggers for libc-bin (2.32-4) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10 11'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-12 g++-4.6
+ ln -s clang-12 gcc-4.6
+ ln -s clang-12 cpp-4.6
+ ln -s clang-12 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-12 g++-4.7
+ ln -s clang-12 gcc-4.7
+ ln -s clang-12 cpp-4.7
+ ln -s clang-12 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-12 g++-4.8
+ ln -s clang-12 gcc-4.8
+ ln -s clang-12 cpp-4.8
+ ln -s clang-12 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-12 g++-4.9
+ ln -s clang-12 gcc-4.9
+ ln -s clang-12 cpp-4.9
+ ln -s clang-12 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-12 g++-5
+ ln -s clang-12 gcc-5
+ ln -s clang-12 cpp-5
+ ln -s clang-12 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-12 g++-6
+ ln -s clang-12 gcc-6
+ ln -s clang-12 cpp-6
+ ln -s clang-12 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-12 g++-7
+ ln -s clang-12 gcc-7
+ ln -s clang-12 cpp-7
+ ln -s clang-12 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-12 g++-8
+ ln -s clang-12 gcc-8
+ ln -s clang-12 cpp-8
+ ln -s clang-12 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-12 g++-9
+ ln -s clang-12 gcc-9
+ ln -s clang-12 cpp-9
+ ln -s clang-12 gcc
+ echo 'gcc-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-12 g++-10
+ ln -s clang-12 gcc-10
+ ln -s clang-12 cpp-10
+ ln -s clang-12 gcc
+ echo 'gcc-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-11 gcc-11 cpp-11 gcc
+ ln -s clang++-12 g++-11
+ ln -s clang-12 gcc-11
+ ln -s clang-12 cpp-11
+ ln -s clang-12 gcc
+ echo 'gcc-11 hold'
+ dpkg --set-selections
+ echo 'g++-11 hold'
+ dpkg --set-selections
+ cd -
/build/eurephia-wCXHcC
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang
+ cd /usr/bin/
+ rm -f clang++ clang
+ ln -s clang-12 clang++
+ ln -s clang-12 clang
+ clang++ --version
Debian clang version 12.0.1-15
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ clang --version
Debian clang version 12.0.1-15
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ cd -
/build/eurephia-wCXHcC
+ apt install --yes --no-install-recommends --force-yes qt5-qmake

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  qt5-qmake-bin qtchooser
The following NEW packages will be installed:
  qt5-qmake qt5-qmake-bin qtchooser
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 1322 kB of archives.
After this operation, 4914 kB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake-bin amd64 5.15.2+dfsg-12 [1046 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 qtchooser amd64 66-2 [26.3 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake amd64 5.15.2+dfsg-12 [249 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1322 kB in 0s (20.3 MB/s)
Selecting previously unselected package qt5-qmake-bin.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13527 files and directories currently installed.)
Preparing to unpack .../qt5-qmake-bin_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake-bin (5.15.2+dfsg-12) ...
Selecting previously unselected package qtchooser.
Preparing to unpack .../qtchooser_66-2_amd64.deb ...
Unpacking qtchooser (66-2) ...
Selecting previously unselected package qt5-qmake:amd64.
Preparing to unpack .../qt5-qmake_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake:amd64 (5.15.2+dfsg-12) ...
Setting up qt5-qmake-bin (5.15.2+dfsg-12) ...
Setting up qtchooser (66-2) ...
Setting up qt5-qmake:amd64 (5.15.2+dfsg-12) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ cp /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qmake.conf /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qplatformdefs.h /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
+ ls -al /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
total 16
drwxr-xr-x  2 root root 4096 Oct 26 23:02 .
drwxr-xr-x 76 root root 4096 Oct 26 23:02 ..
-rw-r--r--  1 root root  276 Oct 26 23:02 qmake.conf
-rw-r--r--  1 root root 3218 Oct 26 23:02 qplatformdefs.h
+ cat /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/qmake.conf
#
# qmake configuration for linux-clang
#

MAKEFILE_GENERATOR = UNIX
CONFIG += incremental

QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/clang.conf)

QMAKE_LFLAGS += -ccc-gcc-name g++

load(qt_config)
+ export QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ sed -i -e 's|compare_problem(2,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ sed -i -e 's|compare_problem(1,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ grep 'compare_problem(' /usr/bin/dpkg-gensymbols
        compare_problem(4, g_('new libraries appeared in the symbols file: %s'), "@libs");
        compare_problem(3, g_('some libraries disappeared in the symbols file: %s'), "@libs");
        compare_problem(0, g_('some new symbols appeared in the symbols file: %s'),
        compare_problem(0, g_('some symbols or patterns disappeared in the symbols file: %s'),

I: Finished running '/tmp/clang12'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/eurephia-wCXHcC/resolver-wAmB18' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
Need to get 165 kB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6.1 (dsc) [1802 B]
Get:2 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6.1 (tar) [158 kB]
Get:3 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6.1 (diff) [5432 B]
Fetched 165 kB in 0s (2070 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/eurephia-wCXHcC/eurephia-1.1.0' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/eurephia-wCXHcC' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config, build-essential, fakeroot
Filtered Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config, build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [411 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [495 B]
Fetched 1863 B in 0s (183 kB/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdextrautils cmake cmake-data
  debhelper dh-autoreconf dh-elpa-helper dh-strip-nondeterminism dwz
  emacsen-common file gettext gettext-base groff-base icu-devtools
  intltool-debian iproute2 libarchive-zip-perl libarchive13 libbpf0 libbrotli1
  libcap2-bin libcurl4 libdebhelper-perl libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libicu-dev libjsoncpp24
  libldap-2.4-2 liblzo2-2 libmagic-mgc libmagic1 libmnl0 libncurses6
  libncursesw6 libnghttp2-14 libpipeline1 libpkcs11-helper1 libprocps8 libpsl5
  librhash0 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0
  libsqlite3-dev libssh2-1 libssl-dev libsub-override-perl libtool
  libuchardet0 libuv1 libxml2-dev libxslt1-dev libxslt1.1 libxtables12 m4
  man-db openvpn pkg-config po-debconf procps sensible-utils
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc cmake-doc ninja-build dh-make
  gettext-doc libasprintf-dev libgettextpo-dev groff iproute2-doc lrzip
  icu-doc sqlite3-doc libssl-doc libtool-doc gfortran | fortran95-compiler
  gcj-jdk m4-doc apparmor less www-browser openssl resolvconf
  openvpn-systemd-resolved libmail-box-perl
Recommended packages:
  curl | wget | lynx libatm1 libpam-cap ca-certificates libarchive-cpio-perl
  libglib2.0-data shared-mime-info xdg-user-dirs libldap-common libgpm2
  publicsuffix libsasl2-modules libltdl-dev easy-rsa libmail-sendmail-perl
  psmisc
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdextrautils cmake cmake-data
  debhelper dh-autoreconf dh-elpa-helper dh-strip-nondeterminism dwz
  emacsen-common file gettext gettext-base groff-base icu-devtools
  intltool-debian iproute2 libarchive-zip-perl libarchive13 libbpf0 libbrotli1
  libcap2-bin libcurl4 libdebhelper-perl libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libicu-dev libjsoncpp24
  libldap-2.4-2 liblzo2-2 libmagic-mgc libmagic1 libmnl0 libncurses6
  libncursesw6 libnghttp2-14 libpipeline1 libpkcs11-helper1 libprocps8 libpsl5
  librhash0 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0
  libsqlite3-dev libssh2-1 libssl-dev libsub-override-perl libtool
  libuchardet0 libuv1 libxml2-dev libxslt1-dev libxslt1.1 libxtables12 m4
  man-db openvpn pkg-config po-debconf procps sbuild-build-depends-main-dummy
  sensible-utils
0 upgraded, 69 newly installed, 0 to remove and 0 not upgraded.
Need to get 39.8 MB of archives.
After this operation, 150 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [916 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdextrautils amd64 2.37.2-4 [143 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.7-1 [67.8 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-7 [935 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.3-1 [34.3 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.4-2 [1354 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libbpf0 amd64 1:0.5.0-1 [130 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libmnl0 amd64 1.0.4-3 [12.5 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libxtables12 amd64 1.8.7-1 [45.1 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libcap2-bin amd64 1:2.44-1 [32.6 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 iproute2 amd64 5.14.0-1 [1005 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libncurses6 amd64 6.2+20210905-1 [102 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 libncursesw6 amd64 6.2+20210905-1 [133 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 libprocps8 amd64 2:3.3.17-5 [63.9 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 procps amd64 2:3.3.17-5 [502 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.17 [21.5 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.39-3 [273 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.39-3 [126 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.39-3 [69.1 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.21-4 [175 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.13-1 [34.8 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-5 [204 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.71-2 [343 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1+nmu1 [77.1 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.5-1 [823 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.21-4 [510 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 libarchive13 amd64 3.4.3-2+b1 [343 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 libbrotli1 amd64 1.0.9-2+b2 [279 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-modules-db amd64 2.1.27+dfsg-2.1 [69.1 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-2 amd64 2.1.27+dfsg-2.1 [106 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 libldap-2.4-2 amd64 2.4.59+dfsg-1 [232 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 libnghttp2-14 amd64 1.43.0-1 [77.1 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 libpsl5 amd64 0.21.0-1.2 [57.3 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2+b2 [60.8 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 libssh2-1 amd64 1.10.0-2 [178 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 libcurl4 amd64 7.74.0-1.3+b1 [341 kB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 libexpat1 amd64 2.4.1-3 [104 kB]
Get:38 http://127.0.0.1:12990/debian sid/main amd64 libjsoncpp24 amd64 1.9.4-5 [78.8 kB]
Get:39 http://127.0.0.1:12990/debian sid/main amd64 librhash0 amd64 1.4.2-1 [129 kB]
Get:40 http://127.0.0.1:12990/debian sid/main amd64 libuv1 amd64 1.42.0-1 [135 kB]
Get:41 http://127.0.0.1:12990/debian sid/main amd64 dh-elpa-helper all 2.0.9 [11.2 kB]
Get:42 http://127.0.0.1:12990/debian sid/main amd64 emacsen-common all 3.0.4 [19.3 kB]
Get:43 http://127.0.0.1:12990/debian sid/main amd64 cmake-data all 3.21.3-5 [1878 kB]
Get:44 http://127.0.0.1:12990/debian sid/main amd64 cmake amd64 3.21.3-5 [7907 kB]
Get:45 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 13.5.2 [192 kB]
Get:46 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-15 [513 kB]
Get:47 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 20 [17.1 kB]
Get:48 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.68-1 [104 kB]
Get:49 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:50 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.12.0-2 [26.3 kB]
Get:51 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.12.0-2 [15.5 kB]
Get:52 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.14-1 [98.3 kB]
Get:53 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.21-4 [1311 kB]
Get:54 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:55 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21+nmu1 [248 kB]
Get:56 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 13.5.2 [1056 kB]
Get:57 http://127.0.0.1:12990/debian sid/main amd64 icu-devtools amd64 67.1-7 [201 kB]
Get:58 http://127.0.0.1:12990/debian sid/main amd64 libglib2.0-0 amd64 2.70.0-3 [1401 kB]
Get:59 http://127.0.0.1:12990/debian sid/main amd64 libicu-dev amd64 67.1-7 [9597 kB]
Get:60 http://127.0.0.1:12990/debian sid/main amd64 liblzo2-2 amd64 2.10-2 [56.9 kB]
Get:61 http://127.0.0.1:12990/debian sid/main amd64 libpkcs11-helper1 amd64 1.27-1 [47.5 kB]
Get:62 http://127.0.0.1:12990/debian sid/main amd64 libsqlite3-0 amd64 3.36.0-2 [815 kB]
Get:63 http://127.0.0.1:12990/debian sid/main amd64 libsqlite3-dev amd64 3.36.0-2 [984 kB]
Get:64 http://127.0.0.1:12990/debian sid/main amd64 libssl-dev amd64 1.1.1l-1 [1809 kB]
Get:65 http://127.0.0.1:12990/debian sid/main amd64 libxml2-dev amd64 2.9.12+dfsg-5 [792 kB]
Get:66 http://127.0.0.1:12990/debian sid/main amd64 libxslt1.1 amd64 1.1.34-4 [239 kB]
Get:67 http://127.0.0.1:12990/debian sid/main amd64 libxslt1-dev amd64 1.1.34-4 [329 kB]
Get:68 http://127.0.0.1:12990/debian sid/main amd64 openvpn amd64 2.5.1-3 [599 kB]
Get:69 http://127.0.0.1:12990/debian sid/main amd64 pkg-config amd64 0.29.2-1 [65.1 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 39.8 MB in 0s (146 MB/s)
Selecting previously unselected package bsdextrautils.
(Reading database ... 14272 files and directories currently installed.)
Preparing to unpack .../00-bsdextrautils_2.37.2-4_amd64.deb ...
Unpacking bsdextrautils (2.37.2-4) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../01-libuchardet0_0.0.7-1_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.7-1) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../02-groff-base_1.22.4-7_amd64.deb ...
Unpacking groff-base (1.22.4-7) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../03-libpipeline1_1.5.3-1_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.3-1) ...
Selecting previously unselected package man-db.
Preparing to unpack .../04-man-db_2.9.4-2_amd64.deb ...
Unpacking man-db (2.9.4-2) ...
Selecting previously unselected package libbpf0:amd64.
Preparing to unpack .../05-libbpf0_1%3a0.5.0-1_amd64.deb ...
Unpacking libbpf0:amd64 (1:0.5.0-1) ...
Selecting previously unselected package libmnl0:amd64.
Preparing to unpack .../06-libmnl0_1.0.4-3_amd64.deb ...
Unpacking libmnl0:amd64 (1.0.4-3) ...
Selecting previously unselected package libxtables12:amd64.
Preparing to unpack .../07-libxtables12_1.8.7-1_amd64.deb ...
Unpacking libxtables12:amd64 (1.8.7-1) ...
Selecting previously unselected package libcap2-bin.
Preparing to unpack .../08-libcap2-bin_1%3a2.44-1_amd64.deb ...
Unpacking libcap2-bin (1:2.44-1) ...
Selecting previously unselected package iproute2.
Preparing to unpack .../09-iproute2_5.14.0-1_amd64.deb ...
Unpacking iproute2 (5.14.0-1) ...
Selecting previously unselected package libncurses6:amd64.
Preparing to unpack .../10-libncurses6_6.2+20210905-1_amd64.deb ...
Unpacking libncurses6:amd64 (6.2+20210905-1) ...
Selecting previously unselected package libncursesw6:amd64.
Preparing to unpack .../11-libncursesw6_6.2+20210905-1_amd64.deb ...
Unpacking libncursesw6:amd64 (6.2+20210905-1) ...
Selecting previously unselected package libprocps8:amd64.
Preparing to unpack .../12-libprocps8_2%3a3.3.17-5_amd64.deb ...
Unpacking libprocps8:amd64 (2:3.3.17-5) ...
Selecting previously unselected package procps.
Preparing to unpack .../13-procps_2%3a3.3.17-5_amd64.deb ...
Unpacking procps (2:3.3.17-5) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../14-sensible-utils_0.0.17_all.deb ...
Unpacking sensible-utils (0.0.17) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../15-libmagic-mgc_1%3a5.39-3_amd64.deb ...
Unpacking libmagic-mgc (1:5.39-3) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../16-libmagic1_1%3a5.39-3_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.39-3) ...
Selecting previously unselected package file.
Preparing to unpack .../17-file_1%3a5.39-3_amd64.deb ...
Unpacking file (1:5.39-3) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../18-gettext-base_0.21-4_amd64.deb ...
Unpacking gettext-base (0.21-4) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../19-libsigsegv2_2.13-1_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.13-1) ...
Selecting previously unselected package m4.
Preparing to unpack .../20-m4_1.4.18-5_amd64.deb ...
Unpacking m4 (1.4.18-5) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../21-autoconf_2.71-2_all.deb ...
Unpacking autoconf (2.71-2) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../22-autotools-dev_20180224.1+nmu1_all.deb ...
Unpacking autotools-dev (20180224.1+nmu1) ...
Selecting previously unselected package automake.
Preparing to unpack .../23-automake_1%3a1.16.5-1_all.deb ...
Unpacking automake (1:1.16.5-1) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../24-autopoint_0.21-4_all.deb ...
Unpacking autopoint (0.21-4) ...
Selecting previously unselected package libarchive13:amd64.
Preparing to unpack .../25-libarchive13_3.4.3-2+b1_amd64.deb ...
Unpacking libarchive13:amd64 (3.4.3-2+b1) ...
Selecting previously unselected package libbrotli1:amd64.
Preparing to unpack .../26-libbrotli1_1.0.9-2+b2_amd64.deb ...
Unpacking libbrotli1:amd64 (1.0.9-2+b2) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../27-libsasl2-modules-db_2.1.27+dfsg-2.1_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.27+dfsg-2.1) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../28-libsasl2-2_2.1.27+dfsg-2.1_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.27+dfsg-2.1) ...
Selecting previously unselected package libldap-2.4-2:amd64.
Preparing to unpack .../29-libldap-2.4-2_2.4.59+dfsg-1_amd64.deb ...
Unpacking libldap-2.4-2:amd64 (2.4.59+dfsg-1) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../30-libnghttp2-14_1.43.0-1_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.43.0-1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../31-libpsl5_0.21.0-1.2_amd64.deb ...
Unpacking libpsl5:amd64 (0.21.0-1.2) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../32-librtmp1_2.4+20151223.gitfa8646d.1-2+b2_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../33-libssh2-1_1.10.0-2_amd64.deb ...
Unpacking libssh2-1:amd64 (1.10.0-2) ...
Selecting previously unselected package libcurl4:amd64.
Preparing to unpack .../34-libcurl4_7.74.0-1.3+b1_amd64.deb ...
Unpacking libcurl4:amd64 (7.74.0-1.3+b1) ...
Selecting previously unselected package libexpat1:amd64.
Preparing to unpack .../35-libexpat1_2.4.1-3_amd64.deb ...
Unpacking libexpat1:amd64 (2.4.1-3) ...
Selecting previously unselected package libjsoncpp24:amd64.
Preparing to unpack .../36-libjsoncpp24_1.9.4-5_amd64.deb ...
Unpacking libjsoncpp24:amd64 (1.9.4-5) ...
Selecting previously unselected package librhash0:amd64.
Preparing to unpack .../37-librhash0_1.4.2-1_amd64.deb ...
Unpacking librhash0:amd64 (1.4.2-1) ...
Selecting previously unselected package libuv1:amd64.
Preparing to unpack .../38-libuv1_1.42.0-1_amd64.deb ...
Unpacking libuv1:amd64 (1.42.0-1) ...
Selecting previously unselected package dh-elpa-helper.
Preparing to unpack .../39-dh-elpa-helper_2.0.9_all.deb ...
Unpacking dh-elpa-helper (2.0.9) ...
Selecting previously unselected package emacsen-common.
Preparing to unpack .../40-emacsen-common_3.0.4_all.deb ...
Unpacking emacsen-common (3.0.4) ...
Selecting previously unselected package cmake-data.
Preparing to unpack .../41-cmake-data_3.21.3-5_all.deb ...
Unpacking cmake-data (3.21.3-5) ...
Selecting previously unselected package cmake.
Preparing to unpack .../42-cmake_3.21.3-5_amd64.deb ...
Unpacking cmake (3.21.3-5) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../43-libdebhelper-perl_13.5.2_all.deb ...
Unpacking libdebhelper-perl (13.5.2) ...
Selecting previously unselected package libtool.
Preparing to unpack .../44-libtool_2.4.6-15_all.deb ...
Unpacking libtool (2.4.6-15) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../45-dh-autoreconf_20_all.deb ...
Unpacking dh-autoreconf (20) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../46-libarchive-zip-perl_1.68-1_all.deb ...
Unpacking libarchive-zip-perl (1.68-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../47-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../48-libfile-stripnondeterminism-perl_1.12.0-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.12.0-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../49-dh-strip-nondeterminism_1.12.0-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.12.0-2) ...
Selecting previously unselected package dwz.
Preparing to unpack .../50-dwz_0.14-1_amd64.deb ...
Unpacking dwz (0.14-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../51-gettext_0.21-4_amd64.deb ...
Unpacking gettext (0.21-4) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../52-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../53-po-debconf_1.0.21+nmu1_all.deb ...
Unpacking po-debconf (1.0.21+nmu1) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../54-debhelper_13.5.2_all.deb ...
Unpacking debhelper (13.5.2) ...
Selecting previously unselected package icu-devtools.
Preparing to unpack .../55-icu-devtools_67.1-7_amd64.deb ...
Unpacking icu-devtools (67.1-7) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../56-libglib2.0-0_2.70.0-3_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.70.0-3) ...
Selecting previously unselected package libicu-dev:amd64.
Preparing to unpack .../57-libicu-dev_67.1-7_amd64.deb ...
Unpacking libicu-dev:amd64 (67.1-7) ...
Selecting previously unselected package liblzo2-2:amd64.
Preparing to unpack .../58-liblzo2-2_2.10-2_amd64.deb ...
Unpacking liblzo2-2:amd64 (2.10-2) ...
Selecting previously unselected package libpkcs11-helper1:amd64.
Preparing to unpack .../59-libpkcs11-helper1_1.27-1_amd64.deb ...
Unpacking libpkcs11-helper1:amd64 (1.27-1) ...
Selecting previously unselected package libsqlite3-0:amd64.
Preparing to unpack .../60-libsqlite3-0_3.36.0-2_amd64.deb ...
Unpacking libsqlite3-0:amd64 (3.36.0-2) ...
Selecting previously unselected package libsqlite3-dev:amd64.
Preparing to unpack .../61-libsqlite3-dev_3.36.0-2_amd64.deb ...
Unpacking libsqlite3-dev:amd64 (3.36.0-2) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../62-libssl-dev_1.1.1l-1_amd64.deb ...
Unpacking libssl-dev:amd64 (1.1.1l-1) ...
Selecting previously unselected package libxml2-dev:amd64.
Preparing to unpack .../63-libxml2-dev_2.9.12+dfsg-5_amd64.deb ...
Unpacking libxml2-dev:amd64 (2.9.12+dfsg-5) ...
Selecting previously unselected package libxslt1.1:amd64.
Preparing to unpack .../64-libxslt1.1_1.1.34-4_amd64.deb ...
Unpacking libxslt1.1:amd64 (1.1.34-4) ...
Selecting previously unselected package libxslt1-dev:amd64.
Preparing to unpack .../65-libxslt1-dev_1.1.34-4_amd64.deb ...
Unpacking libxslt1-dev:amd64 (1.1.34-4) ...
Selecting previously unselected package openvpn.
Preparing to unpack .../66-openvpn_2.5.1-3_amd64.deb ...
Unpacking openvpn (2.5.1-3) ...
Selecting previously unselected package pkg-config.
Preparing to unpack .../67-pkg-config_0.29.2-1_amd64.deb ...
Unpacking pkg-config (0.29.2-1) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../68-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up libexpat1:amd64 (2.4.1-3) ...
Setting up libpipeline1:amd64 (1.5.3-1) ...
Setting up libpsl5:amd64 (0.21.0-1.2) ...
Setting up bsdextrautils (2.37.2-4) ...
update-alternatives: using /usr/bin/write.ul to provide /usr/bin/write (write) in auto mode
Setting up libmagic-mgc (1:5.39-3) ...
Setting up libarchive13:amd64 (3.4.3-2+b1) ...
Setting up libarchive-zip-perl (1.68-1) ...
Setting up libglib2.0-0:amd64 (2.70.0-3) ...
No schema files found: doing nothing.
Setting up libdebhelper-perl (13.5.2) ...
Setting up libbrotli1:amd64 (1.0.9-2+b2) ...
Setting up libsqlite3-0:amd64 (3.36.0-2) ...
Setting up libnghttp2-14:amd64 (1.43.0-1) ...
Setting up libmagic1:amd64 (1:5.39-3) ...
Setting up gettext-base (0.21-4) ...
Setting up liblzo2-2:amd64 (2.10-2) ...
Setting up file (1:5.39-3) ...
Setting up libpkcs11-helper1:amd64 (1.27-1) ...
Setting up libsasl2-modules-db:amd64 (2.1.27+dfsg-2.1) ...
Setting up libcap2-bin (1:2.44-1) ...
Setting up autotools-dev (20180224.1+nmu1) ...
Setting up libuv1:amd64 (1.42.0-1) ...
Setting up emacsen-common (3.0.4) ...
Setting up libsqlite3-dev:amd64 (3.36.0-2) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Setting up dh-elpa-helper (2.0.9) ...
Setting up libncurses6:amd64 (6.2+20210905-1) ...
Setting up libsigsegv2:amd64 (2.13-1) ...
Setting up libssl-dev:amd64 (1.1.1l-1) ...
Setting up libmnl0:amd64 (1.0.4-3) ...
Setting up autopoint (0.21-4) ...
Setting up icu-devtools (67.1-7) ...
Setting up pkg-config (0.29.2-1) ...
Setting up libncursesw6:amd64 (6.2+20210905-1) ...
Setting up libxtables12:amd64 (1.8.7-1) ...
Setting up libsasl2-2:amd64 (2.1.27+dfsg-2.1) ...
Setting up libjsoncpp24:amd64 (1.9.4-5) ...
Setting up dwz (0.14-1) ...
Setting up sensible-utils (0.0.17) ...
Setting up librhash0:amd64 (1.4.2-1) ...
Setting up libuchardet0:amd64 (0.0.7-1) ...
Setting up libxslt1.1:amd64 (1.1.34-4) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up libssh2-1:amd64 (1.10.0-2) ...
Setting up cmake-data (3.21.3-5) ...
Setting up libbpf0:amd64 (1:0.5.0-1) ...
Setting up libicu-dev:amd64 (67.1-7) ...
Setting up libprocps8:amd64 (2:3.3.17-5) ...
Setting up libfile-stripnondeterminism-perl (1.12.0-2) ...
Setting up gettext (0.21-4) ...
Setting up libtool (2.4.6-15) ...
Setting up iproute2 (5.14.0-1) ...
Setting up libldap-2.4-2:amd64 (2.4.59+dfsg-1) ...
Setting up m4 (1.4.18-5) ...
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up libxml2-dev:amd64 (2.9.12+dfsg-5) ...
Setting up autoconf (2.71-2) ...
Setting up dh-strip-nondeterminism (1.12.0-2) ...
Setting up groff-base (1.22.4-7) ...
Setting up procps (2:3.3.17-5) ...
Setting up libcurl4:amd64 (7.74.0-1.3+b1) ...
Setting up automake (1:1.16.5-1) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up openvpn (2.5.1-3) ...
Setting up libxslt1-dev:amd64 (1.1.34-4) ...
Setting up po-debconf (1.0.21+nmu1) ...
Setting up man-db (2.9.4-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up dh-autoreconf (20) ...
Setting up cmake (3.21.3-5) ...
Setting up debhelper (13.5.2) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.32-4) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.37-7 dpkg-dev_1.20.9 g++-11_11.2.0-10 gcc-11_11.2.0-10 libc6-dev_2.32-4 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 linux-libc-dev_5.14.12-1
Package versions: adduser_3.118 apt_2.3.11 autoconf_2.71-2 automake_1:1.16.5-1 autopoint_0.21-4 autotools-dev_20180224.1+nmu1 base-files_12 base-passwd_3.5.52 bash_5.1-3+b2 binutils_2.37-7 binutils-common_2.37-7 binutils-x86-64-linux-gnu_2.37-7 bsdextrautils_2.37.2-4 bsdutils_1:2.37.2-4 build-essential_12.9 bzip2_1.0.8-4 clang-12_1:12.0.1-15 cmake_3.21.3-5 cmake-data_3.21.3-5 coreutils_8.32-4+b1 cpp_4:11.2.0-2 cpp-11_11.2.0-10 dash_0.5.11+git20210120+802ebd4-2 debconf_1.5.78 debhelper_13.5.2 debian-archive-keyring_2021.1.1 debianutils_5.5-1 dh-autoreconf_20 dh-elpa-helper_2.0.9 dh-strip-nondeterminism_1.12.0-2 diffutils_1:3.7-5 dpkg_1.20.9 dpkg-dev_1.20.9 dwz_0.14-1 e2fsprogs_1.46.4-1 emacsen-common_3.0.4 fakeroot_1.26-1 file_1:5.39-3 findutils_4.8.0-1 g++_4:11.2.0-2 g++-11_11.2.0-10 gcc_4:11.2.0-2 gcc-10-base_10.3.0-11 gcc-11_11.2.0-10 gcc-11-base_11.2.0-10 gcc-9-base_9.4.0-3 gettext_0.21-4 gettext-base_0.21-4 gpgv_2.2.27-2 grep_3.7-1 groff-base_1.22.4-7 gzip_1.10-4 hostname_3.23 icu-devtools_67.1-7 init-system-helpers_1.60 intltool-debian_0.35.0+20060710.5 iproute2_5.14.0-1 lib32gcc-s1_11.2.0-10 lib32stdc++6_11.2.0-10 libacl1_2.3.1-1 libapt-pkg6.0_2.3.11 libarchive-zip-perl_1.68-1 libarchive13_3.4.3-2+b1 libasan5_9.4.0-3 libasan6_11.2.0-10 libatomic1_11.2.0-10 libattr1_1:2.5.1-1 libaudit-common_1:3.0.6-1 libaudit1_1:3.0.6-1 libbinutils_2.37-7 libblkid1_2.37.2-4 libbpf0_1:0.5.0-1 libbrotli1_1.0.9-2+b2 libbsd0_0.11.3-1 libbz2-1.0_1.0.8-4 libc-bin_2.32-4 libc-dev-bin_2.32-4 libc6_2.32-4 libc6-dev_2.32-4 libc6-i386_2.32-4 libcap-ng0_0.7.9-2.2+b1 libcap2_1:2.44-1 libcap2-bin_1:2.44-1 libcc1-0_11.2.0-10 libclang-common-12-dev_1:12.0.1-15 libclang-cpp12_1:12.0.1-15 libclang1-12_1:12.0.1-15 libcom-err2_1.46.4-1 libcrypt-dev_1:4.4.25-2 libcrypt1_1:4.4.25-2 libctf-nobfd0_2.37-7 libctf0_2.37-7 libcurl4_7.74.0-1.3+b1 libdb5.3_5.3.28+dfsg1-0.8 libdebconfclient0_0.260 libdebhelper-perl_13.5.2 libdpkg-perl_1.20.9 libedit2_3.1-20210910-1 libelf1_0.185-2 libexpat1_2.4.1-3 libext2fs2_1.46.4-1 libfakeroot_1.26-1 libffi8_3.4.2-3 libfile-stripnondeterminism-perl_1.12.0-2 libgc1_1:8.0.4-3 libgcc-11-dev_11.2.0-10 libgcc-9-dev_9.4.0-3 libgcc-s1_11.2.0-10 libgcrypt20_1.9.4-3+b1 libgdbm-compat4_1.22-1 libgdbm6_1.22-1 libglib2.0-0_2.70.0-3 libgmp10_2:6.2.1+dfsg-2 libgnutls30_3.7.2-2 libgomp1_11.2.0-10 libgpg-error0_1.42-3 libgssapi-krb5-2_1.18.3-7 libhogweed6_3.7.3-1 libicu-dev_67.1-7 libicu67_67.1-7 libidn2-0_2.3.2-2 libisl23_0.24-2 libitm1_11.2.0-10 libjsoncpp24_1.9.4-5 libk5crypto3_1.18.3-7 libkeyutils1_1.6.1-2 libkrb5-3_1.18.3-7 libkrb5support0_1.18.3-7 libldap-2.4-2_2.4.59+dfsg-1 libllvm12_1:12.0.1-15 liblsan0_11.2.0-10 liblz4-1_1.9.3-2 liblzma5_5.2.5-2 liblzo2-2_2.10-2 libmagic-mgc_1:5.39-3 libmagic1_1:5.39-3 libmd0_1.0.4-1 libmnl0_1.0.4-3 libmount1_2.37.2-4 libmpc3_1.2.1-1 libmpfr6_4.1.0-3 libncurses6_6.2+20210905-1 libncursesw6_6.2+20210905-1 libnettle8_3.7.3-1 libnghttp2-14_1.43.0-1 libnsl-dev_1.3.0-2 libnsl2_1.3.0-2 libobjc-11-dev_11.2.0-10 libobjc-9-dev_9.4.0-3 libobjc4_11.2.0-10 libomp-12-dev_1:12.0.1-15 libomp5-12_1:12.0.1-15 libp11-kit0_0.24.0-5 libpam-modules_1.4.0-10 libpam-modules-bin_1.4.0-10 libpam-runtime_1.4.0-10 libpam0g_1.4.0-10 libpcre2-8-0_10.36-2 libpcre3_2:8.39-13 libperl5.32_5.32.1-6 libpipeline1_1.5.3-1 libpkcs11-helper1_1.27-1 libprocps8_2:3.3.17-5 libpsl5_0.21.0-1.2 libquadmath0_11.2.0-10 librhash0_1.4.2-1 librtmp1_2.4+20151223.gitfa8646d.1-2+b2 libsasl2-2_2.1.27+dfsg-2.1 libsasl2-modules-db_2.1.27+dfsg-2.1 libseccomp2_2.5.2-2 libselinux1_3.1-3 libsemanage-common_3.1-1 libsemanage1_3.1-1+b2 libsepol1_3.1-1 libsigsegv2_2.13-1 libsmartcols1_2.37.2-4 libsqlite3-0_3.36.0-2 libsqlite3-dev_3.36.0-2 libss2_1.46.4-1 libssh2-1_1.10.0-2 libssl-dev_1.1.1l-1 libssl1.1_1.1.1l-1 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 libsub-override-perl_0.09-2 libsystemd0_249.5-1 libtasn1-6_4.17.0-2 libtinfo6_6.2+20210905-1 libtirpc-common_1.3.2-2 libtirpc-dev_1.3.2-2 libtirpc3_1.3.2-2 libtool_2.4.6-15 libtsan0_11.2.0-10 libubsan1_11.2.0-10 libuchardet0_0.0.7-1 libudev1_249.5-1 libunistring2_0.9.10-6 libunwind-12_1:12.0.1-15 libuuid1_2.37.2-4 libuv1_1.42.0-1 libxml2_2.9.12+dfsg-5 libxml2-dev_2.9.12+dfsg-5 libxslt1-dev_1.1.34-4 libxslt1.1_1.1.34-4 libxtables12_1.8.7-1 libxxhash0_0.8.0-2 libz3-4_4.8.12-1+b1 libzstd1_1.4.8+dfsg-3 linux-libc-dev_5.14.12-1 llvm-12-linker-tools_1:12.0.1-15 login_1:4.8.1-1 logsave_1.46.4-1 lsb-base_11.1.0 m4_1.4.18-5 make_4.3-4.1 man-db_2.9.4-2 mawk_1.3.4.20200120-2 mount_2.37.2-4 ncurses-base_6.2+20210905-1 ncurses-bin_6.2+20210905-1 openvpn_2.5.1-3 passwd_1:4.8.1-1 patch_2.7.6-7 perl_5.32.1-6 perl-base_5.32.1-6 perl-modules-5.32_5.32.1-6 pkg-config_0.29.2-1 po-debconf_1.0.21+nmu1 procps_2:3.3.17-5 qt5-qmake_5.15.2+dfsg-12 qt5-qmake-bin_5.15.2+dfsg-12 qtchooser_66-2 rpcsvc-proto_1.4.2-4 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.8-1 sensible-utils_0.0.17 sysvinit-utils_3.00-1 tar_1.34+dfsg-1 tzdata_2021e-1 util-linux_2.37.2-4 xz-utils_5.2.5-2 zlib1g_1:1.2.11.dfsg-2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Format: 3.0 (quilt)
Source: eurephia
Binary: eurephia
Architecture: any
Version: 1.1.0-6.1
Maintainer: Alberto Gonzalez Iniesta <agi@inittab.org>
Homepage: http://www.eurephia.net/
Standards-Version: 3.9.4
Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
Package-List:
 eurephia deb net extra arch=any
Checksums-Sha1:
 7a41215ffe4f9cfbed9561051ba547aa38f91c35 158132 eurephia_1.1.0.orig.tar.bz2
 2e5d1a56d5f212dda1c6588626b345ec71591cb0 5432 eurephia_1.1.0-6.1.debian.tar.xz
Checksums-Sha256:
 eb96a4a41cb0ff2a20dc94e385ac658720b1d87d2a0a3b329c5b50dd1b0e372c 158132 eurephia_1.1.0.orig.tar.bz2
 ae9869573d8ca504f297ae539d52a1b3fdcf76f37a8d5e5cda1ab5af8f563eec 5432 eurephia_1.1.0-6.1.debian.tar.xz
Files:
 b902119628931a45c7a84ed3d1bb1513 158132 eurephia_1.1.0.orig.tar.bz2
 502fda1347999689767cba8028afa313 5432 eurephia_1.1.0-6.1.debian.tar.xz

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEuDQJkCg9jZvBlJrHR5mjUUbRKzUFAl/FWwMACgkQR5mjUUbR
KzUXohAAoQmnkIhW4MzVIHcRQ45Zp5JH7IGtm8OHmgtc1luKGO7UDEEG9TmJ/DOy
CD2ZNi0hUEBsjtWRV89WHCKrhJsq5uMEM18ZmeyIJeimpkwe45TW6jdqSNBSo9L6
YEEUoynlL+m1epulp1Exq2Jsnvm9NnEEpIvzrPih6q10Ih6qD6dFfDEpmOEi91zB
B4tN6OhalPVqag6ZobPZc5L0KLQ1TW+CK6qsxQCEl/7tpHTBSAM/vUCEHEWAdo6N
Er6aR0xsZpWOrG8QwsXGO9YuTlvmY1/xdwk4lzlJ3AYG/FrYdIqco2r9mq9cHQoF
vytUdF/EM+I/o7xwHohk2c9H1f1PsRYYdalZZN60lhW7jTGMbHXxslMWEq/m9FjQ
Y3T2EBLlavhSPw8lZBmx39GIpaEhzZ0yUM920W6sX+1w2JF7rOipvLDw0WTqpMAS
VMOCJdXeB74bs/JXpk0TTGRIgouvpFAx6UTYgL50no8DzxzXx3RimG7uPU04FHWx
Sqh3d6ir7m1I+Qrw/C49Msv3KAQM59sXXhnvPfhXU4iPbzNEq+VVr7sUv2Nl+VNw
fj02ft4eNRommYtykKO6YIav/PtMXtk5yVg/50ZyygoKK93k+pqxhoJEeyy0Q5ic
46Cp+BT1PFspk+/jOrR0hfcogrj4dMp3TnbplilQ/L9QSdj7+x8=
=Q1up
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/tmp/dpkg-verify-sig.Lb_VdAxq/trustedkeys.kbx': General error
gpgv: Signature made Mon Nov 30 20:50:11 2020 UTC
gpgv:                using RSA key B8340990283D8D9BC1949AC74799A35146D12B35
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./eurephia_1.1.0-6.1.dsc
dpkg-source: info: extracting eurephia in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking eurephia_1.1.0.orig.tar.bz2
dpkg-source: info: unpacking eurephia_1.1.0-6.1.debian.tar.xz
dpkg-source: info: using patch list from debian/patches/series
dpkg-source: info: applying double-free.patch
dpkg-source: info: applying sql-error-handling.patch
dpkg-source: info: applying ldflags.patch
dpkg-source: info: applying reproducible-build.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-766da44a-c26c-4b51-8251-8bc256ca2653
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package eurephia
dpkg-buildpackage: info: source version 1.1.0-6.1
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Sudip Mukherjee <sudipm.mukherjee@gmail.com>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 fakeroot debian/rules clean
dh clean
dh: warning: Compatibility levels before 10 are deprecated (level 9 in use)
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
rm -rf configure.log
dh_auto_clean
dh_auto_clean: warning: Compatibility levels before 10 are deprecated (level 9 in use)
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
dh_clean: warning: Compatibility levels before 10 are deprecated (level 9 in use)
 debian/rules build
dh build
dh: warning: Compatibility levels before 10 are deprecated (level 9 in use)
   dh_update_autotools_config
   debian/rules override_dh_auto_configure
make[1]: Entering directory '/<<PKGBUILDDIR>>'
CFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89 -fcommon" CPPFLAGS="-Wdate-time -D_FORTIFY_SOURCE=2" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" DFLAGS="-frelease" FCFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" FFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" GCJFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" LDFLAGS="-Wl,-z,relro" OBJCFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" OBJCXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security"  ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn
/usr/bin/which: this version of `which' is deprecated; use `command -v' in scripts instead.
#
# Configure run at Tue Oct 26 23:02:35 UTC 2021
# Linux ip-172-31-11-192 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64 GNU/Linux
#
# ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn

Using cmake version 3.21.3

CMake suite maintained and supported by Kitware (kitware.com/cmake).
CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Fujitsu-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define /usrCOMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__FCC_version__)
    #   define @PREFIX@COMPILER_VERSION __FCC_version__
    # elif defined(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    #   define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # endif
    # if defined(__fcc_version)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__fcc_version)
    # elif defined(__FCC_VERSION)
    #   define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__FCC_VERSION)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/FujitsuClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define /usrCOMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__FCC_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__FCC_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__FCC_patchlevel__)
    # define @PREFIX@COMPILER_VERSION_INTERNAL_STR __clang_version__
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
         except that a few beta releases use the old format with V=2021.  */
    # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    #  if defined(__INTEL_COMPILER_UPDATE)
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    #  else
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    #  endif
    # else
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
       /* The third version component from --version is an update index,
          but no macro is provided for it.  */
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(0)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
       /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Intel-DetermineCompiler.cmake:43 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  the old evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  but the new evaluation rules produce:

    '
    /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
     * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
     * VVVV is no smaller than the current year when a version is released.
     */
    #if __INTEL_LLVM_COMPILER < 1000000L
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER    % 10)
    #else
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_LLVM_COMPILER/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_LLVM_COMPILER     % 100)
    #endif
    #if defined(_MSC_VER)
      /* _MSC_VER = VVRR */
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #elif defined(__GNUG__)
    # define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    #endif
    #if defined(__GNUC_MINOR__)
    # define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    #endif
    #if defined(__GNUC_PATCHLEVEL__)
    # define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IntelLLVM-DetermineCompiler.cmake:35 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID \"MSVC\"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID \"GNU\"
    #endif'

  the old evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define /usrSIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define /usrSIMULATE_ID "GNU"
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(_MSC_VER)
    # define @PREFIX@SIMULATE_ID "MSVC"
    #endif
    #if defined(__GNUC__)
    # define @PREFIX@SIMULATE_ID "GNU"
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVHPC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__NVCOMPILER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__NVCOMPILER_MINOR__)
    # if defined(__NVCOMPILER_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__NVCOMPILER_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:22 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID \"Clang\"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define /usrSIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # elif defined(__clang__)
    #  define @PREFIX@SIMULATE_ID "Clang"
    # elif defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.21/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.21/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.21/Modules/CMakeCompilerIdDetection.cmake:33 (_readFile)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:282 (compiler_id_detection)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:301 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:6 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCompilerId.cmake:59 (__determine_compiler_id_test)
  /usr/share/cmake-3.21/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is unknown
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
CMake Deprecation Warning at CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29.2") 
-- Build Platform: Linux
-- Will build database interface for SQLite
-- Will build command line based admin utility
-- Building eurephia plug-in for OpenVPN
-- Looking for endian.h
-- Looking for endian.h - found
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Looking for dlclose in dl
-- Looking for dlclose in dl - found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_mutex_lock in pthread
-- Looking for pthread_mutex_lock in pthread - found
-- Looking for pthread_mutex_unlock in pthread
-- Looking for pthread_mutex_unlock in pthread - found
-- Checking for one of the modules 'openssl'
-- Looking for RAND_load_file in crypto
-- Looking for RAND_load_file in crypto - found
-- Looking for RAND_pseudo_bytes in crypto
-- Looking for RAND_pseudo_bytes in crypto - found
-- Checking for one of the modules 'libxml-2.0;libxml2;libxml>=2.6'
-- Checking for one of the modules 'libxslt'
CMake Deprecation Warning at common/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


CMake Deprecation Warning at database/sqlite/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Checking for one of the modules 'sqlite3'
-- sqlite3 binary was not found.  You will need to generate the database file on your own
CMake Deprecation Warning at eurephiadm/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


CMake Deprecation Warning at utils/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


CMake Deprecation Warning at plugin/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Looking for sem_wait in rt
-- Looking for sem_wait in rt - not found
-- Looking for sem_timedwait in rt
-- Looking for sem_timedwait in rt - not found
-- Looking for sem_post in rt
-- Looking for sem_post in rt - not found
-- * sem_wait was not found in librt, trying libpthread
-- Looking for sem_wait in pthread
-- Looking for sem_wait in pthread - found
-- * sem_timedwait was not found in librt, trying libpthread
-- Looking for sem_timedwait in pthread
-- Looking for sem_timedwait in pthread - found
-- * sem_post was not found in librt, trying libpthread
-- Looking for sem_post in pthread
-- Looking for sem_post in pthread - found
-- Looking for mq_open in rt
-- Looking for mq_open in rt - found
-- Looking for mq_close in rt
-- Looking for mq_close in rt - found
-- Looking for mq_unlink in rt
-- Looking for mq_unlink in rt - found
-- Looking for mq_send in rt
-- Looking for mq_send in rt - found
-- Looking for mq_receive in rt
-- Looking for mq_receive in rt - found
-- Looking for mq_getattr in rt
-- Looking for mq_getattr in rt - found
-- Will build iptables firewall module
CMake Deprecation Warning at plugin/firewall/iptables/CMakeLists.txt:21 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Configuring done
-- Generating done
CMake Warning:
  Manually-specified variables were not used by the project:

    SQLITE3PREFIX


-- Build files have been written to: /<<PKGBUILDDIR>>

Building options:
                 CFLAGS: -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89 -fcommon -fno-delete-null-pointer-checks -g -Wall -Wpointer-arith

eurephia will be built with support for: 

               Database: SQLite3 
               Firewall: iptables 
        OpenVPN plug-in: eurephia-auth
            Admin tools: eurephiadm 

         Install prefix: /usr
           Binaries dir: /usr/bin
          Man pages dir: /usr/share/man
           Plug-in path: /usr/lib/eurephia
         XSLT base path: /usr/share/eurephia/xslt
   eurephiadm XSLT path: /usr/share/eurephia/xslt/eurephiadm
  SQLite3 database path: /var/lib/eurephia


make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_auto_build
dh_auto_build: warning: Compatibility levels before 10 are deprecated (level 9 in use)
	make -j1
make[1]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target eurephiacommon
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[  1%] Building C object common/CMakeFiles/eurephiacommon.dir/certinfo.c.o
[  2%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_getsym.c.o
[  4%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_log.c.o
[  5%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_nullsafe.c.o
[  6%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_values.c.o
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
        if( (vls == NULL) ) {
             ~~~~^~~~~~~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: remove extraneous parentheses around the comparison to silence this warning
        if( (vls == NULL) ) {
            ~    ^      ~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: use '=' to turn this equality comparison into an assignment
        if( (vls == NULL) ) {
                 ^~
                 =
1 warning generated.
[  8%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_cfgfile.c.o
[  9%] Building C object common/CMakeFiles/eurephiacommon.dir/passwd.c.o
[ 11%] Building C object common/CMakeFiles/eurephiacommon.dir/randstr.c.o
/<<PKGBUILDDIR>>/common/randstr.c:65:21: warning: 'RAND_pseudo_bytes' is deprecated [-Wdeprecated-declarations]
                if( RAND_pseudo_bytes((unsigned char *) rndstr, len) ) {
                    ^
/usr/include/openssl/rand.h:44:1: note: 'RAND_pseudo_bytes' has been explicitly marked deprecated here
DEPRECATEDIN_1_1_0(int RAND_pseudo_bytes(unsigned char *buf, int num))
^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:160:34: note: expanded from macro 'DEPRECATEDIN_1_1_0'
# define DEPRECATEDIN_1_1_0(f)   DECLARE_DEPRECATED(f)
                                 ^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:118:55: note: expanded from macro 'DECLARE_DEPRECATED'
#   define DECLARE_DEPRECATED(f)    f __attribute__ ((deprecated));
                                                      ^
1 warning generated.
[ 12%] Building C object common/CMakeFiles/eurephiacommon.dir/sha512.c.o
[ 13%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb.c.o
[ 15%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_xml.c.o
/<<PKGBUILDDIR>>/common/eurephia_xml.c:227:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
        xmlStrVPrintf(msg, 2048, xmlfmt, ap);
                                 ^~~~~~
/usr/include/libxml2/libxml/xmlstring.h:105:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
1 warning generated.
[ 16%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb_mapping.c.o
[ 18%] Linking C static library libeurephiacommon.a
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 18%] Built target eurephiacommon
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target edb-sqlite
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 19%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/sqlite.c.o
[ 20%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/edb-sqlite.c.o
[ 22%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/__/__/common/eurephiadb_session_common.c.o
[ 23%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/authentication.c.o
[ 25%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/firewalladmin.c.o
[ 26%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/attempts.c.o
[ 27%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/blacklist.c.o
[ 29%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/usercerts.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:120:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 7));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:124:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 8));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
4 warnings generated.
[ 30%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/configuration.c.o
[ 31%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/useraccount.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:39: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                      ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:58: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                   ~~~   ^~~~~~~~~~~~~~~~~~~
                                                   %lld
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                 ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:53: warning: format specifies type 'long' but the argument has type 'int' [-Wformat]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                              ~~~   ^~~
                                              %d
4 warnings generated.
[ 33%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/certificates.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:114:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 2));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:118:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 3));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:42: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [-Wpointer-sign]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                         ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:61: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                      ~~~   ^~~~~~~~~~~~~~~~~~~
                                                      %lld
6 warnings generated.
[ 34%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/lastlog.c.o
[ 36%] Linking C shared library edb-sqlite.so
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 37%] Built target edb-sqlite
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 38%] Creating buildinfo.h
./mk_buildinfo.sh: 30: [[: not found
./mk_buildinfo.sh: 60: [[: not found
Scanning dependencies of target eurephiadm
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 40%] Building C object eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:203:47: error: function definition is not allowed here
        void dump_values(eurephiaVALUES *vls) {
                                              ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:216:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(cfg);
                ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:221:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(ctx->dbc->config);
                ^
2 warnings and 1 error generated.
make[3]: *** [eurephiadm/CMakeFiles/eurephiadm.dir/build.make:79: eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o] Error 1
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[2]: *** [CMakeFiles/Makefile2:265: eurephiadm/CMakeFiles/eurephiadm.dir/all] Error 2
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
make[1]: *** [Makefile:136: all] Error 2
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
dh_auto_build: error: make -j1 returned exit code 2
make: *** [debian/rules:3: build] Error 25
dpkg-buildpackage: error: debian/rules build subprocess returned exit status 2
--------------------------------------------------------------------------------
Build finished at 2021-10-26T23:02:42Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 5492
Build-Time: 8
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 9
Job: eurephia_1.1.0-6.1
Machine Architecture: amd64
Package: eurephia
Package-Time: 38
Source-Version: 1.1.0-6.1
Space: 5492
Status: attempted
Version: 1.1.0-6.1
--------------------------------------------------------------------------------
Finished at 2021-10-26T23:02:42Z
Build needed 00:00:38, 5492k disk space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 38.869578813s
