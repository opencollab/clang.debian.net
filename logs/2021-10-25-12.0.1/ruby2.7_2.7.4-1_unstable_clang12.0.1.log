DC-Build-Header: ruby2.7 2.7.4-1 / 2021-10-26 20:49:22 +0000
DC-Task: type:rebuild-binarch-only source:ruby2.7 version:2.7.4-1 chroot:unstable esttime:991 logfile:/tmp/ruby2.7_2.7.4-1_unstable_clang12.log modes:clang12:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang12 ruby2.7_2.7.4-1'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-9-249.eu-central-1.compute.internal

+==============================================================================+
| ruby2.7 2.7.4-1 (amd64)                      Tue, 26 Oct 2021 20:49:22 +0000 |
+==============================================================================+

Package: ruby2.7
Version: 2.7.4-1
Source Version: 2.7.4-1
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-b7725fc0-d58a-4490-b83b-7e3dfecc3421' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang12
------------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=12
+ echo 'Install of clang-12'
Install of clang-12
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [165 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [63.6 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [63.6 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [34.5 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [34.5 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [38.7 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [38.7 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Translation-en [6585 kB]
Fetched 6951 kB in 3s (2739 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-12 libomp-12-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386 libclang-common-12-dev
  libclang-cpp12 libclang1-12 libedit2 libelf1 libgc1 libgcc-9-dev libicu67
  libllvm12 libmd0 libobjc-11-dev libobjc4 libomp5-12 libunwind-12 libxml2
  libz3-4 llvm-12-linker-tools
Suggested packages:
  clang-12-doc libomp-12-doc
Recommended packages:
  llvm-12-dev python3
The following NEW packages will be installed:
  clang-12 lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386
  libclang-common-12-dev libclang-cpp12 libclang1-12 libedit2 libelf1 libgc1
  libgcc-9-dev libicu67 libllvm12 libmd0 libobjc-11-dev libobjc-9-dev libobjc4
  libomp-12-dev libomp5-12 libunwind-12 libxml2 libz3-4 llvm-12-linker-tools
0 upgraded, 25 newly installed, 0 to remove and 0 not upgraded.
Need to get 67.6 MB of archives.
After this operation, 349 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libmd0 amd64 1.0.4-1 [29.6 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.11.3-1 [108 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20210910-1 [97.5 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 libicu67 amd64 67.1-7 [8622 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.12+dfsg-5 [696 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 libz3-4 amd64 4.8.12-1+b1 [6997 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libllvm12 amd64 1:12.0.1-15 [19.4 MB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libclang-cpp12 amd64 1:12.0.1-15 [9996 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libgc1 amd64 1:8.0.4-3 [239 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 11.2.0-10 [43.2 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libobjc-11-dev amd64 11.2.0-10 [170 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.32-4 [2624 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 11.2.0-10 [49.9 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 11.2.0-10 [601 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-12-dev amd64 1:12.0.1-15 [4819 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 llvm-12-linker-tools amd64 1:12.0.1-15 [1222 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libclang1-12 amd64 1:12.0.1-15 [5644 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 clang-12 amd64 1:12.0.1-15 [117 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libasan5 amd64 9.4.0-3 [2734 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.185-2 [172 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libgcc-9-dev amd64 9.4.0-3 [2343 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.4.0-3 [219 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libunwind-12 amd64 1:12.0.1-15 [63.9 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 libomp5-12 amd64 1:12.0.1-15 [405 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libomp-12-dev amd64 1:12.0.1-15 [104 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 67.6 MB in 0s (138 MB/s)
Selecting previously unselected package libmd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12431 files and directories currently installed.)
Preparing to unpack .../00-libmd0_1.0.4-1_amd64.deb ...
Unpacking libmd0:amd64 (1.0.4-1) ...
Selecting previously unselected package libbsd0:amd64.
Preparing to unpack .../01-libbsd0_0.11.3-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.11.3-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../02-libedit2_3.1-20210910-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20210910-1) ...
Selecting previously unselected package libicu67:amd64.
Preparing to unpack .../03-libicu67_67.1-7_amd64.deb ...
Unpacking libicu67:amd64 (67.1-7) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../04-libxml2_2.9.12+dfsg-5_amd64.deb ...
Unpacking libxml2:amd64 (2.9.12+dfsg-5) ...
Selecting previously unselected package libz3-4:amd64.
Preparing to unpack .../05-libz3-4_4.8.12-1+b1_amd64.deb ...
Unpacking libz3-4:amd64 (4.8.12-1+b1) ...
Selecting previously unselected package libllvm12:amd64.
Preparing to unpack .../06-libllvm12_1%3a12.0.1-15_amd64.deb ...
Unpacking libllvm12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libclang-cpp12.
Preparing to unpack .../07-libclang-cpp12_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang-cpp12 (1:12.0.1-15) ...
Selecting previously unselected package libgc1:amd64.
Preparing to unpack .../08-libgc1_1%3a8.0.4-3_amd64.deb ...
Unpacking libgc1:amd64 (1:8.0.4-3) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../09-libobjc4_11.2.0-10_amd64.deb ...
Unpacking libobjc4:amd64 (11.2.0-10) ...
Selecting previously unselected package libobjc-11-dev:amd64.
Preparing to unpack .../10-libobjc-11-dev_11.2.0-10_amd64.deb ...
Unpacking libobjc-11-dev:amd64 (11.2.0-10) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../11-libc6-i386_2.32-4_amd64.deb ...
Unpacking libc6-i386 (2.32-4) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../12-lib32gcc-s1_11.2.0-10_amd64.deb ...
Unpacking lib32gcc-s1 (11.2.0-10) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../13-lib32stdc++6_11.2.0-10_amd64.deb ...
Unpacking lib32stdc++6 (11.2.0-10) ...
Selecting previously unselected package libclang-common-12-dev.
Preparing to unpack .../14-libclang-common-12-dev_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang-common-12-dev (1:12.0.1-15) ...
Selecting previously unselected package llvm-12-linker-tools.
Preparing to unpack .../15-llvm-12-linker-tools_1%3a12.0.1-15_amd64.deb ...
Unpacking llvm-12-linker-tools (1:12.0.1-15) ...
Selecting previously unselected package libclang1-12.
Preparing to unpack .../16-libclang1-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libclang1-12 (1:12.0.1-15) ...
Selecting previously unselected package clang-12.
Preparing to unpack .../17-clang-12_1%3a12.0.1-15_amd64.deb ...
Unpacking clang-12 (1:12.0.1-15) ...
Selecting previously unselected package libasan5:amd64.
Preparing to unpack .../18-libasan5_9.4.0-3_amd64.deb ...
Unpacking libasan5:amd64 (9.4.0-3) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../19-libelf1_0.185-2_amd64.deb ...
Unpacking libelf1:amd64 (0.185-2) ...
Selecting previously unselected package libgcc-9-dev:amd64.
Preparing to unpack .../20-libgcc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libgcc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../21-libobjc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libunwind-12:amd64.
Preparing to unpack .../22-libunwind-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libunwind-12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libomp5-12:amd64.
Preparing to unpack .../23-libomp5-12_1%3a12.0.1-15_amd64.deb ...
Unpacking libomp5-12:amd64 (1:12.0.1-15) ...
Selecting previously unselected package libomp-12-dev.
Preparing to unpack .../24-libomp-12-dev_1%3a12.0.1-15_amd64.deb ...
Unpacking libomp-12-dev (1:12.0.1-15) ...
Setting up libicu67:amd64 (67.1-7) ...
Setting up libasan5:amd64 (9.4.0-3) ...
Setting up libz3-4:amd64 (4.8.12-1+b1) ...
Setting up libunwind-12:amd64 (1:12.0.1-15) ...
Setting up libgc1:amd64 (1:8.0.4-3) ...
Setting up libmd0:amd64 (1.0.4-1) ...
Setting up libc6-i386 (2.32-4) ...
Setting up libbsd0:amd64 (0.11.3-1) ...
Setting up libelf1:amd64 (0.185-2) ...
Setting up libxml2:amd64 (2.9.12+dfsg-5) ...
Setting up libedit2:amd64 (3.1-20210910-1) ...
Setting up libobjc4:amd64 (11.2.0-10) ...
Setting up libgcc-9-dev:amd64 (9.4.0-3) ...
Setting up lib32gcc-s1 (11.2.0-10) ...
Setting up lib32stdc++6 (11.2.0-10) ...
Setting up libllvm12:amd64 (1:12.0.1-15) ...
Setting up libobjc-9-dev:amd64 (9.4.0-3) ...
Setting up libclang-common-12-dev (1:12.0.1-15) ...
Setting up libomp5-12:amd64 (1:12.0.1-15) ...
Setting up libobjc-11-dev:amd64 (11.2.0-10) ...
Setting up llvm-12-linker-tools (1:12.0.1-15) ...
Setting up libclang1-12 (1:12.0.1-15) ...
Setting up libclang-cpp12 (1:12.0.1-15) ...
Setting up libomp-12-dev (1:12.0.1-15) ...
Setting up clang-12 (1:12.0.1-15) ...
Processing triggers for libc-bin (2.32-4) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10 11'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-12 g++-4.6
+ ln -s clang-12 gcc-4.6
+ ln -s clang-12 cpp-4.6
+ ln -s clang-12 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-12 g++-4.7
+ ln -s clang-12 gcc-4.7
+ ln -s clang-12 cpp-4.7
+ ln -s clang-12 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-12 g++-4.8
+ ln -s clang-12 gcc-4.8
+ ln -s clang-12 cpp-4.8
+ ln -s clang-12 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-12 g++-4.9
+ ln -s clang-12 gcc-4.9
+ ln -s clang-12 cpp-4.9
+ ln -s clang-12 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-12 g++-5
+ ln -s clang-12 gcc-5
+ ln -s clang-12 cpp-5
+ ln -s clang-12 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-12 g++-6
+ ln -s clang-12 gcc-6
+ ln -s clang-12 cpp-6
+ ln -s clang-12 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-12 g++-7
+ ln -s clang-12 gcc-7
+ ln -s clang-12 cpp-7
+ ln -s clang-12 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-12 g++-8
+ ln -s clang-12 gcc-8
+ ln -s clang-12 cpp-8
+ ln -s clang-12 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-12 g++-9
+ ln -s clang-12 gcc-9
+ ln -s clang-12 cpp-9
+ ln -s clang-12 gcc
+ echo 'gcc-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-12 g++-10
+ ln -s clang-12 gcc-10
+ ln -s clang-12 cpp-10
+ ln -s clang-12 gcc
+ echo 'gcc-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-11 gcc-11 cpp-11 gcc
+ ln -s clang++-12 g++-11
+ ln -s clang-12 gcc-11
+ ln -s clang-12 cpp-11
+ ln -s clang-12 gcc
+ echo 'gcc-11 hold'
+ dpkg --set-selections
+ echo 'g++-11 hold'
+ dpkg --set-selections
+ cd -
/build/ruby2.7-NXrgEM
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang
+ cd /usr/bin/
+ rm -f clang++ clang
+ ln -s clang-12 clang++
+ ln -s clang-12 clang
+ clang++ --version
Debian clang version 12.0.1-15
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ clang --version
Debian clang version 12.0.1-15
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ cd -
/build/ruby2.7-NXrgEM
+ apt install --yes --no-install-recommends --force-yes qt5-qmake

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  qt5-qmake-bin qtchooser
The following NEW packages will be installed:
  qt5-qmake qt5-qmake-bin qtchooser
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 1322 kB of archives.
After this operation, 4914 kB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake-bin amd64 5.15.2+dfsg-12 [1046 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 qtchooser amd64 66-2 [26.3 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake amd64 5.15.2+dfsg-12 [249 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1322 kB in 0s (20.0 MB/s)
Selecting previously unselected package qt5-qmake-bin.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13527 files and directories currently installed.)
Preparing to unpack .../qt5-qmake-bin_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake-bin (5.15.2+dfsg-12) ...
Selecting previously unselected package qtchooser.
Preparing to unpack .../qtchooser_66-2_amd64.deb ...
Unpacking qtchooser (66-2) ...
Selecting previously unselected package qt5-qmake:amd64.
Preparing to unpack .../qt5-qmake_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake:amd64 (5.15.2+dfsg-12) ...
Setting up qt5-qmake-bin (5.15.2+dfsg-12) ...
Setting up qtchooser (66-2) ...
Setting up qt5-qmake:amd64 (5.15.2+dfsg-12) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ cp /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qmake.conf /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qplatformdefs.h /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
+ ls -al /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
total 16
drwxr-xr-x  2 root root 4096 Oct 26 20:49 .
drwxr-xr-x 76 root root 4096 Oct 26 20:49 ..
-rw-r--r--  1 root root  276 Oct 26 20:49 qmake.conf
-rw-r--r--  1 root root 3218 Oct 26 20:49 qplatformdefs.h
+ cat /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/qmake.conf
#
# qmake configuration for linux-clang
#

MAKEFILE_GENERATOR = UNIX
CONFIG += incremental

QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/clang.conf)

QMAKE_LFLAGS += -ccc-gcc-name g++

load(qt_config)
+ export QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ sed -i -e 's|compare_problem(2,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ sed -i -e 's|compare_problem(1,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ grep 'compare_problem(' /usr/bin/dpkg-gensymbols
        compare_problem(4, g_('new libraries appeared in the symbols file: %s'), "@libs");
        compare_problem(3, g_('some libraries disappeared in the symbols file: %s'), "@libs");
        compare_problem(0, g_('some new symbols appeared in the symbols file: %s'),
        compare_problem(0, g_('some symbols or patterns disappeared in the symbols file: %s'),

I: Finished running '/tmp/clang12'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/ruby2.7-NXrgEM/resolver-NPVFSw' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
NOTICE: 'ruby2.7' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/ruby-team/ruby.git
Please use:
git clone https://salsa.debian.org/ruby-team/ruby.git
to retrieve the latest (possibly unreleased) updates to the package.
Need to get 10.9 MB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main ruby2.7 2.7.4-1 (dsc) [2506 B]
Get:2 http://127.0.0.1:12990/debian sid/main ruby2.7 2.7.4-1 (tar) [10.8 MB]
Get:3 http://127.0.0.1:12990/debian sid/main ruby2.7 2.7.4-1 (diff) [113 kB]
Fetched 10.9 MB in 0s (32.9 MB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/ruby2.7-NXrgEM/ruby2.7-2.7.4' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/ruby2.7-NXrgEM' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: bison, coreutils (>= 7.5), debhelper-compat (= 13), file, libffi-dev, libgdbm-compat-dev, libgdbm-dev, libgmp-dev, libncurses-dev, libedit-dev, libssl-dev, libyaml-dev, netbase, openssl, procps, rubygems-integration (>= 1.6), systemtap-sdt-dev, tzdata, zlib1g-dev, build-essential, fakeroot
Filtered Build-Depends: bison, coreutils (>= 7.5), debhelper-compat (= 13), file, libffi-dev, libgdbm-compat-dev, libgdbm-dev, libgmp-dev, libncurses-dev, libedit-dev, libssl-dev, libyaml-dev, netbase, openssl, procps, rubygems-integration (>= 1.6), systemtap-sdt-dev, tzdata, zlib1g-dev, build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [520 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [570 B]
Fetched 2047 B in 0s (201 kB/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bison bsdextrautils
  ca-certificates debhelper dh-autoreconf dh-strip-nondeterminism dwz file
  gettext gettext-base groff-base intltool-debian libarchive-zip-perl
  libbsd-dev libdebhelper-perl libedit-dev libexpat1 libffi-dev
  libfile-stripnondeterminism-perl libgdbm-compat-dev libgdbm-dev libgmp-dev
  libgmpxx4ldbl libmagic-mgc libmagic1 libmd-dev libmpdec3 libncurses-dev
  libncurses6 libncursesw6 libpipeline1 libprocps8 libpython3-stdlib
  libpython3.9-minimal libpython3.9-stdlib libreadline8 libsigsegv2
  libsqlite3-0 libssl-dev libsub-override-perl libtool libuchardet0
  libyaml-0-2 libyaml-dev m4 man-db media-types netbase openssl po-debconf
  procps python3 python3-minimal python3.9 python3.9-minimal readline-common
  rubygems-integration sensible-utils systemtap-sdt-dev zlib1g-dev
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc bison-doc dh-make gettext-doc
  libasprintf-dev libgettextpo-dev groff gmp-doc libgmp10-doc libmpfr-dev
  ncurses-doc libssl-doc libtool-doc gfortran | fortran95-compiler gcj-jdk
  libyaml-doc m4-doc apparmor less www-browser libmail-box-perl python3-doc
  python3-tk python3-venv python3.9-venv python3.9-doc binfmt-support
  readline-doc bundler
Recommended packages:
  curl | wget | lynx libarchive-cpio-perl libgpm2 libltdl-dev
  libmail-sendmail-perl psmisc
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bison bsdextrautils
  ca-certificates debhelper dh-autoreconf dh-strip-nondeterminism dwz file
  gettext gettext-base groff-base intltool-debian libarchive-zip-perl
  libbsd-dev libdebhelper-perl libedit-dev libexpat1 libffi-dev
  libfile-stripnondeterminism-perl libgdbm-compat-dev libgdbm-dev libgmp-dev
  libgmpxx4ldbl libmagic-mgc libmagic1 libmd-dev libmpdec3 libncurses-dev
  libncurses6 libncursesw6 libpipeline1 libprocps8 libpython3-stdlib
  libpython3.9-minimal libpython3.9-stdlib libreadline8 libsigsegv2
  libsqlite3-0 libssl-dev libsub-override-perl libtool libuchardet0
  libyaml-0-2 libyaml-dev m4 man-db media-types netbase openssl po-debconf
  procps python3 python3-minimal python3.9 python3.9-minimal readline-common
  rubygems-integration sbuild-build-depends-main-dummy sensible-utils
  systemtap-sdt-dev zlib1g-dev
0 upgraded, 65 newly installed, 0 to remove and 0 not upgraded.
Need to get 22.3 MB of archives.
After this operation, 77.2 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [996 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdextrautils amd64 2.37.2-4 [143 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.7-1 [67.8 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-7 [935 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.3-1 [34.3 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.4-2 [1354 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libpython3.9-minimal amd64 3.9.7-4 [804 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libexpat1 amd64 2.4.1-3 [104 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 python3.9-minimal amd64 3.9.7-4 [1963 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 python3-minimal amd64 3.9.2-3 [38.2 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 media-types all 4.0.0 [30.3 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libmpdec3 amd64 2.5.1-2 [87.8 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 libncursesw6 amd64 6.2+20210905-1 [133 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 readline-common all 8.1-2 [73.8 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libreadline8 amd64 8.1-2 [168 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 libsqlite3-0 amd64 3.36.0-2 [815 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libpython3.9-stdlib amd64 3.9.7-4 [1688 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 python3.9 amd64 3.9.7-4 [480 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libpython3-stdlib amd64 3.9.2-3 [21.4 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 python3 amd64 3.9.2-3 [37.9 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 netbase all 6.3 [19.9 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libncurses6 amd64 6.2+20210905-1 [102 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libprocps8 amd64 2:3.3.17-5 [63.9 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 procps amd64 2:3.3.17-5 [502 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.17 [21.5 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 openssl amd64 1.1.1l-1 [851 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 ca-certificates all 20211016 [156 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.39-3 [273 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.39-3 [126 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.39-3 [69.1 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.21-4 [175 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.13-1 [34.8 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-5 [204 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.71-2 [343 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1+nmu1 [77.1 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.5-1 [823 kB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.21-4 [510 kB]
Get:38 http://127.0.0.1:12990/debian sid/main amd64 bison amd64 2:3.8.2+dfsg-1 [1173 kB]
Get:39 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 13.5.2 [192 kB]
Get:40 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-15 [513 kB]
Get:41 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 20 [17.1 kB]
Get:42 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.68-1 [104 kB]
Get:43 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:44 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.12.0-2 [26.3 kB]
Get:45 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.12.0-2 [15.5 kB]
Get:46 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.14-1 [98.3 kB]
Get:47 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.21-4 [1311 kB]
Get:48 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:49 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21+nmu1 [248 kB]
Get:50 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 13.5.2 [1056 kB]
Get:51 http://127.0.0.1:12990/debian sid/main amd64 libmd-dev amd64 1.0.4-1 [47.2 kB]
Get:52 http://127.0.0.1:12990/debian sid/main amd64 libbsd-dev amd64 0.11.3-1 [233 kB]
Get:53 http://127.0.0.1:12990/debian sid/main amd64 libncurses-dev amd64 6.2+20210905-1 [344 kB]
Get:54 http://127.0.0.1:12990/debian sid/main amd64 libedit-dev amd64 3.1-20210910-1 [118 kB]
Get:55 http://127.0.0.1:12990/debian sid/main amd64 libffi-dev amd64 3.4.2-3 [60.4 kB]
Get:56 http://127.0.0.1:12990/debian sid/main amd64 libgdbm-compat-dev amd64 1.22-1 [56.5 kB]
Get:57 http://127.0.0.1:12990/debian sid/main amd64 libgdbm-dev amd64 1.22-1 [173 kB]
Get:58 http://127.0.0.1:12990/debian sid/main amd64 libgmpxx4ldbl amd64 2:6.2.1+dfsg-2 [338 kB]
Get:59 http://127.0.0.1:12990/debian sid/main amd64 libgmp-dev amd64 2:6.2.1+dfsg-2 [641 kB]
Get:60 http://127.0.0.1:12990/debian sid/main amd64 libssl-dev amd64 1.1.1l-1 [1809 kB]
Get:61 http://127.0.0.1:12990/debian sid/main amd64 libyaml-0-2 amd64 0.2.2-1 [49.6 kB]
Get:62 http://127.0.0.1:12990/debian sid/main amd64 libyaml-dev amd64 0.2.2-1 [60.1 kB]
Get:63 http://127.0.0.1:12990/debian sid/main amd64 rubygems-integration all 1.18 [6704 B]
Get:64 http://127.0.0.1:12990/debian sid/main amd64 systemtap-sdt-dev amd64 4.5-2 [31.2 kB]
Get:65 http://127.0.0.1:12990/debian sid/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2 [190 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 22.3 MB in 0s (65.6 MB/s)
Selecting previously unselected package bsdextrautils.
(Reading database ... 14272 files and directories currently installed.)
Preparing to unpack .../0-bsdextrautils_2.37.2-4_amd64.deb ...
Unpacking bsdextrautils (2.37.2-4) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../1-libuchardet0_0.0.7-1_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.7-1) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../2-groff-base_1.22.4-7_amd64.deb ...
Unpacking groff-base (1.22.4-7) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../3-libpipeline1_1.5.3-1_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.3-1) ...
Selecting previously unselected package man-db.
Preparing to unpack .../4-man-db_2.9.4-2_amd64.deb ...
Unpacking man-db (2.9.4-2) ...
Selecting previously unselected package libpython3.9-minimal:amd64.
Preparing to unpack .../5-libpython3.9-minimal_3.9.7-4_amd64.deb ...
Unpacking libpython3.9-minimal:amd64 (3.9.7-4) ...
Selecting previously unselected package libexpat1:amd64.
Preparing to unpack .../6-libexpat1_2.4.1-3_amd64.deb ...
Unpacking libexpat1:amd64 (2.4.1-3) ...
Selecting previously unselected package python3.9-minimal.
Preparing to unpack .../7-python3.9-minimal_3.9.7-4_amd64.deb ...
Unpacking python3.9-minimal (3.9.7-4) ...
Setting up libpython3.9-minimal:amd64 (3.9.7-4) ...
Setting up libexpat1:amd64 (2.4.1-3) ...
Setting up python3.9-minimal (3.9.7-4) ...
Selecting previously unselected package python3-minimal.
(Reading database ... 15139 files and directories currently installed.)
Preparing to unpack .../0-python3-minimal_3.9.2-3_amd64.deb ...
Unpacking python3-minimal (3.9.2-3) ...
Selecting previously unselected package media-types.
Preparing to unpack .../1-media-types_4.0.0_all.deb ...
Unpacking media-types (4.0.0) ...
Selecting previously unselected package libmpdec3:amd64.
Preparing to unpack .../2-libmpdec3_2.5.1-2_amd64.deb ...
Unpacking libmpdec3:amd64 (2.5.1-2) ...
Selecting previously unselected package libncursesw6:amd64.
Preparing to unpack .../3-libncursesw6_6.2+20210905-1_amd64.deb ...
Unpacking libncursesw6:amd64 (6.2+20210905-1) ...
Selecting previously unselected package readline-common.
Preparing to unpack .../4-readline-common_8.1-2_all.deb ...
Unpacking readline-common (8.1-2) ...
Selecting previously unselected package libreadline8:amd64.
Preparing to unpack .../5-libreadline8_8.1-2_amd64.deb ...
Unpacking libreadline8:amd64 (8.1-2) ...
Selecting previously unselected package libsqlite3-0:amd64.
Preparing to unpack .../6-libsqlite3-0_3.36.0-2_amd64.deb ...
Unpacking libsqlite3-0:amd64 (3.36.0-2) ...
Selecting previously unselected package libpython3.9-stdlib:amd64.
Preparing to unpack .../7-libpython3.9-stdlib_3.9.7-4_amd64.deb ...
Unpacking libpython3.9-stdlib:amd64 (3.9.7-4) ...
Selecting previously unselected package python3.9.
Preparing to unpack .../8-python3.9_3.9.7-4_amd64.deb ...
Unpacking python3.9 (3.9.7-4) ...
Selecting previously unselected package libpython3-stdlib:amd64.
Preparing to unpack .../9-libpython3-stdlib_3.9.2-3_amd64.deb ...
Unpacking libpython3-stdlib:amd64 (3.9.2-3) ...
Setting up python3-minimal (3.9.2-3) ...
Selecting previously unselected package python3.
(Reading database ... 15578 files and directories currently installed.)
Preparing to unpack .../00-python3_3.9.2-3_amd64.deb ...
Unpacking python3 (3.9.2-3) ...
Selecting previously unselected package netbase.
Preparing to unpack .../01-netbase_6.3_all.deb ...
Unpacking netbase (6.3) ...
Selecting previously unselected package libncurses6:amd64.
Preparing to unpack .../02-libncurses6_6.2+20210905-1_amd64.deb ...
Unpacking libncurses6:amd64 (6.2+20210905-1) ...
Selecting previously unselected package libprocps8:amd64.
Preparing to unpack .../03-libprocps8_2%3a3.3.17-5_amd64.deb ...
Unpacking libprocps8:amd64 (2:3.3.17-5) ...
Selecting previously unselected package procps.
Preparing to unpack .../04-procps_2%3a3.3.17-5_amd64.deb ...
Unpacking procps (2:3.3.17-5) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../05-sensible-utils_0.0.17_all.deb ...
Unpacking sensible-utils (0.0.17) ...
Selecting previously unselected package openssl.
Preparing to unpack .../06-openssl_1.1.1l-1_amd64.deb ...
Unpacking openssl (1.1.1l-1) ...
Selecting previously unselected package ca-certificates.
Preparing to unpack .../07-ca-certificates_20211016_all.deb ...
Unpacking ca-certificates (20211016) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../08-libmagic-mgc_1%3a5.39-3_amd64.deb ...
Unpacking libmagic-mgc (1:5.39-3) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../09-libmagic1_1%3a5.39-3_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.39-3) ...
Selecting previously unselected package file.
Preparing to unpack .../10-file_1%3a5.39-3_amd64.deb ...
Unpacking file (1:5.39-3) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../11-gettext-base_0.21-4_amd64.deb ...
Unpacking gettext-base (0.21-4) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../12-libsigsegv2_2.13-1_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.13-1) ...
Selecting previously unselected package m4.
Preparing to unpack .../13-m4_1.4.18-5_amd64.deb ...
Unpacking m4 (1.4.18-5) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../14-autoconf_2.71-2_all.deb ...
Unpacking autoconf (2.71-2) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../15-autotools-dev_20180224.1+nmu1_all.deb ...
Unpacking autotools-dev (20180224.1+nmu1) ...
Selecting previously unselected package automake.
Preparing to unpack .../16-automake_1%3a1.16.5-1_all.deb ...
Unpacking automake (1:1.16.5-1) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../17-autopoint_0.21-4_all.deb ...
Unpacking autopoint (0.21-4) ...
Selecting previously unselected package bison.
Preparing to unpack .../18-bison_2%3a3.8.2+dfsg-1_amd64.deb ...
Unpacking bison (2:3.8.2+dfsg-1) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../19-libdebhelper-perl_13.5.2_all.deb ...
Unpacking libdebhelper-perl (13.5.2) ...
Selecting previously unselected package libtool.
Preparing to unpack .../20-libtool_2.4.6-15_all.deb ...
Unpacking libtool (2.4.6-15) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../21-dh-autoreconf_20_all.deb ...
Unpacking dh-autoreconf (20) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../22-libarchive-zip-perl_1.68-1_all.deb ...
Unpacking libarchive-zip-perl (1.68-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../23-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../24-libfile-stripnondeterminism-perl_1.12.0-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.12.0-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../25-dh-strip-nondeterminism_1.12.0-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.12.0-2) ...
Selecting previously unselected package dwz.
Preparing to unpack .../26-dwz_0.14-1_amd64.deb ...
Unpacking dwz (0.14-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../27-gettext_0.21-4_amd64.deb ...
Unpacking gettext (0.21-4) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../28-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../29-po-debconf_1.0.21+nmu1_all.deb ...
Unpacking po-debconf (1.0.21+nmu1) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../30-debhelper_13.5.2_all.deb ...
Unpacking debhelper (13.5.2) ...
Selecting previously unselected package libmd-dev:amd64.
Preparing to unpack .../31-libmd-dev_1.0.4-1_amd64.deb ...
Unpacking libmd-dev:amd64 (1.0.4-1) ...
Selecting previously unselected package libbsd-dev:amd64.
Preparing to unpack .../32-libbsd-dev_0.11.3-1_amd64.deb ...
Unpacking libbsd-dev:amd64 (0.11.3-1) ...
Selecting previously unselected package libncurses-dev:amd64.
Preparing to unpack .../33-libncurses-dev_6.2+20210905-1_amd64.deb ...
Unpacking libncurses-dev:amd64 (6.2+20210905-1) ...
Selecting previously unselected package libedit-dev:amd64.
Preparing to unpack .../34-libedit-dev_3.1-20210910-1_amd64.deb ...
Unpacking libedit-dev:amd64 (3.1-20210910-1) ...
Selecting previously unselected package libffi-dev:amd64.
Preparing to unpack .../35-libffi-dev_3.4.2-3_amd64.deb ...
Unpacking libffi-dev:amd64 (3.4.2-3) ...
Selecting previously unselected package libgdbm-compat-dev:amd64.
Preparing to unpack .../36-libgdbm-compat-dev_1.22-1_amd64.deb ...
Unpacking libgdbm-compat-dev:amd64 (1.22-1) ...
Selecting previously unselected package libgdbm-dev:amd64.
Preparing to unpack .../37-libgdbm-dev_1.22-1_amd64.deb ...
Unpacking libgdbm-dev:amd64 (1.22-1) ...
Selecting previously unselected package libgmpxx4ldbl:amd64.
Preparing to unpack .../38-libgmpxx4ldbl_2%3a6.2.1+dfsg-2_amd64.deb ...
Unpacking libgmpxx4ldbl:amd64 (2:6.2.1+dfsg-2) ...
Selecting previously unselected package libgmp-dev:amd64.
Preparing to unpack .../39-libgmp-dev_2%3a6.2.1+dfsg-2_amd64.deb ...
Unpacking libgmp-dev:amd64 (2:6.2.1+dfsg-2) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../40-libssl-dev_1.1.1l-1_amd64.deb ...
Unpacking libssl-dev:amd64 (1.1.1l-1) ...
Selecting previously unselected package libyaml-0-2:amd64.
Preparing to unpack .../41-libyaml-0-2_0.2.2-1_amd64.deb ...
Unpacking libyaml-0-2:amd64 (0.2.2-1) ...
Selecting previously unselected package libyaml-dev:amd64.
Preparing to unpack .../42-libyaml-dev_0.2.2-1_amd64.deb ...
Unpacking libyaml-dev:amd64 (0.2.2-1) ...
Selecting previously unselected package rubygems-integration.
Preparing to unpack .../43-rubygems-integration_1.18_all.deb ...
Unpacking rubygems-integration (1.18) ...
Selecting previously unselected package systemtap-sdt-dev:amd64.
Preparing to unpack .../44-systemtap-sdt-dev_4.5-2_amd64.deb ...
Unpacking systemtap-sdt-dev:amd64 (4.5-2) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../45-zlib1g-dev_1%3a1.2.11.dfsg-2_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.11.dfsg-2) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../46-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up media-types (4.0.0) ...
Setting up libpipeline1:amd64 (1.5.3-1) ...
Setting up bsdextrautils (2.37.2-4) ...
update-alternatives: using /usr/bin/write.ul to provide /usr/bin/write (write) in auto mode
Setting up libmagic-mgc (1:5.39-3) ...
Setting up libarchive-zip-perl (1.68-1) ...
Setting up libyaml-0-2:amd64 (0.2.2-1) ...
Setting up libdebhelper-perl (13.5.2) ...
Setting up libsqlite3-0:amd64 (3.36.0-2) ...
Setting up libmagic1:amd64 (1:5.39-3) ...
Setting up gettext-base (0.21-4) ...
Setting up libgdbm-compat-dev:amd64 (1.22-1) ...
Setting up file (1:5.39-3) ...
Setting up libffi-dev:amd64 (3.4.2-3) ...
Setting up autotools-dev (20180224.1+nmu1) ...
Setting up libgmpxx4ldbl:amd64 (2:6.2.1+dfsg-2) ...
Setting up libncurses6:amd64 (6.2+20210905-1) ...
Setting up libsigsegv2:amd64 (2.13-1) ...
Setting up libssl-dev:amd64 (1.1.1l-1) ...
Setting up autopoint (0.21-4) ...
Setting up libncursesw6:amd64 (6.2+20210905-1) ...
Setting up zlib1g-dev:amd64 (1:1.2.11.dfsg-2) ...
Setting up dwz (0.14-1) ...
Setting up sensible-utils (0.0.17) ...
Setting up libuchardet0:amd64 (0.0.7-1) ...
Setting up libmd-dev:amd64 (1.0.4-1) ...
Setting up libmpdec3:amd64 (2.5.1-2) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up netbase (6.3) ...
Setting up libgdbm-dev:amd64 (1.22-1) ...
Setting up openssl (1.1.1l-1) ...
Setting up readline-common (8.1-2) ...
Setting up libbsd-dev:amd64 (0.11.3-1) ...
Setting up libprocps8:amd64 (2:3.3.17-5) ...
Setting up libfile-stripnondeterminism-perl (1.12.0-2) ...
Setting up libncurses-dev:amd64 (6.2+20210905-1) ...
Setting up gettext (0.21-4) ...
Setting up libgmp-dev:amd64 (2:6.2.1+dfsg-2) ...
Setting up libyaml-dev:amd64 (0.2.2-1) ...
Setting up libtool (2.4.6-15) ...
Setting up libreadline8:amd64 (8.1-2) ...
Setting up m4 (1.4.18-5) ...
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up ca-certificates (20211016) ...
Updating certificates in /etc/ssl/certs...
127 added, 0 removed; done.
Setting up libedit-dev:amd64 (3.1-20210910-1) ...
Setting up autoconf (2.71-2) ...
Setting up dh-strip-nondeterminism (1.12.0-2) ...
Setting up groff-base (1.22.4-7) ...
Setting up procps (2:3.3.17-5) ...
Setting up bison (2:3.8.2+dfsg-1) ...
update-alternatives: using /usr/bin/bison.yacc to provide /usr/bin/yacc (yacc) in auto mode
Setting up libpython3.9-stdlib:amd64 (3.9.7-4) ...
Setting up libpython3-stdlib:amd64 (3.9.2-3) ...
Setting up automake (1:1.16.5-1) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up po-debconf (1.0.21+nmu1) ...
Setting up rubygems-integration (1.18) ...
Setting up man-db (2.9.4-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up dh-autoreconf (20) ...
Setting up python3.9 (3.9.7-4) ...
Setting up debhelper (13.5.2) ...
Setting up python3 (3.9.2-3) ...
Setting up systemtap-sdt-dev:amd64 (4.5-2) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.32-4) ...
Processing triggers for ca-certificates (20211016) ...
Updating certificates in /etc/ssl/certs...
0 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any all)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.37-7 dpkg-dev_1.20.9 g++-11_11.2.0-10 gcc-11_11.2.0-10 libc6-dev_2.32-4 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 linux-libc-dev_5.14.12-1
Package versions: adduser_3.118 apt_2.3.11 autoconf_2.71-2 automake_1:1.16.5-1 autopoint_0.21-4 autotools-dev_20180224.1+nmu1 base-files_12 base-passwd_3.5.52 bash_5.1-3+b2 binutils_2.37-7 binutils-common_2.37-7 binutils-x86-64-linux-gnu_2.37-7 bison_2:3.8.2+dfsg-1 bsdextrautils_2.37.2-4 bsdutils_1:2.37.2-4 build-essential_12.9 bzip2_1.0.8-4 ca-certificates_20211016 clang-12_1:12.0.1-15 coreutils_8.32-4+b1 cpp_4:11.2.0-2 cpp-11_11.2.0-10 dash_0.5.11+git20210120+802ebd4-2 debconf_1.5.78 debhelper_13.5.2 debian-archive-keyring_2021.1.1 debianutils_5.5-1 dh-autoreconf_20 dh-strip-nondeterminism_1.12.0-2 diffutils_1:3.7-5 dpkg_1.20.9 dpkg-dev_1.20.9 dwz_0.14-1 e2fsprogs_1.46.4-1 fakeroot_1.26-1 file_1:5.39-3 findutils_4.8.0-1 g++_4:11.2.0-2 g++-11_11.2.0-10 gcc_4:11.2.0-2 gcc-10-base_10.3.0-11 gcc-11_11.2.0-10 gcc-11-base_11.2.0-10 gcc-9-base_9.4.0-3 gettext_0.21-4 gettext-base_0.21-4 gpgv_2.2.27-2 grep_3.7-1 groff-base_1.22.4-7 gzip_1.10-4 hostname_3.23 init-system-helpers_1.60 intltool-debian_0.35.0+20060710.5 lib32gcc-s1_11.2.0-10 lib32stdc++6_11.2.0-10 libacl1_2.3.1-1 libapt-pkg6.0_2.3.11 libarchive-zip-perl_1.68-1 libasan5_9.4.0-3 libasan6_11.2.0-10 libatomic1_11.2.0-10 libattr1_1:2.5.1-1 libaudit-common_1:3.0.6-1 libaudit1_1:3.0.6-1 libbinutils_2.37-7 libblkid1_2.37.2-4 libbsd-dev_0.11.3-1 libbsd0_0.11.3-1 libbz2-1.0_1.0.8-4 libc-bin_2.32-4 libc-dev-bin_2.32-4 libc6_2.32-4 libc6-dev_2.32-4 libc6-i386_2.32-4 libcap-ng0_0.7.9-2.2+b1 libcap2_1:2.44-1 libcc1-0_11.2.0-10 libclang-common-12-dev_1:12.0.1-15 libclang-cpp12_1:12.0.1-15 libclang1-12_1:12.0.1-15 libcom-err2_1.46.4-1 libcrypt-dev_1:4.4.25-2 libcrypt1_1:4.4.25-2 libctf-nobfd0_2.37-7 libctf0_2.37-7 libdb5.3_5.3.28+dfsg1-0.8 libdebconfclient0_0.260 libdebhelper-perl_13.5.2 libdpkg-perl_1.20.9 libedit-dev_3.1-20210910-1 libedit2_3.1-20210910-1 libelf1_0.185-2 libexpat1_2.4.1-3 libext2fs2_1.46.4-1 libfakeroot_1.26-1 libffi-dev_3.4.2-3 libffi8_3.4.2-3 libfile-stripnondeterminism-perl_1.12.0-2 libgc1_1:8.0.4-3 libgcc-11-dev_11.2.0-10 libgcc-9-dev_9.4.0-3 libgcc-s1_11.2.0-10 libgcrypt20_1.9.4-3+b1 libgdbm-compat-dev_1.22-1 libgdbm-compat4_1.22-1 libgdbm-dev_1.22-1 libgdbm6_1.22-1 libgmp-dev_2:6.2.1+dfsg-2 libgmp10_2:6.2.1+dfsg-2 libgmpxx4ldbl_2:6.2.1+dfsg-2 libgnutls30_3.7.2-2 libgomp1_11.2.0-10 libgpg-error0_1.42-3 libgssapi-krb5-2_1.18.3-7 libhogweed6_3.7.3-1 libicu67_67.1-7 libidn2-0_2.3.2-2 libisl23_0.24-2 libitm1_11.2.0-10 libk5crypto3_1.18.3-7 libkeyutils1_1.6.1-2 libkrb5-3_1.18.3-7 libkrb5support0_1.18.3-7 libllvm12_1:12.0.1-15 liblsan0_11.2.0-10 liblz4-1_1.9.3-2 liblzma5_5.2.5-2 libmagic-mgc_1:5.39-3 libmagic1_1:5.39-3 libmd-dev_1.0.4-1 libmd0_1.0.4-1 libmount1_2.37.2-4 libmpc3_1.2.1-1 libmpdec3_2.5.1-2 libmpfr6_4.1.0-3 libncurses-dev_6.2+20210905-1 libncurses6_6.2+20210905-1 libncursesw6_6.2+20210905-1 libnettle8_3.7.3-1 libnsl-dev_1.3.0-2 libnsl2_1.3.0-2 libobjc-11-dev_11.2.0-10 libobjc-9-dev_9.4.0-3 libobjc4_11.2.0-10 libomp-12-dev_1:12.0.1-15 libomp5-12_1:12.0.1-15 libp11-kit0_0.24.0-5 libpam-modules_1.4.0-10 libpam-modules-bin_1.4.0-10 libpam-runtime_1.4.0-10 libpam0g_1.4.0-10 libpcre2-8-0_10.36-2 libpcre3_2:8.39-13 libperl5.32_5.32.1-6 libpipeline1_1.5.3-1 libprocps8_2:3.3.17-5 libpython3-stdlib_3.9.2-3 libpython3.9-minimal_3.9.7-4 libpython3.9-stdlib_3.9.7-4 libquadmath0_11.2.0-10 libreadline8_8.1-2 libseccomp2_2.5.2-2 libselinux1_3.1-3 libsemanage-common_3.1-1 libsemanage1_3.1-1+b2 libsepol1_3.1-1 libsigsegv2_2.13-1 libsmartcols1_2.37.2-4 libsqlite3-0_3.36.0-2 libss2_1.46.4-1 libssl-dev_1.1.1l-1 libssl1.1_1.1.1l-1 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 libsub-override-perl_0.09-2 libsystemd0_249.5-1 libtasn1-6_4.17.0-2 libtinfo6_6.2+20210905-1 libtirpc-common_1.3.2-2 libtirpc-dev_1.3.2-2 libtirpc3_1.3.2-2 libtool_2.4.6-15 libtsan0_11.2.0-10 libubsan1_11.2.0-10 libuchardet0_0.0.7-1 libudev1_249.5-1 libunistring2_0.9.10-6 libunwind-12_1:12.0.1-15 libuuid1_2.37.2-4 libxml2_2.9.12+dfsg-5 libxxhash0_0.8.0-2 libyaml-0-2_0.2.2-1 libyaml-dev_0.2.2-1 libz3-4_4.8.12-1+b1 libzstd1_1.4.8+dfsg-3 linux-libc-dev_5.14.12-1 llvm-12-linker-tools_1:12.0.1-15 login_1:4.8.1-1 logsave_1.46.4-1 lsb-base_11.1.0 m4_1.4.18-5 make_4.3-4.1 man-db_2.9.4-2 mawk_1.3.4.20200120-2 media-types_4.0.0 mount_2.37.2-4 ncurses-base_6.2+20210905-1 ncurses-bin_6.2+20210905-1 netbase_6.3 openssl_1.1.1l-1 passwd_1:4.8.1-1 patch_2.7.6-7 perl_5.32.1-6 perl-base_5.32.1-6 perl-modules-5.32_5.32.1-6 po-debconf_1.0.21+nmu1 procps_2:3.3.17-5 python3_3.9.2-3 python3-minimal_3.9.2-3 python3.9_3.9.7-4 python3.9-minimal_3.9.7-4 qt5-qmake_5.15.2+dfsg-12 qt5-qmake-bin_5.15.2+dfsg-12 qtchooser_66-2 readline-common_8.1-2 rpcsvc-proto_1.4.2-4 rubygems-integration_1.18 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.8-1 sensible-utils_0.0.17 systemtap-sdt-dev_4.5-2 sysvinit-utils_3.00-1 tar_1.34+dfsg-1 tzdata_2021e-1 util-linux_2.37.2-4 xz-utils_5.2.5-2 zlib1g_1:1.2.11.dfsg-2 zlib1g-dev_1:1.2.11.dfsg-2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: ruby2.7
Binary: ruby2.7, libruby2.7, ruby2.7-dev, ruby2.7-doc
Architecture: any all
Version: 2.7.4-1
Maintainer: Debian Ruby Team <pkg-ruby-extras-maintainers@lists.alioth.debian.org>
Uploaders: Antonio Terceiro <terceiro@debian.org>, Lucas Kanashiro <kanashiro@debian.org>, Utkarsh Gupta <utkarsh@debian.org>
Homepage: https://www.ruby-lang.org/
Standards-Version: 4.5.1
Vcs-Browser: https://salsa.debian.org/ruby-team/ruby
Vcs-Git: https://salsa.debian.org/ruby-team/ruby.git
Testsuite: autopkgtest
Build-Depends: bison, coreutils (>= 7.5), debhelper-compat (= 13), file, libffi-dev, libgdbm-compat-dev, libgdbm-dev, libgmp-dev, libncurses-dev, libedit-dev, libssl-dev, libyaml-dev, netbase <!nocheck>, openssl <!nocheck>, procps <!nocheck>, ruby:native <cross>, rubygems-integration (>= 1.6) <!nocheck>, systemtap-sdt-dev [linux-any], tzdata, zlib1g-dev
Package-List:
 libruby2.7 deb libs optional arch=any
 ruby2.7 deb ruby optional arch=any
 ruby2.7-dev deb ruby optional arch=any
 ruby2.7-doc deb doc optional arch=all
Checksums-Sha1:
 c3af416830ab3a87ca8b3fdc2b8fc99522baee39 10810480 ruby2.7_2.7.4.orig.tar.xz
 b2faab7f1ab72aafcc3e6699ffa4e8937fdb98eb 112716 ruby2.7_2.7.4-1.debian.tar.xz
Checksums-Sha256:
 a42c6089f82d9ab8dad2e72ba5b318f4177ff7bb17a584ae3834521e4f43c9b5 10810480 ruby2.7_2.7.4.orig.tar.xz
 4c1b9c7dc0463d1d50eaf6a83cd6abce57fe01d591a4561a75611e274f178b93 112716 ruby2.7_2.7.4-1.debian.tar.xz
Files:
 a66187d2e06edf92b45b03a840ba6570 10810480 ruby2.7_2.7.4.orig.tar.xz
 3a184df93a6f8cc1bb19d5f7c9c288bb 112716 ruby2.7_2.7.4-1.debian.tar.xz

-----BEGIN PGP SIGNATURE-----

iQJHBAEBCAAxFiEEbJ0QSEqa5Mw4X3xxgj6WdgbDS5YFAmDnWHQTHHV0a2Fyc2hA
ZGViaWFuLm9yZwAKCRCCPpZ2BsNLlnhhD/41dIZ+E9AOoFqwAq4ZCyizitti1Teh
ridI74iEkCO4OZTz1KaOcC2Y0S3POiw/Byq5bnUlSsyT0gDDXYeVwxPNereQqkaB
/wm2gw1S4mYnYaXFDEgMrrMAh+3oLaahx5tZfHNEzYpF0ftfKutuGX+Jze7cYSeS
FGq3plKFVFzJ8KUXSq1Imd1Sb+6r1zY9IuLHJlnbxAU7fgfg0qb1UQY8Usjred0m
rfYLKYgIaztCc3d4Wgg3B/z8m5a8AKWQns/u+wxG6dtyIzxFPTo9Zr/1lAU3OQWF
64KSksk3YPK28jrESmNweBj6L4ciXNlGjRkIz0hOSs8f5fuzFhgL6uKyXJNN1t0m
A049uMSBkTtpw2nly96nzmTlj6PJ7ZGgUIkxJgXjWU+KV4Qqt4i4DdRyhp8VQ6xu
evPvpMIOaAZoDbJ9d0dJXaVDg3CoB9AuBt4sps8OkRi3JmER7ffpYHNj1r1+S3yY
al5C4mPMN0a8NjZUsGMB0np/3FvnoLE5icbi9rDQ9wU0fX9+TMjOa591f3pFzfBo
GR4sNDthhLLQPmANVkTZd9oq1HRh3zX6ndqAe6Z2TdrDpvsIufcVN5uzOFkvIFBZ
wkuVzcVzp2RZuPHfztDrDs1HcxJdYOH//kObL7WRcd5o1r6lfTerWjnR577GOo+P
RafDan2fcCXKVQ==
=xUZW
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/tmp/dpkg-verify-sig.X_m_v48p/trustedkeys.kbx': General error
gpgv: Signature made Thu Jul  8 19:56:36 2021 UTC
gpgv:                using RSA key 6C9D10484A9AE4CC385F7C71823E967606C34B96
gpgv:                issuer "utkarsh@debian.org"
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./ruby2.7_2.7.4-1.dsc
dpkg-source: info: extracting ruby2.7 in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking ruby2.7_2.7.4.orig.tar.xz
dpkg-source: info: unpacking ruby2.7_2.7.4-1.debian.tar.xz
dpkg-source: info: using patch list from debian/patches/series
dpkg-source: info: applying 0001-rdoc-build-reproducible-documentation.patch
dpkg-source: info: applying 0002-lib-mkmf.rb-sort-list-of-object-files-in-generated-M.patch
dpkg-source: info: applying 0003-Mark-Gemspec-reproducible-change-fixing-784225-too.patch
dpkg-source: info: applying 0004-Disable-tests-failing-on-Ubuntu-builders.patch
dpkg-source: info: applying 0005-Make-gemspecs-reproducible.patch
dpkg-source: info: applying 0006-Fix-FTBS-on-hurd.patch
dpkg-source: info: applying 0007-Port-to-kfreebsd-amd64.patch
dpkg-source: info: applying 0009-Fix-FTBFS-on-x32-misdetected-as-i386-or-amd64.patch
dpkg-source: info: applying 0011-Dont-use-relative-path.patch
dpkg-source: info: applying 0012-Fix-getcwd-ENOENT.patch
dpkg-source: info: applying 0011-Revert-Make-host_-values-consistent-with-target_.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-b7725fc0-d58a-4490-b83b-7e3dfecc3421
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package ruby2.7
dpkg-buildpackage: info: source version 2.7.4-1
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Utkarsh Gupta <utkarsh@debian.org>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 debian/rules clean
dh clean
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
/usr/bin/make clean || true
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: *** No rule to make target 'clean'.  Stop.
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
/usr/bin/make distclean-ext || true
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: *** No rule to make target 'distclean-ext'.  Stop.
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
rm -f tool/config.guess tool/config.sub
rm -f test/excludes/amd64
rm -f -r .ext
rm -f -r doc/capi
rm -f .installed.list GNUmakefile Makefile builtin_binary.inc \
	config.status enc.mk uncommon.mk verconf.h
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
	rm -f debian/debhelper-build-stamp
	rm -rf debian/.debhelper/
	rm -f -- debian/ruby2.7.substvars debian/libruby2.7.substvars debian/ruby2.7-dev.substvars debian/ruby2.7-doc.substvars debian/files
	rm -fr -- debian/ruby2.7/ debian/tmp/ debian/libruby2.7/ debian/ruby2.7-dev/ debian/ruby2.7-doc/
	find .  \( \( \
		\( -path .\*/.git -o -path .\*/.svn -o -path .\*/.bzr -o -path .\*/.hg -o -path .\*/CVS -o -path .\*/.pc -o -path .\*/_darcs \) -prune -o -type f -a \
	        \( -name '#*#' -o -name '.*~' -o -name '*~' -o -name DEADJOE \
		 -o -name '*.orig' -o -name '*.rej' -o -name '*.bak' \
		 -o -name '.*.orig' -o -name .*.rej -o -name '.SUMS' \
		 -o -name TAGS -o \( -path '*/.deps/*' -a -name '*.P' \) \
		\) -exec rm -f {} + \) -o \
		\( -type d -a -name autom4te.cache -prune -exec rm -rf {} + \) \)
 debian/rules binary
dh binary
   dh_update_autotools_config
   dh_autoreconf
	find ! -ipath "./debian/*" -a ! \( -path '*/.git/*' -o -path '*/.hg/*' -o -path '*/.bzr/*' -o -path '*/.svn/*' -o -path '*/CVS/*' \) -a  -type f -exec md5sum {} + -o -type l -printf "symlink  %p
" > debian/autoreconf.before
	grep -q ^XDT_ configure.ac
	autoreconf -f -i
configure.ac:4049: warning: AC_C_BIGENDIAN should be used with AC_CONFIG_HEADERS
	find ! -ipath "./debian/*" -a ! \( -path '*/.git/*' -o -path '*/.hg/*' -o -path '*/.bzr/*' -o -path '*/.svn/*' -o -path '*/CVS/*' \) -a  -type f -exec md5sum {} + -o -type l -printf "symlink  %p
" > debian/autoreconf.after
   debian/rules override_dh_auto_configure
make[1]: Entering directory '/<<PKGBUILDDIR>>'
cp /usr/share/misc/config.guess tool
cp /usr/share/misc/config.sub tool
./configure --prefix=/usr --enable-multiarch --target=x86_64-linux-gnu --program-suffix=2.7 --with-soname=ruby-2.7 --enable-shared --disable-rpath --with-sitedir='/usr/local/lib/site_ruby' --with-sitearchdir="/usr/local/lib/x86_64-linux-gnu/site_ruby" --runstatedir=/var/run --localstatedir=/var --sysconfdir=/etc AS=x86_64-linux-gnu-as CC=x86_64-linux-gnu-gcc CXX=x86_64-linux-gnu-g++ LD=x86_64-linux-gnu-ld --enable-ipv6 --with-dbm-type=gdbm_compat --with-compress-debug-sections=no CFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" CPPFLAGS="-Wdate-time -D_FORTIFY_SOURCE=2" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" DFLAGS="-frelease" FCFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" FFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" GCJFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" LDFLAGS="-Wl,-z,relro -Wl,-z,now" OBJCFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" OBJCXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" 
checking for ruby... false
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu
checking target system type... x86_64-pc-linux-gnu
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether x86_64-linux-gnu-gcc accepts -g... yes
checking for x86_64-linux-gnu-gcc option to enable C11 features... none needed
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for wchar.h... yes
checking for minix/config.h... no
checking for vfork.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking whether _XOPEN_SOURCE should be defined... no
checking how to run the C preprocessor... x86_64-linux-gnu-gcc -E
checking whether the compiler supports GNU C++... yes
checking whether x86_64-linux-gnu-g++ accepts -g... yes
checking for x86_64-linux-gnu-g++ option to enable C++11 features... none needed
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking whether x86_64-linux-gnu-gcc needs -traditional... no
checking for ld... x86_64-linux-gnu-ld
checking whether the linker is GNU ld... yes
checking whether x86_64-linux-gnu-gcc -E accepts -o... yes
checking for x86_64-linux-gnu-gcc... /usr/bin/x86_64-linux-gnu-gcc
checking for ranlib... ranlib
checking for ar... ar
checking for ar flags... rcD
checking for as... x86_64-linux-gnu-as
checking for objdump... objdump
checking for objcopy... objcopy
checking for nm... nm
checking whether ln -s works... yes
checking whether make sets $(MAKE)... yes
checking for a BSD-compatible install... /usr/bin/install -c
checking for a race-free mkdir -p... /bin/mkdir -p
checking for dtrace... dtrace
checking for dot... no
checking for doxygen... no
checking for pkg-config... no
checking for cd using physical directory... cd -P
checking whether CFLAGS is valid... yes
checking whether LDFLAGS is valid... yes
checking whether -Wl,-R. is accepted as LDFLAGS... yes
checking whether -Wl,-rpath,. is accepted as LDFLAGS... yes
checking whether -Wdeprecated-declarations is accepted as CFLAGS... yes
checking whether -Wdivision-by-zero is accepted as CFLAGS... yes
checking whether -Wduplicated-cond is accepted as CFLAGS... no
checking whether -Wimplicit-function-declaration is accepted as CFLAGS... yes
checking whether -Wimplicit-int is accepted as CFLAGS... yes
checking whether -Wmisleading-indentation is accepted as CFLAGS... yes
checking whether -Wpointer-arith is accepted as CFLAGS... yes
checking whether -Wshorten-64-to-32 is accepted as CFLAGS... yes
checking whether -Wwrite-strings is accepted as CFLAGS... yes
checking whether -Wimplicit-fallthrough=0 is accepted as CFLAGS... no
checking whether -Wmissing-noreturn is accepted as CFLAGS... yes
checking whether -Wno-cast-function-type is accepted as CFLAGS... no
checking whether -Wno-constant-logical-operand is accepted as CFLAGS... yes
checking whether -Wno-long-long is accepted as CFLAGS... yes
checking whether -Wno-missing-field-initializers is accepted as CFLAGS... yes
checking whether -Wno-overlength-strings is accepted as CFLAGS... yes
checking whether -Wno-packed-bitfield-compat is accepted as CFLAGS... no
checking whether -Wno-parentheses-equality is accepted as CFLAGS... yes
checking whether -Wno-self-assign is accepted as CFLAGS... yes
checking whether -Wno-tautological-compare is accepted as CFLAGS... yes
checking whether -Wno-unused-parameter is accepted as CFLAGS... yes
checking whether -Wno-unused-value is accepted as CFLAGS... yes
checking whether -Wsuggest-attribute=format is accepted as CFLAGS... no
checking whether -Wsuggest-attribute=noreturn is accepted as CFLAGS... no
checking whether -Wunused-variable is accepted as CFLAGS... yes
checking whether -diag-disable=175,188,1684,2259,2312 is accepted as CFLAGS... no
checking whether -Wextra-tokens is accepted as CFLAGS... yes
checking whether -Wall -Wextra is accepted as CFLAGS... yes
checking whether -Qunused-arguments is accepted as CFLAGS... yes
checking whether -D_FORTIFY_SOURCE=2 is accepted as CFLAGS... yes
checking whether -fstack-protector-strong is accepted as CFLAGS... yes
checking whether -fstack-protector-strong is accepted as LDFLAGS... yes
checking whether -std=gnu99 is accepted as CFLAGS... yes
checking whether -fno-strict-overflow is accepted as CFLAGS... yes
checking whether -ggdb3 is accepted as CFLAGS... yes
checking whether -fvisibility=hidden is accepted as CFLAGS... yes
checking whether -fno-fast-math is accepted as CFLAGS... yes
checking whether -fexcess-precision=standard is accepted as CFLAGS... no
checking whether -fp-model precise is accepted as CFLAGS... no
checking whether compiler has statement and declarations in expressions... yes
checking for crypt in -lcrypt... yes
checking for dlopen in -ldl... yes
checking for shl_load in -ldld... no
checking for shutdown in -lsocket... no
checking for dirent.h that defines DIR... yes
checking for library containing opendir... none required
checking for _Bool... yes
checking for stdbool.h that conforms to C99... yes
checking for sys/wait.h that is POSIX.1 compatible... yes
checking for a.out.h... yes
checking for atomic.h... no
checking for copyfile.h... no
checking for direct.h... no
checking for grp.h... yes
checking for fcntl.h... yes
checking for float.h... yes
checking for ieeefp.h... no
checking for intrinsics.h... no
checking for langinfo.h... yes
checking for limits.h... yes
checking for locale.h... yes
checking for malloc.h... yes
checking for malloc/malloc.h... no
checking for malloc_np.h... no
checking for net/socket.h... no
checking for process.h... no
checking for pwd.h... yes
checking for sanitizer/asan_interface.h... yes
checking for sanitizer/msan_interface.h... yes
checking for setjmpex.h... no
checking for stdalign.h... yes
checking for sys/attr.h... no
checking for sys/eventfd.h... yes
checking for sys/fcntl.h... yes
checking for sys/file.h... yes
checking for sys/id.h... no
checking for sys/ioctl.h... yes
checking for sys/mkdev.h... no
checking for sys/param.h... yes
checking for sys/prctl.h... yes
checking for sys/resource.h... yes
checking for sys/select.h... yes
checking for sys/sendfile.h... yes
checking for sys/socket.h... yes
checking for sys/syscall.h... yes
checking for sys/sysmacros.h... yes
checking for sys/time.h... yes
checking for sys/times.h... yes
checking for sys/uio.h... yes
checking for sys/utime.h... no
checking for syscall.h... yes
checking for time.h... yes
checking for ucontext.h... yes
checking for utime.h... yes
checking for gmp.h... yes
checking for library containing __gmpz_init... -lgmp
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking whether byte ordering is bigendian... no
checking for an ANSI C-conforming const... yes
checking whether char is unsigned... no
checking for inline... inline
checking for working volatile... yes
checking for typeof syntax and keyword spelling... typeof
checking for C/C++ restrict keyword... __restrict__
checking for long long... yes
checking for off_t... yes
checking char bit... 8
checking size of int... 4
checking size of short... 2
checking size of long... 8
checking size of long long... 8
checking size of __int64... 0
checking size of __int128... 16
checking size of off_t... 8
checking size of void*... 8
checking size of float... 4
checking size of double... 8
checking size of time_t... 8
checking size of clock_t... 8
checking packed struct attribute... x __attribute__((packed))
checking whether -Wno-address-of-packed-member is accepted as CFLAGS... yes
checking for printf prefix for long long... ll
checking for pid_t... yes
checking for convertible type of pid_t... INT
checking for uid_t... yes
checking for convertible type of uid_t... UINT
checking for gid_t... yes
checking for convertible type of gid_t... UINT
checking for time_t... yes
checking for convertible type of time_t... LONG
checking for dev_t... yes
checking for convertible type of dev_t... ULONG
checking for mode_t... yes
checking for convertible type of mode_t... UINT
checking for rlim_t... yes
checking for convertible type of rlim_t... ULONG
checking for off_t... (cached) yes
checking for convertible type of off_t... LONG
checking for clockid_t... yes
checking for convertible type of clockid_t... INT
checking for prototypes... yes
checking token paste string... ansi
checking stringization... #expr
checking string literal concatenation... yes
checking for variable length prototypes and stdarg.h... yes
checking for variable length macro... yes
checking for alignas() syntax... __attribute__((__aligned__(x)))
checking for alignof() syntax... alignof
checking for CONSTFUNC function attribute... __attribute__ ((__const__)) x
checking for PUREFUNC function attribute... __attribute__ ((__pure__)) x
checking for NORETURN function attribute... __attribute__ ((__noreturn__)) x
checking for DEPRECATED function attribute... __attribute__ ((__deprecated__)) x
checking for DEPRECATED_BY function attribute... __attribute__ ((__deprecated__("by "#n))) x
checking for DEPRECATED_TYPE type attribute... x __attribute__ ((__deprecated__ mesg))
checking for NOINLINE function attribute... __attribute__ ((__noinline__)) x
checking for ALWAYS_INLINE function attribute... __attribute__ ((__always_inline__)) x
checking for NO_SANITIZE function attribute... __attribute__ ((__no_sanitize__(san))) x
checking for NO_SANITIZE_ADDRESS function attribute... __attribute__ ((__no_sanitize_address__)) x
checking for NO_ADDRESS_SAFETY_ANALYSIS function attribute... __attribute__ ((__no_address_safety_analysis__)) x
checking for WARN_UNUSED_RESULT function attribute... __attribute__ ((__warn_unused_result__)) x
checking for MAYBE_UNUSED function attribute... __attribute__ ((__unused__)) x
checking for ERRORFUNC function attribute... x
checking for WARNINGFUNC function attribute... x
checking for WEAK function attribute... __attribute__ ((__weak__)) x
checking for __attribute__((__depreacted__(msg))) in C++... yes
checking for FUNC_STDCALL function attribute... x
checking for FUNC_CDECL function attribute... __attribute__ ((__cdecl__)) x
checking for FUNC_FASTCALL function attribute... x
checking for FUNC_UNOPTIMIZED function attribute... x
checking for FUNC_MINIMIZED function attribute... x
checking for function alias... alias
checking for __atomic builtins... yes
checking for __sync builtins... yes
checking for __builtin_unreachable... yes
checking for exported function attribute... __attribute__ ((__visibility__("default")))
checking for RUBY_FUNC_NONNULL function attribute... __attribute__ ((__nonnull__(n))) x
checking for function name string predefined identifier... __func__
checking if enum over int is allowed... yes
checking for x86_64-linux-gnu-gcc options needed to detect all undeclared functions... -fno-builtin
checking whether sys_nerr is declared... no
checking whether getenv is declared... yes
checking for size_t... yes
checking size of size_t... 8
checking size of ptrdiff_t... 8
checking for printf prefix for size_t... z
checking for printf prefix for ptrdiff_t... t
checking for struct stat.st_blksize... yes
checking for struct stat.st_blocks... yes
checking for struct stat.st_rdev... yes
checking size of struct stat.st_size... SIZEOF_OFF_T
checking size of struct stat.st_blocks... SIZEOF_OFF_T
checking size of struct stat.st_ino... SIZEOF_LONG
checking for struct stat.st_atim... yes
checking for struct stat.st_atimespec... no
checking for struct stat.st_atimensec... no
checking for struct stat.st_mtim... yes
checking for struct stat.st_mtimespec... no
checking for struct stat.st_mtimensec... no
checking for struct stat.st_ctim... yes
checking for struct stat.st_ctimespec... no
checking for struct stat.st_ctimensec... no
checking for struct stat.st_birthtimespec... no
checking for struct statx.stx_btime... yes
checking for struct timeval... yes
checking size of struct timeval.tv_sec... SIZEOF_TIME_T
checking for struct timespec... yes
checking for struct timezone... yes
checking for fd_mask... yes
checking for int8_t... yes
checking size of int8_t... 1
checking for uint8_t... yes
checking size of uint8_t... 1
checking for int16_t... yes
checking size of int16_t... 2
checking for uint16_t... yes
checking size of uint16_t... 2
checking for int32_t... yes
checking size of int32_t... 4
checking for uint32_t... yes
checking size of uint32_t... 4
checking for int64_t... yes
checking size of int64_t... 8
checking for uint64_t... yes
checking size of uint64_t... 8
checking for int128_t... __int128
checking for uint128_t... unsigned __int128
checking for intptr_t... yes
checking size of intptr_t... 8
checking for uintptr_t... yes
checking size of uintptr_t... 8
checking for printf prefix for intptr_t... NONE
checking for ssize_t... yes
checking size of ssize_t... 8
checking for printf prefix for int64_t... NONE
checking for stack end address... __libc_stack_end
checking for uid_t in sys/types.h... (cached) yes
checking type of array argument to getgroups... gid_t
checking for working alloca.h... yes
checking for alloca... yes
checking for dynamic size alloca... ok
checking for working memcmp... yes
checking for acosh... yes
checking for cbrt... yes
checking for crypt... yes
checking for dup2... yes
checking for erf... yes
checking for explicit_bzero... yes
checking for ffs... yes
checking for flock... yes
checking for hypot... yes
checking for lgamma_r... yes
checking for memmove... yes
checking for nan... yes
checking for nextafter... yes
checking for setproctitle... no
checking for strchr... yes
checking for strerror... yes
checking for strlcat... no
checking for strlcpy... no
checking for strstr... yes
checking for tgamma... yes
checking whether finite is declared... yes
checking whether isinf is declared... yes
checking whether isnan is declared... yes
checking for sys/pstat.h... no
checking for signbit... yes
checking for pid_t... (cached) yes
checking for fork... yes
checking for vfork... yes
checking for working fork... yes
checking for working vfork... (cached) yes
checking for __syscall... no
checking for _longjmp... yes
checking for arc4random_buf... no
checking for atan2l... yes
checking for atan2f... yes
checking for chroot... yes
checking for chsize... no
checking for clock_gettime... yes
checking for copy_file_range... yes
checking for cosh... yes
checking for crypt_r... yes
checking for daemon... (cached) no
checking for dirfd... yes
checking for dl_iterate_phdr... yes
checking for dlopen... yes
checking for dladdr... yes
checking for dup... yes
checking for dup3... yes
checking for eaccess... yes
checking for endgrent... yes
checking for eventfd... yes
checking for explicit_memset... no
checking for fcopyfile... no
checking for fchmod... yes
checking for fchown... yes
checking for fcntl... yes
checking for fdatasync... yes
checking for fdopendir... yes
checking for fgetattrlist... no
checking for fmod... yes
checking for fstatat... yes
checking for fsync... yes
checking for ftruncate... yes
checking for ftruncate64... yes
checking for getattrlist... no
checking for getcwd... yes
checking for getgidx... no
checking for getgrnam... yes
checking for getgrnam_r... yes
checking for getgroups... yes
checking for getlogin... yes
checking for getlogin_r... yes
checking for getpgid... yes
checking for getpgrp... yes
checking for getpriority... yes
checking for getpwnam... yes
checking for getpwnam_r... yes
checking for getpwuid... yes
checking for getpwuid_r... yes
checking for getrandom... yes
checking for getresgid... yes
checking for getresuid... yes
checking for getrlimit... yes
checking for getsid... yes
checking for gettimeofday... yes
checking for getuidx... no
checking for gmtime_r... yes
checking for grantpt... yes
checking for initgroups... yes
checking for ioctl... yes
checking for isfinite... no
checking for issetugid... no
checking for killpg... yes
checking for lchmod... yes
checking for lchown... yes
checking for link... yes
checking for llabs... yes
checking for lockf... yes
checking for log2... yes
checking for lstat... yes
checking for lutimes... yes
checking for malloc_usable_size... yes
checking for malloc_size... no
checking for mblen... yes
checking for memalign... yes
checking for memset_s... no
checking for writev... yes
checking for memrchr... yes
checking for memmem... yes
checking for mkfifo... yes
checking for mknod... yes
checking for mktime... yes
checking for openat... yes
checking for pipe2... yes
checking for poll... yes
checking for posix_fadvise... yes
checking for posix_memalign... yes
checking for ppoll... yes
checking for pread... yes
checking for pwrite... yes
checking for qsort_r... yes
checking for qsort_s... no
checking for readlink... yes
checking for realpath... yes
checking for round... yes
checking for sched_getaffinity... yes
checking for seekdir... yes
checking for select_large_fdset... no
checking for sendfile... yes
checking for setegid... yes
checking for setenv... yes
checking for seteuid... yes
checking for setgid... yes
checking for setgroups... yes
checking for setpgid... yes
checking for setpgrp... yes
checking for setregid... yes
checking for setresgid... yes
checking for setresuid... yes
checking for setreuid... yes
checking for setrgid... no
checking for setrlimit... yes
checking for setruid... no
checking for setsid... yes
checking for setuid... yes
checking for shutdown... yes
checking for sigaction... yes
checking for sigaltstack... yes
checking for sigprocmask... yes
checking for sinh... yes
checking for spawnv... no
checking for symlink... yes
checking for syscall... yes
checking for sysconf... yes
checking for tanh... yes
checking for telldir... yes
checking for timegm... yes
checking for times... yes
checking for truncate... yes
checking for truncate64... yes
checking for unsetenv... yes
checking for utimensat... yes
checking for utimes... yes
checking for wait4... yes
checking for waitpid... yes
checking for statx... yes
checking if getcwd allocates buffer if NULL is given... yes
checking for crypt.h... yes
checking for struct crypt_data.initialized... yes
checking for __builtin_alloca_with_align... yes
checking for __builtin_assume_aligned... yes
checking for __builtin_bswap16... yes
checking for __builtin_bswap32... yes
checking for __builtin_bswap64... yes
checking for __builtin_popcount... yes
checking for __builtin_popcountll... yes
checking for __builtin_clz... yes
checking for __builtin_clzl... yes
checking for __builtin_clzll... yes
checking for __builtin_ctz... yes
checking for __builtin_ctzll... yes
checking for __builtin_add_overflow... yes
checking for __builtin_sub_overflow... yes
checking for __builtin_mul_overflow... yes
checking for __builtin_mul_overflow_p... no
checking for __builtin_constant_p... yes
checking for __builtin_choose_expr... yes
checking for __builtin_choose_expr_constant_p... yes
checking for __builtin_types_compatible_p... yes
checking for __builtin_trap... yes
checking whether qsort_r is GNU version... yes
checking whether qsort_r is BSD version... no
checking whether atan2 handles Inf as C99... yes
checking for clock_getres... yes
checking for timer_create in -lrt... yes
checking for timer_settime in -lrt... yes
checking for unsetenv returns a value... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... yes
checking for struct tm.tm_gmtoff... yes
checking for external int daylight... yes
checking for negative time_t for gmtime(3)... yes
checking for localtime(3) overflow correctly... yes
checking for sig_t... yes
checking whether right shift preserve sign bit... yes
checking whether _SC_CLK_TCK is supported... yes
checking stack growing direction on x86_64... -1
checking native coroutine implementation for x86_64-linux-gnu... amd64
checking for pthread_create in -lthr... no
checking for pthread_create in -lpthread... yes
checking for pthread_np.h... no
checking whether pthread_t is scalar type... yes
checking for sched_yield... yes
checking for pthread_attr_setinheritsched... yes
checking for pthread_attr_get_np... no
checking for pthread_attr_getstack... yes
checking for pthread_attr_getguardsize... yes
checking for pthread_get_stackaddr_np... no
checking for pthread_get_stacksize_np... no
checking for thr_stksegment... no
checking for pthread_stackseg_np... no
checking for pthread_getthrds_np... no
checking for pthread_condattr_setclock... yes
checking for pthread_sigmask... yes
checking for pthread_setname_np... yes
checking for pthread_set_name_np... no
checking for pthread_getattr_np... yes
checking arguments of pthread_setname_np... (pthread_self(), name)
checking if mcontext_t is a pointer... no
checking for getcontext... yes
checking for setcontext... yes
checking if fork works with pthread... yes
checking whether ELF binaries are produced... yes
checking for elf.h... yes
checking for elf_abi.h... no
checking for mach-o/loader.h... no
checking whether OS depend dynamic link works... yes
checking for backtrace... yes
checking for broken backtrace... no
checking for valgrind/memcheck.h... no
checking for strip... strip
checking whether -Wl,--no-undefined is accepted as LDFLAGS... yes
checking whether wrapper for LD_LIBRARY_PATH is needed... no
checking whether dtrace USDT is available... yes
checking whether dtrace needs post processing... yes
checking for __builtin_setjmp... yes with cast ((void **))
checking for _setjmpex as a macro or function... no
checking for _setjmp as a macro or function... yes
checking for sigsetjmp as a macro or function... no
checking for setjmp type... __builtin_setjmp\((void **)\)
checking for prefix of external symbols... NONE
checking for pthread.h... yes
checking if make is GNU make... yes
.ext/include/x86_64-linux-gnu/ruby/config.h updated
configure: ruby library version = 2.7.0
configure: creating ./config.status
config.status: creating GNUmakefile
config.status: creating Makefile
config.status: creating ruby-2.7.pc
---
Configuration summary for ruby version 2.7.4

   * Installation prefix: /usr
   * exec prefix:         ${prefix}
   * arch:                x86_64-linux-gnu
   * site arch:           ${arch}
   * RUBY_BASE_NAME:      ruby
   * enable shared:       yes
   * ruby lib prefix:     ${libdir}/${RUBY_BASE_NAME}
   * site libraries path: ${sitearchlibdir}/${RUBY_BASE_NAME}
   * vendor path:         ${rubylibprefix}/vendor_ruby
   * target OS:           linux-gnu
   * compiler:            x86_64-linux-gnu-gcc
   * with pthread:        yes
   * with coroutine:      amd64
   * enable shared libs:  yes
   * dynamic library ext: so
   * CFLAGS:              ${optflags} ${debugflags} ${warnflags}
   * LDFLAGS:             -L. -Wl,-z,relro -Wl,-z,now \
                          -fstack-protector-strong -rdynamic \
                          -Wl,-export-dynamic
   * DLDFLAGS:            -Wl,-z,relro -Wl,-z,now
   * optflags:            -O3
   * debugflags:          -ggdb3
   * warnflags:           -Wall -Wextra -Wdeprecated-declarations \
                          -Wdivision-by-zero \
                          -Wimplicit-function-declaration -Wimplicit-int \
                          -Wmisleading-indentation -Wpointer-arith \
                          -Wshorten-64-to-32 -Wwrite-strings \
                          -Wmissing-noreturn -Wno-constant-logical-operand \
                          -Wno-long-long -Wno-missing-field-initializers \
                          -Wno-overlength-strings -Wno-parentheses-equality \
                          -Wno-self-assign -Wno-tautological-compare \
                          -Wno-unused-parameter -Wno-unused-value \
                          -Wunused-variable -Wextra-tokens
   * strip command:       strip -S -x
   * install doc:         rdoc
   * JIT support:         yes
   * man page type:       doc

---
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   debian/rules override_dh_auto_build-arch
make[1]: Entering directory '/<<PKGBUILDDIR>>'
dh_auto_build -- main V=1
	install -d /<<PKGBUILDDIR>>/debian/.debhelper/generated/_source/home
	make -j4 main V=1
make[2]: Entering directory '/<<PKGBUILDDIR>>'
	BASERUBY = echo executable host ruby is required.  use --with-baseruby option.; false
	CC = x86_64-linux-gnu-gcc
	LD = x86_64-linux-gnu-ld
	LDSHARED = x86_64-linux-gnu-gcc -shared
	CFLAGS = -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC 
	XCFLAGS = -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0
	CPPFLAGS = -Wdate-time -D_FORTIFY_SOURCE=2   
	DLDFLAGS = -Wl,-z,relro -Wl,-z,now -Wl,-soname,libruby-2.7.so.2.7  -fstack-protector-strong  
	SOLIBS = -lpthread -lrt -lrt -lgmp -ldl -lcrypt -lm 
	LANG = C.UTF-8
	LC_ALL = C.UTF-8
	LC_CTYPE = 
	MFLAGS = -w -j4 --jobserver-auth=4,5
Debian clang version 12.0.1-15
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
x86_64-linux-gnu-gcc  -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o main.o -c ./main.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dmydln.o -c dmydln.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o miniinit.o -c miniinit.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dmyext.o -c dmyext.c
dtrace  -o probes.h.tmp -h -C -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -s probes.d
# 1 "probes.d"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 341 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "probes.d" 2

# 1 "./vm_opts.h" 1
# 3 "probes.d" 2

provider ruby {
# 15 "probes.d"
  probe method__entry(const char *classname, const char *methodname, const char *filename, int lineno);






  probe method__return(const char *classname, const char *methodname, const char *filename, int lineno);







  probe cmethod__entry(const char *classname, const char *methodname, const char *filename, int lineno);






  probe cmethod__return(const char *classname, const char *methodname, const char *filename, int lineno);
# 49 "probes.d"
  probe require__entry(const char *rquiredfile, const char *filename, int lineno);
# 58 "probes.d"
  probe require__return(const char *requiredfile, const char *filename, int lineno);
# 72 "probes.d"
  probe find__require__entry(const char *requiredfile, const char *filename, int lineno);
# 81 "probes.d"
  probe find__require__return(const char *requiredfile, const char *filename, int lineno);







  probe load__entry(const char *loadedfile, const char *filename, int lineno);







  probe load__return(const char *loadedfile, const char *filename, int lineno);
# 108 "probes.d"
  probe raise(const char *classname, const char *filename, int lineno);
# 119 "probes.d"
  probe object__create(const char *classname, const char *filename, int lineno);
# 130 "probes.d"
  probe array__create(long length, const char *filename, int lineno);
# 141 "probes.d"
  probe hash__create(long length, const char *filename, int lineno);
# 152 "probes.d"
  probe string__create(long length, const char *filename, int lineno);
# 163 "probes.d"
  probe symbol__create(const char *str, const char *filename, int lineno);
# 173 "probes.d"
  probe parse__begin(const char *sourcefile, int lineno);
# 183 "probes.d"
  probe parse__end(const char *sourcefile, int lineno);
# 195 "probes.d"
  probe gc__mark__begin();






  probe gc__mark__end();






  probe gc__sweep__begin();






  probe gc__sweep__end();
# 227 "probes.d"
  probe method__cache__clear(const char *class, const char *filename, int lineno);
};

#pragma D attributes Stable/Evolving/Common provider ruby provider
#pragma D attributes Stable/Evolving/Common provider ruby module
#pragma D attributes Stable/Evolving/Common provider ruby function
#pragma D attributes Evolving/Evolving/Common provider ruby name
#pragma D attributes Evolving/Evolving/Common provider ruby args
# 234 "probes.d"

x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o ast.o -c ast.c
# 1 "/tmp/tmpq68znoox.d"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 341 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/tmp/tmpq68znoox.d" 2

x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o bignum.o -c bignum.c
sed -e 's/RUBY_/RUBY_DTRACE_/g' -e 's/PROBES_H_TMP/RUBY_PROBES_H/' -e 's/(char \*/(const char */g' -e 's/, char \*/, const char */g' probes.h.tmp > probes.h
rm -f probes.h.tmp
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o class.o -c class.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o compar.o -c compar.c
ast.c:115:19: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(f, rb_intern("set_encoding"), 2, rb_enc_from_encoding(enc), rb_str_new_cstr("-"));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ast.c:115:19: note: '{' token is here
    rb_funcall(f, rb_intern("set_encoding"), 2, rb_enc_from_encoding(enc), rb_str_new_cstr("-"));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ast.c:115:19: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(f, rb_intern("set_encoding"), 2, rb_enc_from_encoding(enc), rb_str_new_cstr("-"));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ast.c:115:19: note: ')' token is here
    rb_funcall(f, rb_intern("set_encoding"), 2, rb_enc_from_encoding(enc), rb_str_new_cstr("-"));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ast.c:381:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                        ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:381:48: note: '{' token is here
                                        ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:381:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                        ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:381:48: note: ')' token is here
                                        ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:394:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            return rb_ary_new_from_args(2, var_name(node->nd_vid), ID2SYM(rb_intern("NODE_SPECIAL_REQUIRED_KEYWORD")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:394:75: note: '{' token is here
            return rb_ary_new_from_args(2, var_name(node->nd_vid), ID2SYM(rb_intern("NODE_SPECIAL_REQUIRED_KEYWORD")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:394:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            return rb_ary_new_from_args(2, var_name(node->nd_vid), ID2SYM(rb_intern("NODE_SPECIAL_REQUIRED_KEYWORD")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:394:75: note: ')' token is here
            return rb_ary_new_from_args(2, var_name(node->nd_vid), ID2SYM(rb_intern("NODE_SPECIAL_REQUIRED_KEYWORD")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:461:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:461:47: note: '{' token is here
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:461:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:461:47: note: ')' token is here
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:466:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:466:47: note: '{' token is here
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:466:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:466:47: note: ')' token is here
        return rb_ary_new_from_args(1, ID2SYM(rb_intern(name)));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:561:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(2, ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")),
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:561:47: note: '{' token is here
        return rb_ary_new_from_args(2, ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")),
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~class.c
./include/ruby/ruby.h:1832:5::554:13 note: expanded from macro 'RUBY_CONST_ID_CACHE'
: warning:     {                                                   \
    ^
./include/ruby/ruby.h'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);:414:29: note: expanded from macro 'ID2SYM'

            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23:#define ID2SYM(x) RB_ID2SYM(x)
                            ^
 note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'

                      ^
class.c:554:13: #define RB_ID2SYM(x) (rb_id2sym(x))note: '{' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^

                                ^
class.c:554./internal.h:13: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:554:13: :1405:35: note: expanded from macro 'rb_ary_new_from_args'
note: ')' token is here
    ID id = rb_intern(name);
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56:                                          ^~~~~~~~~~~
note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ast.c:561:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_ary_new_from_args(2, ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")),
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:561:47: note: ')' token is here
        return rb_ary_new_from_args(2, ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST")),
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:574:54: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                            ? ID2SYM(rb_intern("NODE_SPECIAL_EXCESSIVE_COMMA"))
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:574:54: note: '{' token is here
                                            ? ID2SYM(rb_intern("NODE_SPECIAL_EXCESSIVE_COMMA"))
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
class.c:667:10: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note                                         ^~~~~~~~~~~
: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:667:10: note: '{' token is here
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5:ast.c:574:54: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
 note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
                                            ? ID2SYM(rb_intern("NODE_SPECIAL_EXCESSIVE_COMMA"))
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class.c:667:10: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:667:10: note: ')' token is here
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
ast.c:574:54: note: ')' token is here
                                            ? ID2SYM(rb_intern("NODE_SPECIAL_EXCESSIVE_COMMA"))
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
class.c:713:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_define_class_id_under(outer, rb_intern(name), super);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~

        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:713:44: note: '{' token is here
    return rb_define_class_id_under(outer, rb_intern(name), super);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:713:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_define_class_id_under(outer, rb_intern(name), super);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:713:44: note: ')' token is here
    return rb_define_class_id_under(outer, rb_intern(name), super);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ast.c:594:71: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                                               ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST"));
                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:594:71: note: '{' token is here
                                                               ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST"));
                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:594:71: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                                               ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST"));class.c:790:10: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:790:10: note: '{' token is here
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24:
 note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note:                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
class.c:790:10: warning        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:790:10: 
note: ')' token is here
    id = rb_intern(name);
         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:594:71: note: ')' token is here
                                                               ID2SYM(rb_intern("NODE_SPECIAL_NO_NAME_REST"));
                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
class.c:812:45: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_define_module_id_under(outer, rb_intern(name));
                                            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:812:45: note: '{' token is here
    return rb_define_module_id_under(outer, rb_intern(name));
                                            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:812:45: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_define_module_id_under(outer, rb_intern(name));
ast.c:603:89: warning                                            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5            VALUE kwrest = node->nd_pkwrestarg == NODE_SPECIAL_NO_REST_KEYWORD ? ID2SYM(rb_intern("NODE_SPECIAL_NO_REST_KEYWORD")) :
                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:812:45./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
: note: ')' token is here
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^    return rb_define_module_id_under(outer, rb_intern(name));

                                            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: ./include/ruby/ruby.hnote: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:603:89: note: '{' token is here
            VALUE kwrest = node->nd_pkwrestarg == NODE_SPECIAL_NO_REST_KEYWORD ? ID2SYM(rb_intern("NODE_SPECIAL_NO_REST_KEYWORD")) :
                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:603:89: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            VALUE kwrest = node->nd_pkwrestarg == NODE_SPECIAL_NO_REST_KEYWORD ? ID2SYM(rb_intern("NODE_SPECIAL_NO_REST_KEYWORD")) :
                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
ast.c:603:89: note: ')' token is here
            VALUE kwrest = node->nd_pkwrestarg == NODE_SPECIAL_NO_REST_KEYWORD ? ID2SYM(rb_intern("NODE_SPECIAL_NO_REST_KEYWORD")) :
                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
class.c:1566:32: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PUBLIC);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1566:32: note: '{' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PUBLIC);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1566:32: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PUBLIC);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1566:32: note: ')' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PUBLIC);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1575:32: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PROTECTED);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1575:32: note: '{' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PROTECTED);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1575:32: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PROTECTED);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1575:32: note: ')' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PROTECTED);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1584:32: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PRIVATE);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1584:32: note: '{' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PRIVATE);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1584:32: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PRIVATE);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1584:32: note: ')' token is here
    rb_add_method_cfunc(klass, rb_intern(name), func, argc, METHOD_VISI_PRIVATE);
                               ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1590:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method(klass, rb_intern(name), VM_METHOD_TYPE_UNDEF, 0, METHOD_VISI_UNDEF);
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1590:26: note: '{' token is here
    rb_add_method(klass, rb_intern(name), VM_METHOD_TYPE_UNDEF, 0, METHOD_VISI_UNDEF);
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1590:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_add_method(klass, rb_intern(name), VM_METHOD_TYPE_UNDEF, 0, METHOD_VISI_UNDEF);
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1590:26: note: ')' token is here
    rb_add_method(klass, rb_intern(name), VM_METHOD_TYPE_UNDEF, 0, METHOD_VISI_UNDEF);
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1815:21: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                    ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1815:21: note: '{' token is here
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                    ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1815:21: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                    ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1815:21: note: ')' token is here
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                    ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1815:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1815:39: note: '{' token is here
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1815:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1815:39: note: ')' token is here
    rb_alias(klass, rb_intern(name1), rb_intern(name2));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
class.c:1828:20: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_attr(klass, rb_intern(name), read, write, FALSE);
                   ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
class.c:1828:20: note: '{' token is here
    rb_attr(klass, rb_intern(name), read, write, FALSE);
                   ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
class.c:1828:20: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_attr(klass, rb_intern(name), read, write, FALSE);
                   ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
class.c:1828:20: note: ')' token is here
    rb_attr(klass, rb_intern(name), read, write, FALSE);
                   ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
bignum.c:6127:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_bin(x, y, rb_intern("remainder"));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
bignum.c:6127:33: note: '{' token is here
        return rb_num_coerce_bin(x, y, rb_intern("remainder"));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
bignum.c:6127:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_bin(x, y, rb_intern("remainder"));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
bignum.c:6127:33: note: ')' token is here
        return rb_num_coerce_bin(x, y, rb_intern("remainder"));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o compile.o -c compile.c
18 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o complex.o -c complex.c
compile.c:5229:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_IF ? "if" : "unless");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5229:2: note: '{' token is here
        DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_IF ? "if" : "unless");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5229:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_IF ? "if" : "unless");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5229:2: note: ')' token is here
        DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_IF ? "if" : "unless");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5235:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5235:6: note: '{' token is here
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5235:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5235:6: note: ')' token is here
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5255:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5255:6: note: '{' token is here
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5255:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5255:6: note: ')' token is here
            ADD_TRACE_BRANCH_COVERAGE(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5297:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5297:5: note: '{' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5297:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5297:5: note: ')' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5319:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5319:2: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5319:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5319:2: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5366:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5366:2: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5366:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5366:2: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5374:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5374:2: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5374:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5374:2: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5404:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5404:5: note: '{' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5404:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5404:5: note: ')' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5417:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5417:2: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5417:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5417:2: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5458:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5458:5: note: '{' token is here
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5458:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5458:5: note: ')' token is here
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5563:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5563:48: note: '{' token is here
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5563:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5563:48: note: ')' token is here
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5567:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_SEND(ret, line, rb_intern("deconstruct"), INT2FIX(0));
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5567:29: note: '{' token is here
        ADD_SEND(ret, line, rb_intern("deconstruct"), INT2FIX(0));
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5567:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_SEND(ret, line, rb_intern("deconstruct"), INT2FIX(0));
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5567:29: note: ')' token is here
        ADD_SEND(ret, line, rb_intern("deconstruct"), INT2FIX(0));
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5737:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct_keys")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5737:48: note: '{' token is here
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct_keys")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5737:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct_keys")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5737:48: note: ')' token is here
        ADD_INSN1(ret, line, putobject, ID2SYM(rb_intern("deconstruct_keys")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:218:62: note: expanded from macro 'ADD_INSN1'
           new_insn_body(iseq, (line), BIN(insn), 1, (VALUE)(op1)))
                                                             ^~~
compile.c:5748:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_SEND(ret, line, rb_intern("deconstruct_keys"), INT2FIX(1));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5748:29: note: '{' token is here
        ADD_SEND(ret, line, rb_intern("deconstruct_keys"), INT2FIX(1));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5748:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_SEND(ret, line, rb_intern("deconstruct_keys"), INT2FIX(1));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5748:29: note: ')' token is here
        ADD_SEND(ret, line, rb_intern("deconstruct_keys"), INT2FIX(1));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5755:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_SEND(ret, line, rb_intern("dup"), INT2FIX(0));
                                ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5755:33: note: '{' token is here
            ADD_SEND(ret, line, rb_intern("dup"), INT2FIX(0));
                                ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5755:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            ADD_SEND(ret, line, rb_intern("dup"), INT2FIX(0));
                                ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5755:33: note: ')' token is here
            ADD_SEND(ret, line, rb_intern("dup"), INT2FIX(0));
                                ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5779:41: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND(ret, line, rb_intern("key?"), INT2FIX(1));
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5779:41: note: '{' token is here
                    ADD_SEND(ret, line, rb_intern("key?"), INT2FIX(1));
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5779:41: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND(ret, line, rb_intern("key?"), INT2FIX(1));
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5779:41: note: ')' token is here
                    ADD_SEND(ret, line, rb_intern("key?"), INT2FIX(1));
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5784:72: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND(match_values, line, node->nd_pkwrestarg ? rb_intern("delete") : idAREF, INT2FIX(1));
                                                                       ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5784:72: note: '{' token is here
                    ADD_SEND(match_values, line, node->nd_pkwrestarg ? rb_intern("delete") : idAREF, INT2FIX(1));
                                                                       ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5784:72: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND(match_values, line, node->nd_pkwrestarg ? rb_intern("delete") : idAREF, INT2FIX(1));
                                                                       ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5784:72: note: ')' token is here
                    ADD_SEND(match_values, line, node->nd_pkwrestarg ? rb_intern("delete") : idAREF, INT2FIX(1));
                                                                       ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:5985:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5985:5: note: '{' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5985:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:5985:5: note: ')' token is here
    DECL_BRANCH_BASE(branches, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "case");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6007:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6007:9: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6007:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6007:9: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6044:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6044:9: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6044:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6044:9: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6051:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6051:9: note: '{' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6051:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6051:9: note: ')' token is here
        ADD_TRACE_BRANCH_COVERAGE(cond_seq, nd_first_lineno(orig_node), nd_first_column(orig_node), nd_last_lineno(orig_node), nd_last_column(orig_node), "else", branches);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6113:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_WHILE ? "while" : "until");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6113:5: note: '{' token is here
    DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_WHILE ? "while" : "until");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6113:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_WHILE ? "while" : "until");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6113:5: note: ')' token is here
    DECL_BRANCH_BASE(branches, lineno, column, last_lineno, last_column, type == NODE_WHILE ? "while" : "until");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6114:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6114:5: note: '{' token is here
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6114:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6114:5: note: ')' token is here
    ADD_TRACE_BRANCH_COVERAGE(
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6225:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_CALL(ret, line, rb_intern("try_convert"), INT2FIX(1));
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:257:30: note: expanded from macro 'ADD_CALL'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(VM_CALL_FCALL), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:6225:25: note: '{' token is here
    ADD_CALL(ret, line, rb_intern("try_convert"), INT2FIX(1));
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:257:30: note: expanded from macro 'ADD_CALL'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(VM_CALL_FCALL), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:6225:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_CALL(ret, line, rb_intern("try_convert"), INT2FIX(1));
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:257:30: note: expanded from macro 'ADD_CALL'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(VM_CALL_FCALL), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:6225:25: note: ')' token is here
    ADD_CALL(ret, line, rb_intern("try_convert"), INT2FIX(1));
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:257:30: note: expanded from macro 'ADD_CALL'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(VM_CALL_FCALL), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
24 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o cont.o -c cont.c
compile.c:6692:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(br, first_lineno, first_column, last_lineno, last_column, "&.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6692:5: note: '{' token is here
    DECL_BRANCH_BASE(br, first_lineno, first_column, last_lineno, last_column, "&.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6692:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    DECL_BRANCH_BASE(br, first_lineno, first_column, last_lineno, last_column, "&.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6692:5: note: ')' token is here
    DECL_BRANCH_BASE(br, first_lineno, first_column, last_lineno, last_column, "&.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:279:33: note: expanded from macro 'DECL_BRANCH_BASE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6696:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(recv, first_lineno, first_column, last_lineno, last_column, "then", br);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6696:5: note: '{' token is here
    ADD_TRACE_BRANCH_COVERAGE(recv, first_lineno, first_column, last_lineno, last_column, "then", br);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6696:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(recv, first_lineno, first_column, last_lineno, last_column, "then", br);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6696:5: note: ')' token is here
    ADD_TRACE_BRANCH_COVERAGE(recv, first_lineno, first_column, last_lineno, last_column, "then", br);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6708:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(ret, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6708:5: note: '{' token is here
    ADD_TRACE_BRANCH_COVERAGE(ret, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6708:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ADD_TRACE_BRANCH_COVERAGE(ret, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:6708:5: note: ')' token is here
    ADD_TRACE_BRANCH_COVERAGE(ret, nd_first_lineno(node), nd_first_column(node), nd_last_lineno(node), nd_last_column(node),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile.c:294:33: note: expanded from macro 'ADD_TRACE_BRANCH_COVERAGE'
          rb_ary_push(branches, ID2SYM(rb_intern(type))); \
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
compile.c:7759:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7759:29: note: '{' token is here
                    ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7759:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7759:29: note: ')' token is here
                    ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7782:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7782:25: note: '{' token is here
                ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7782:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
compile.c:7782:25: note: ')' token is here
                ADD_SEND (args, line, rb_intern("dup"), INT2FIX(0));
                                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
compile.c:245:30: note: expanded from macro 'ADD_SEND'
  ADD_SEND_R((seq), (line), (id), (argc), NULL, (VALUE)INT2FIX(0), NULL)
                             ^~
compile.c:263:65: note: expanded from macro 'ADD_SEND_R'
  ADD_ELEM((seq), (LINK_ELEMENT *) new_insn_send(iseq, (line), (id), (VALUE)(argc), (block), (VALUE)(flag), (keywords)))
                                                                ^~
In file included from cont.c:16:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o debug.o -c debug.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o debug_counter.o -c debug_counter.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dir.o -c dir.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dln_find.o -c dln_find.c
dir.c:2752:13: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    kw[0] = rb_intern("base");
            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
dir.c:2752:13: note: '{' token is here
    kw[0] = rb_intern("base");
            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
dir.c:2752:13: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    kw[0] = rb_intern("base");
            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
dir.c:2752:13: note: ')' token is here
    kw[0] = rb_intern("base");
            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
dir.c:2753:24: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (flags) kw[1] = rb_intern("flags");
                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
dir.c:2753:24: note: '{' token is here
    if (flags) kw[1] = rb_intern("flags");
                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
dir.c:2753:24: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (flags) kw[1] = rb_intern("flags");
                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
dir.c:2753:24: note: ')' token is here
    if (flags) kw[1] = rb_intern("flags");
                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
dir.c:2914:41: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE dir = rb_funcallv_kw(rb_cDir, rb_intern("open"), argc, argv, RB_PASS_CALLED_KEYWORDS);
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
dir.c:2914:41: note: '{' token is here
    VALUE dir = rb_funcallv_kw(rb_cDir, rb_intern("open"), argc, argv, RB_PASS_CALLED_KEYWORDS);
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
dir.c:2914:41: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE dir = rb_funcallv_kw(rb_cDir, rb_intern("open"), argc, argv, RB_PASS_CALLED_KEYWORDS);
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
dir.c:2914:41: note: ')' token is here
    VALUE dir = rb_funcallv_kw(rb_cDir, rb_intern("open"), argc, argv, RB_PASS_CALLED_KEYWORDS);
                                        ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o encoding.o -c encoding.c
encoding.c:795:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        tmp = rb_funcallv(obj, rb_intern("internal_encoding"), 0, 0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:795:25: note: '{' token is here
        tmp = rb_funcallv(obj, rb_intern("internal_encoding"), 0, 0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:795:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        tmp = rb_funcallv(obj, rb_intern("internal_encoding"), 0, 0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:795:25: note: ')' token is here
        tmp = rb_funcallv(obj, rb_intern("internal_encoding"), 0, 0);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:797:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            tmp = rb_funcallv(obj, rb_intern("external_encoding"), 0, 0);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:797:29: note: '{' token is here
            tmp = rb_funcallv(obj, rb_intern("external_encoding"), 0, 0);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:797:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            tmp = rb_funcallv(obj, rb_intern("external_encoding"), 0, 0);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
encoding.c:797:29: note: ')' token is here
            tmp = rb_funcallv(obj, rb_intern("external_encoding"), 0, 0);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
6 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enum.o -c enum.c
4 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enumerator.o -c enumerator.c
enumerator.c:3616:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_funcall(q, rb_intern("floor"), 0);
                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
enumerator.c:3616:30: note: '{' token is here
        return rb_funcall(q, rb_intern("floor"), 0);
                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
enumerator.c:3616:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_funcall(q, rb_intern("floor"), 0);
                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
enumerator.c:3616:30: note: ')' token is here
        return rb_funcall(q, rb_intern("floor"), 0);
                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
enum.c:3104:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: '{' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: ')' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: '{' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: ')' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: '{' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: enumerator.c:3984:21: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:    ID id_private = rb_intern("private");
                    ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:71: note: expanded from macro 'rb_id2sym'
23: note: expanded from macro 'rb_intern'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:
                      ^
enumerator.c:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
3984:21: note: '{' token is here
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26:     ID id_private = rb_intern("private");note: ')' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:
                    ^~~~~~~~~~~~~~~~~~~~
1847:56: note: ./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h: note: expanded from macro 'ID2SYM'
:#define ID2SYM(x) RB_ID2SYM(x)1832
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
:    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: 5expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
: note: expanded from macro 'RUBY_CONST_ID_CACHE'
enum.c:3104:26:    {                                                   \
    ^
 warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
enumerator.c:3984#define ID2SYM(x) RB_ID2SYM(x)
:21: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]                            ^
./include/ruby/ruby.h:409
:33: note:     ID id_private = rb_intern("private");
                    ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.hexpanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22::1847:24: note: expanded from macro 'rb_intern'
 note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                          ^~
./symbol.h:18:38: note: ./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119
enumerator.c:3984:21::53:  note: ')' token is here
note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })    ID id_private = rb_intern("private");
                    ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56
                                                    ^
enum.c:3104:26: note: : note: expanded from macro 'rb_intern'
'{' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:
5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38:                                                        ^note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119
:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: ')' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: '{' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3104:26: note: ')' token is here
    VALUE alone = ID2SYM(rb_intern("_alone"));
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: '{' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: ')' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: '{' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: ')' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: '{' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: ')' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: '{' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: ')' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: '{' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3105:30: note: ')' token is here
    VALUE separator = ID2SYM(rb_intern("_separator"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
enum.c:3157:42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    enumerable = rb_ivar_get(enumerator, rb_intern("chunk_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3157:42: note: '{' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("chunk_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3157:42: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    enumerable = rb_ivar_get(enumerator, rb_intern("chunk_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3157:42: note: ')' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("chunk_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3158:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->categorize = rb_ivar_get(enumerator, rb_intern("chunk_categorize"));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3158:48: note: '{' token is here
    memo->categorize = rb_ivar_get(enumerator, rb_intern("chunk_categorize"));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3158:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->categorize = rb_ivar_get(enumerator, rb_intern("chunk_categorize"));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3158:48: note: ')' token is here
    memo->categorize = rb_ivar_get(enumerator, rb_intern("chunk_categorize"));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3268:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("chunk_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3268:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("chunk_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3268:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("chunk_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3268:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("chunk_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3269:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("chunk_categorize"), rb_block_proc());
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3269:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("chunk_categorize"), rb_block_proc());
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3269:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("chunk_categorize"), rb_block_proc());
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3269:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("chunk_categorize"), rb_block_proc());
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3316:42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    enumerable = rb_ivar_get(enumerator, rb_intern("slicebefore_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3316:42: note: '{' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("slicebefore_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3316:42: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    enumerable = rb_ivar_get(enumerator, rb_intern("slicebefore_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3316:42: note: ')' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("slicebefore_enumerable"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3317:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->sep_pred = rb_attr_get(enumerator, rb_intern("slicebefore_sep_pred"));
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3317:46: note: '{' token is here
    memo->sep_pred = rb_attr_get(enumerator, rb_intern("slicebefore_sep_pred"));
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3317:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->sep_pred = rb_attr_get(enumerator, rb_intern("slicebefore_sep_pred"));
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3317:46: note: ')' token is here
    memo->sep_pred = rb_attr_get(enumerator, rb_intern("slicebefore_sep_pred"));
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3318:69: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->sep_pat = NIL_P(memo->sep_pred) ? rb_ivar_get(enumerator, rb_intern("slicebefore_sep_pat")) : Qnil;
                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3318:69: note: '{' token is here
    memo->sep_pat = NIL_P(memo->sep_pred) ? rb_ivar_get(enumerator, rb_intern("slicebefore_sep_pat")) : Qnil;
                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3318:69: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->sep_pat = NIL_P(memo->sep_pred) ? rb_ivar_get(enumerator, rb_intern("slicebefore_sep_pat")) : Qnil;
                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3318:69: note: ')' token is here
    memo->sep_pat = NIL_P(memo->sep_pred) ? rb_ivar_get(enumerator, rb_intern("slicebefore_sep_pat")) : Qnil;
                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3482:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pred"), rb_block_proc());
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3482:33: note: '{' token is here
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pred"), rb_block_proc());
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3482:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pred"), rb_block_proc());
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3482:33: note: ')' token is here
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pred"), rb_block_proc());
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3488:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pat"), sep_pat);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3488:33: note: '{' token is here
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pat"), sep_pat);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3488:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pat"), sep_pat);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3488:33: note: ')' token is here
        rb_ivar_set(enumerator, rb_intern("slicebefore_sep_pat"), sep_pat);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3490:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicebefore_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3490:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("slicebefore_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3490:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicebefore_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3490:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("slicebefore_enumerable"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enumerator.c:4034:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
enum.c                      ^
./include/ruby/ruby.h:414:29:3546:42: note: expanded from macro 'ID2SYM'
: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]#define ID2SYM(x) RB_ID2SYM(x)
                            ^

    enumerable = rb_ivar_get(enumerator, rb_intern("sliceafter_enum"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23./include/ruby/ruby.h: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3546:42:: note: '{' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("sliceafter_enum"));
409                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847::33: note: expanded from macro 'RB_ID2SYM'
24: note: #define RB_ID2SYM(x) (rb_id2sym(x))expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5
                                ^
: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
enum.c:3546:        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4034:4842: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
: note: '{' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("sliceafter_enum"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: ./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3546:42:        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h: note: ')' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("sliceafter_enum"));1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56:
    ^
 note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'

                                                       ^
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
enum.c:3547:41: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->pat = rb_ivar_get(enumerator, rb_intern("sliceafter_pat"));
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^

                      ^
enum.c:3547:41: note: '{' token is here./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'

    memo->pat = rb_ivar_get(enumerator, rb_intern("sliceafter_pat"));
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.cenumerator.c:4034:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
:3547:41: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~

    memo->pat = rb_ivar_get(enumerator, rb_intern("sliceafter_pat"));
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: ./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'./include/ruby/ruby.h
    }
    ^
enum.c:3547:41: note: ')' token is here
    memo->pat = rb_ivar_get(enumerator, rb_intern("sliceafter_pat"));
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
enum.c:3548:    }
    ^
42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
./include/ruby/ruby.h:414:    memo->pred = rb_attr_get(enumerator, rb_intern("sliceafter_pred"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3548:42: note: '{' token is here
29: note    memo->pred = rb_attr_get(enumerator, rb_intern("sliceafter_pred"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
:     {                                                   \
expanded from macro 'ID2SYM'
    ^
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
enum.c:3548:42:./include/ruby/ruby.h warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->pred = rb_attr_get(enumerator, rb_intern("sliceafter_pred"));
:                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847409:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5:33: note: expanded from macro 'RB_ID2SYM'
: note: expanded from macro 'RUBY_CONST_ID_CACHE'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
    }
    ^
enum.c:3548:42: note: ')' token is here
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
    memo->pred = rb_attr_get(enumerator, rb_intern("sliceafter_pred"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4034:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
enum.c:#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h3611:29: warning: :2686:35: note: expanded from macro 'rb_funcall'
'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("sliceafter_enum"), enumerable);
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3611:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3611:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("sliceafter_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3611:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_enum"), enumerable);
enumerator.c:4035:48:                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                                       ^
./include/ruby/ruby.h:1847:23:enum.c:3612:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("sliceafter_pat"), pat);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23 note: expanded from macro 'rb_intern'
: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3612:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_pat"), pat);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5:                      ^
 note: expanded from macro 'RUBY_CONST_ID_CACHE'./include/ruby/ruby.h
    {                                                   \
    ^
:414:29: enum.c:3612:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("sliceafter_pat"), pat);
note                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847: expanded from macro 'ID2SYM'
:24: note#define ID2SYM(x) RB_ID2SYM(x): expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5
: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3612:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_pat"), pat);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
                            ^
enum.c:3613./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
:29: warning#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("sliceafter_pred"), pred);
./include/ruby/ruby.h:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:2686:35: note: expanded from macro 'rb_funcall'
23: note: expanded from macro 'rb_intern'        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4035
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3613:29:: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:2448: note: '{' token is here
: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
enum.c:3613:29        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
:    rb_ivar_set(enumerator, rb_intern("sliceafter_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
5    }
:    ^
enum.c:3613: note: expanded from macro 'RUBY_CONST_ID_CACHE'
29: note    {                                                   \: ')' token is here
    rb_ivar_set(enumerator, rb_intern("sliceafter_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56
    ^
: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'

                                                       ^
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4035:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))enum.c:3676:42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    enumerable = rb_ivar_get(enumerator, rb_intern("slicewhen_enum"));

                                ^
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'

        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3676:42        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4035: note: '{' token is here
:    enumerable = rb_ivar_get(enumerator, rb_intern("slicewhen_enum"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
48:    {                                                   \
 note: ')' token is here    ^

    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect")));
enum.c:3676:                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
42./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
:         __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \warning
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
: #define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
'}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'

        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
    enumerable = rb_ivar_get(enumerator, rb_intern("slicewhen_enum"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3676:42: note: ')' token is here
    enumerable = rb_ivar_get(enumerator, rb_intern("slicewhen_enum"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847enumerator.c:4036:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
:56: note    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
: ./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4036:48: note: '{' token is here

                                                       ^
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enum.c:3677enumerator.c::4036:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
42: warning    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
: ./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4036:48: note: ')' token is here
    memo->pred = rb_attr_get(enumerator, rb_intern("slicewhen_pred"));
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'

        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
./include/ruby/ruby.h#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
:#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
1847:        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3677:42: note: '{' token is here
    memo->pred = rb_attr_get(enumerator, rb_intern("slicewhen_pred"));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
enumerator.c    {                                                   \:
    ^4037
:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409enum.c::333677:: 42note::  expanded from macro 'RB_ID2SYM'warning
: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'    memo->pred = rb_attr_get(enumerator, rb_intern("slicewhen_pred"));

                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4037:48: note: '{' token is here
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3677:42: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24:     memo->pred = rb_attr_get(enumerator, rb_intern("slicewhen_pred"));note
:                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~expanded from macro 'rb_intern'

./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \5
:                                                       ^ 
note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enum.c:3681:52: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
enumerator.c:4037:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->inverted = RTEST(rb_attr_get(enumerator, rb_intern("slicewhen_inverted")));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^./include/ruby/ruby.h
:1847:24: note: ./include/ruby/ruby.hexpanded from macro 'rb_intern':
481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~./include/ruby/ruby.h
:479:31: ./include/ruby/ruby.hnote:: 1837expanded from macro 'RB_TEST':
5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: #define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)note
:                               ^expanded from macro 'ID2SYM'

enum.c:3681:52: note: '{' token is here
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^    memo->inverted = RTEST(rb_attr_get(enumerator, rb_intern("slicewhen_inverted")));

                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'./include/ruby/ruby.h
:1847:24: note: expanded from macro 'rb_intern'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4037:48:         __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \note
:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')' token is here

./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:1847:./include/ruby/ruby.h56::479 :note31: :expanded from macro 'rb_intern' 
note: expanded from macro 'RB_TEST'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enum.c:3681:52: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    memo->inverted = RTEST(rb_attr_get(enumerator, rb_intern("slicewhen_inverted")));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
enum.c:3681:52: note: ')' token is here
    memo->inverted = RTEST(rb_attr_get(enumerator, rb_intern("slicewhen_inverted")));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
enumerator.c:4038:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4038:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.cenum.c::40383761::4829::  warningwarning: : '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]

    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3761:29: note: '{' token is here
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:414./include/ruby/ruby.h::291847:: 24note::  expanded from macro 'ID2SYM'note
: expanded from macro 'rb_intern'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \:
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~note
: expanded from macro 'RB_ID2SYM'
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
#define RB_ID2SYM(x) (rb_id2sym(x))
    {                                                   \                                ^

    ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4038:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
enum.c:3761:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847#define ID2SYM(x) RB_ID2SYM(x):
24                            ^:
 note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#define RB_ID2SYM(x) (rb_id2sym(x))

                                ^
./include/ruby/ruby.h:1837:5: note./include/ruby/ruby.h: :expanded from macro 'RUBY_CONST_ID_CACHE'2686
:35: note    }: 
expanded from macro 'rb_funcall'    ^

enum.c:3761:29: note: ')' token is here
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enum.c:3762:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3762:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3762:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
enumerator.c:4039:48./include/ruby/ruby.h:: 1847warning:: 24'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]:
 note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5:     rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_find_all")));note
:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~expanded from macro 'RUBY_CONST_ID_CACHE'

    }
    ^
enum.c:3762:29: note: ./include/ruby/ruby.h')' token is here:
1847:23: note: expanded from macro 'rb_intern'
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \:
1847                      ^:
56: note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \                            ^

                                                       ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4039:48: note: '{' token is here
enum.c:3763:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qfalse);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: ./include/ruby/ruby.hexpanded from macro 'rb_intern':
1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3763        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \:
29                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:
 note: '{' token is here
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qfalse);:
29                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~:
 note: expanded from macro 'ID2SYM'
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'#define RB_ID2SYM(x) (rb_id2sym(x))

                                ^
    {                                                   \
    ^./include/ruby/ruby.h
:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enum.c:3763:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qfalse);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
enumerator.c:4039:48./include/ruby/ruby.h:: 1847warning:: 24'}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]:
 note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5:    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_find_all"))); 
note                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~: 
expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3763:29: note: ')' token is here./include/ruby/ruby.h
:1847:24: note: expanded from macro 'rb_intern'
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qfalse);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~./include/ruby/ruby.h
:1847:56: note./include/ruby/ruby.h: :expanded from macro 'rb_intern'1837
:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29:         __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \note
:                                                        ^expanded from macro 'ID2SYM'

#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4039:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enum.c:3827:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3827:29: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
enum.c:3827:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3827:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_enum"), enumerable);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
enumerator.c:4040:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
enum.c:3828:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847#define RB_ID2SYM(x) (rb_id2sym(x)):
23                                ^:
 note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
enum.c:3828:        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \29
:                                         ^~~~~~~~~~~ 
note: '{' token is here
enumerator.c:4040:48: note: '{' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note:     rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter")));expanded from macro 'rb_intern'

                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \24
:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
note: expanded from macro 'rb_intern'
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
enum.c:3828:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3828:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_pred"), pred);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: enumerator.cexpanded from macro 'rb_intern'
:4040:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3829:29: ./include/ruby/ruby.hwarning:: 414'(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]:
29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qtrue);409
:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~33
: note: expanded from macro 'RB_ID2SYM'./include/ruby/ruby.h
:1847:23: note: expanded from macro 'rb_intern'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note:         __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \expanded from macro 'rb_funcall'

                      ^
enum.c:3829:29: note: '{' token is here
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4040:48: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qtrue);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5:./include/ruby/ruby.h :note1847: :expanded from macro 'RUBY_CONST_ID_CACHE'56
: note: expanded from macro 'rb_intern'
    {                                                   \
    ^
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
enum.c:3829:29: warning:         const VALUE rb_funcall_args[] = {__VA_ARGS__}; \'}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]

                                         ^~~~~~~~~~~
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qtrue);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
enum.c:3829:29: note: ')' token is here
    rb_ivar_set(enumerator, rb_intern("slicewhen_inverted"), Qtrue);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
enumerator.c:4041:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4041:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4041:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4041:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4042:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4042:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4042:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4042:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4043:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4043:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4043:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4043:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4044:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4044:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4044:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4044:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4045:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4045:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4045:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4045:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4046:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4046:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4046:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4046:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4047:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4047:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4047:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4047:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4048:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4048:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4048:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4048:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4049:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4049:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4049:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4049:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4050:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4050:48: note: '{' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4050:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4050:48: note: ')' token is here
    rb_funcall(rb_cLazy, id_private, 1, ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./include/ruby/ruby.h:2686:35: note: expanded from macro 'rb_funcall'
        const VALUE rb_funcall_args[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
enumerator.c:4082:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:74: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:74: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:74: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4082:74: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("map")), ID2SYM(rb_intern("_enumerable_map")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                               ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:78: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:78: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:78: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4083:78: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect")), ID2SYM(rb_intern("_enumerable_collect")));
                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:79: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:79: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:79: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4084:79: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("flat_map")), ID2SYM(rb_intern("_enumerable_flat_map")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:85: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:85: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:85: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4085:85: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("collect_concat")), ID2SYM(rb_intern("_enumerable_collect_concat")));
                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:77: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:77: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:77: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4086:77: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("select")), ID2SYM(rb_intern("_enumerable_select")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                               ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:79: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:79: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:79: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4087:79: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("find_all")), ID2SYM(rb_intern("_enumerable_find_all")));
                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:77: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:77: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:77: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4088:77: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter")), ID2SYM(rb_intern("_enumerable_filter")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:81: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:81: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:81: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4089:81: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("filter_map")), ID2SYM(rb_intern("_enumerable_filter_map")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:77: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:77: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:77: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4090:77: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("reject")), ID2SYM(rb_intern("_enumerable_reject")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:75: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4091:75: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep")), ID2SYM(rb_intern("_enumerable_grep")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:77: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:77: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:77: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4092:77: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("grep_v")), ID2SYM(rb_intern("_enumerable_grep_v")));
                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:74: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:74: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:74: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4093:74: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("zip")), ID2SYM(rb_intern("_enumerable_zip")));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:75: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4094:75: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take")), ID2SYM(rb_intern("_enumerable_take")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:81: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:81: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:81: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4095:81: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("take_while")), ID2SYM(rb_intern("_enumerable_take_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:75: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4096:75: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop")), ID2SYM(rb_intern("_enumerable_drop")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:81: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:81: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:81: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4097:81: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("drop_while")), ID2SYM(rb_intern("_enumerable_drop_while")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                               ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:75: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4098:75: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("uniq")), ID2SYM(rb_intern("_enumerable_uniq")));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:48: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:48: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:81: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:81: note: '{' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:81: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
enumerator.c:4099:81: note: ')' token is here
    rb_hash_aset(lazy_use_super_method, ID2SYM(rb_intern("with_index")), ID2SYM(rb_intern("_enumerable_with_index")));
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
2 warnings generated.
110 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o error.o -c error.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o eval.o -c eval.c
70 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o file.o -c file.c
In file included from eval.c:20:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from eval.c:43:
./eval_error.c:62:24: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID set_backtrace = rb_intern("set_backtrace");
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./eval_error.c:62:24: note: '{' token is here
    ID set_backtrace = rb_intern("set_backtrace");
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
In file included from eval.c:43:
./eval_error.c:62:24: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID set_backtrace = rb_intern("set_backtrace");
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./eval_error.c:62:24: note: ')' token is here
    ID set_backtrace = rb_intern("set_backtrace");
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
error.c:146:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (category == ID2SYM(rb_intern("deprecated"))) {
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:146:28: note: '{' token is here
    if (category == ID2SYM(rb_intern("deprecated"))) {
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:146:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (category == ID2SYM(rb_intern("deprecated"))) {
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:146:28: note: ')' token is here
    if (category == ID2SYM(rb_intern("deprecated"))) {
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:149:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    else if (category == ID2SYM(rb_intern("experimental"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:149:33: note: '{' token is here
    else if (category == ID2SYM(rb_intern("experimental"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:149:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    else if (category == ID2SYM(rb_intern("experimental"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:149:33: note: ')' token is here
    else if (category == ID2SYM(rb_intern("experimental"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
error.c:424:42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                     NIL_P(path = rb_funcall(location, rb_intern("path"), 0))) {
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:482:27: note: expanded from macro 'NIL_P'
#define NIL_P(v) RB_NIL_P(v)
                          ^
./include/ruby/ruby.h:480:31: note: expanded from macro 'RB_NIL_P'
#define RB_NIL_P(v) !((VALUE)(v) != RUBY_Qnil)
                              ^
error.c:424:42: note: '{' token is here
                     NIL_P(path = rb_funcall(location, rb_intern("path"), 0))) {
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:482:27: note: expanded from macro 'NIL_P'
#define NIL_P(v) RB_NIL_P(v)
                          ^
./include/ruby/ruby.h:480:31: note: expanded from macro 'RB_NIL_P'
#define RB_NIL_P(v) !((VALUE)(v) != RUBY_Qnil)
                              ^
error.c:424:42: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                     NIL_P(path = rb_funcall(location, rb_intern("path"), 0))) {
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:482:27: note: expanded from macro 'NIL_P'
#define NIL_P(v) RB_NIL_P(v)
                          ^
./include/ruby/ruby.h:480:31: note: expanded from macro 'RB_NIL_P'
#define RB_NIL_P(v) !((VALUE)(v) != RUBY_Qnil)
                              ^
error.c:424:42: note: ')' token is here
                     NIL_P(path = rb_funcall(location, rb_intern("path"), 0))) {
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:482:27: note: expanded from macro 'NIL_P'
#define NIL_P(v) RB_NIL_P(v)
                          ^
./include/ruby/ruby.h:480:31: note: expanded from macro 'RB_NIL_P'
#define RB_NIL_P(v) !((VALUE)(v) != RUBY_Qnil)
                              ^
error.c:430:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    NUM2LONG(rb_funcall(location, rb_intern("lineno"), 0)));
                                                  ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
error.c:430:37: note: '{' token is here
                    NUM2LONG(rb_funcall(location, rb_intern("lineno"), 0)));
                                                  ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
error.c:430:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    NUM2LONG(rb_funcall(location, rb_intern("lineno"), 0)));
                                                  ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
error.c:430:37: note: ')' token is here
                    NUM2LONG(rb_funcall(location, rb_intern("lineno"), 0)));
                                                  ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
eval.c:632:2: warning: implicit declaration of function 'RUBY_DTRACE_RAISE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_HOOK(RAISE, rb_obj_classname(ec->errinfo));
        ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:14:1: note: expanded from here
RUBY_DTRACE_RAISE_ENABLED
^
eval.c:632:2: warning: implicit declaration of function 'RUBY_DTRACE_RAISE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:15:1: note: expanded from here
RUBY_DTRACE_RAISE
^
eval.c:1667:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(ary, rb_intern("uniq"), 0);
                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
eval.c:1667:28: note: '{' token is here
    return rb_funcall(ary, rb_intern("uniq"), 0);
                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
eval.c:1667:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(ary, rb_intern("uniq"), 0);
                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
eval.c:1667:28: note: ')' token is here
    return rb_funcall(ary, rb_intern("uniq"), 0);
                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
7 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o gc.o -c gc.c
8 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o hash.o -c hash.c
In file included from gc.c:41:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash.c:1533:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(HASH, 0);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:293:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE_ENABLED
^
hash.c:1533:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:294:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE
^
gc.c:3969:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: '{' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: ')' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: '{' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: ')' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: '{' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: ')' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: '{' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: ')' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: '{' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3969:9: note: ')' token is here
        COUNT_TYPE(T_NONE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: '{' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: ')' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: '{' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: ')' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: '{' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: ')' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: '{' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: ')' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: '{' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3970:9: note: ')' token is here
        COUNT_TYPE(T_OBJECT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: '{' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: ')' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: '{' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: ')' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: '{' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: ')' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: '{' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: ')' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: '{' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3971:9: note: ')' token is here
        COUNT_TYPE(T_CLASS);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: '{' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: ')' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: '{' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: ')' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: '{' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: ')' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: '{' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: ')' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: '{' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3972:9: note: ')' token is here
        COUNT_TYPE(T_MODULE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: '{' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: ')' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: '{' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: ')' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: '{' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: ')' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: '{' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: ')' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: '{' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3973:9: note: ')' token is here
        COUNT_TYPE(T_FLOAT);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: '{' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: ')' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: '{' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: ')' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: '{' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: ')' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: '{' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: ')' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: '{' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3974:9: note: ')' token is here
        COUNT_TYPE(T_STRING);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: '{' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: ')' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: '{' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: ')' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: '{' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: ')' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: '{' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: ')' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: '{' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3975:9: note: ')' token is here
        COUNT_TYPE(T_REGEXP);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: '{' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: ')' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: '{' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: ')' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: '{' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: ')' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: '{' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: ')' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: '{' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3976:9: note: ')' token is here
        COUNT_TYPE(T_ARRAY);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: '{' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: ')' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: '{' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: ')' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: '{' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: ')' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: '{' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: ')' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: '{' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3977:9: note: ')' token is here
        COUNT_TYPE(T_HASH);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: '{' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: ')' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: '{' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: ')' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: '{' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: ')' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: '{' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: ')' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: '{' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3978:9: note: ')' token is here
        COUNT_TYPE(T_STRUCT);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: '{' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: ')' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: '{' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: ')' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: '{' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: ')' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: '{' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: ')' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: '{' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3979:9: note: ')' token is here
        COUNT_TYPE(T_BIGNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: '{' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: ')' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: '{' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: ')' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: '{' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: ')' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: '{' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: ')' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: '{' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3980:9: note: ')' token is here
        COUNT_TYPE(T_FILE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: '{' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: ')' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: '{' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: ')' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: '{' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: ')' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: '{' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: ')' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: '{' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3981:9: note: ')' token is here
        COUNT_TYPE(T_DATA);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: '{' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: ')' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: '{' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: ')' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: '{' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: ')' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: '{' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: ')' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: '{' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3982:9: note: ')' token is here
        COUNT_TYPE(T_MATCH);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: '{' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: ')' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: '{' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: ')' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: '{' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: ')' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: '{' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: ')' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: '{' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3983:9: note: ')' token is here
        COUNT_TYPE(T_COMPLEX);
        ^~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: '{' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: ')' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: '{' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: ')' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: '{' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: ')' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: '{' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: ')' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: '{' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3984:9: note: ')' token is here
        COUNT_TYPE(T_RATIONAL);
        ^~~~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: '{' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: ')' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: '{' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: ')' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: '{' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: ')' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: '{' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: ')' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: '{' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3985:9: note: ')' token is here
        COUNT_TYPE(T_NIL);
        ^~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: '{' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: ')' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: '{' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: ')' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: '{' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: ')' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: '{' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: ')' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: '{' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3986:9: note: ')' token is here
        COUNT_TYPE(T_TRUE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: '{' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: ')' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: '{' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: ')' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: '{' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: ')' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: '{' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: ')' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: '{' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3987:9: note: ')' token is here
        COUNT_TYPE(T_FALSE);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: '{' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: ')' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: '{' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: ')' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: '{' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: ')' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: '{' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: ')' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: '{' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3988:9: note: ')' token is here
        COUNT_TYPE(T_SYMBOL);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: '{' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: ')' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: '{' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: ')' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: '{' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: ')' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: '{' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: ')' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: '{' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3989:9: note: ')' token is here
        COUNT_TYPE(T_FIXNUM);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: '{' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: ')' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: '{' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: ')' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: '{' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: ')' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: '{' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: ')' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: '{' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3990:9: note: ')' token is here
        COUNT_TYPE(T_IMEMO);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: '{' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: ')' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: '{' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: ')' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: '{' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: ')' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: '{' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: ')' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: '{' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3991:9: note: ')' token is here
        COUNT_TYPE(T_UNDEF);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: '{' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: ')' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: '{' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: ')' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: '{' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: ')' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: '{' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: ')' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: '{' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3992:9: note: ')' token is here
        COUNT_TYPE(T_NODE);
        ^~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: '{' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: ')' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: '{' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: ')' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: '{' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: ')' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: '{' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: ')' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: '{' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3993:9: note: ')' token is here
        COUNT_TYPE(T_ICLASS);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: '{' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: ')' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: '{' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: ')' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o inits.o -c inits.c
expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: '{' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: ')' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: '{' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: ')' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: '{' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3994:9: note: ')' token is here
        COUNT_TYPE(T_ZOMBIE);
        ^~~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: '{' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: ')' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: '{' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: ')' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: '{' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: ')' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: '{' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: ')' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: '{' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:3995:9: note: ')' token is here
        COUNT_TYPE(T_MOVED);
        ^~~~~~~~~~~~~~~~~~~
gc.c:3968:47: note: expanded from macro 'COUNT_TYPE'
#define COUNT_TYPE(t) case (t): return ID2SYM(rb_intern(#t)); break;
                                              ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4084:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
                              ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: '{' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:4085:31: note: ')' token is here
    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
                              ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:7002:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(marked);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7002:2: note: '{' token is here
        I(marked);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7002:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(marked);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7002:2: note: ')' token is here
        I(marked);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:7004:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(wb_protected);
        ^~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7004:2: note: '{' token is here
        I(wb_protected);
        ^~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7004:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(wb_protected);
        ^~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7004:2: note: ')' token is here
        I(wb_protected);
        ^~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:7005:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(old);
        ^~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7005:2: note: '{' token is here
        I(old);
        ^~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7005:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(old);
        ^~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7005:2: note: ')' token is here
        I(old);
        ^~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:7006:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(marking);
        ^~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7006:2: note: '{' token is here
        I(marking);
        ^~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7006:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(marking);
        ^~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7006:2: note: ')' token is here
        I(marking);
        ^~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:7007:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(uncollectible);
        ^~~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7007:2: note: '{' token is here
        I(uncollectible);
        ^~~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7007:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(uncollectible);
        ^~~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7007:2: note: ')' token is here
        I(uncollectible);
        ^~~~~~~~~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:7008:9: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(pinned);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:7008:9: note: '{' token is here
        I(pinned);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:7008:9: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        I(pinned);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:7008:9: note: ')' token is here
        I(pinned);
        ^~~~~~~~~
gc.c:7001:23: note: expanded from macro 'I'
#define I(s) ID_##s = rb_intern(#s);
                      ^~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:8460:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8460:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("considered")), considered);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: '{' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8461:28: note: ')' token is here
    rb_hash_aset(h, ID2SYM(rb_intern("moved")), moved);
                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:8670:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[0] = rb_intern("toward");
                             ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:8670:30: note: '{' token is here
            keyword_ids[0] = rb_intern("toward");
                             ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:8670:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[0] = rb_intern("toward");
                             ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:8670:30: note: ')' token is here
            keyword_ids[0] = rb_intern("toward");
                             ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:8671:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[1] = rb_intern("double_heap");
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:8671:30: note: '{' token is here
            keyword_ids[1] = rb_intern("double_heap");
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:8671:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[1] = rb_intern("double_heap");
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:8671:30: note: ')' token is here
            keyword_ids[1] = rb_intern("double_heap");
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
gc.c:8675:36: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (kwvals[0] != Qundef && rb_intern("empty") == rb_sym2id(kwvals[0])) {
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
gc.c:8675:36: note: '{' token is here
        if (kwvals[0] != Qundef && rb_intern("empty") == rb_sym2id(kwvals[0])) {
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
gc.c:8675:36: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (kwvals[0] != Qundef && rb_intern("empty") == rb_sym2id(kwvals[0])) {
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
gc.c:8675:36: note: ')' token is here
        if (kwvals[0] != Qundef && rb_intern("empty") == rb_sym2id(kwvals[0])) {
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o io.o -c io.c
gc.c:10916:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_MARK_BEGIN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_GC_HOOK(MARK_BEGIN);
    ^
gc.c:10912:13: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
            ^
<scratch space>:47:1: note: expanded from here
RUBY_DTRACE_GC_MARK_BEGIN_ENABLED
^
gc.c:10916:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_MARK_BEGIN' is invalid in C99 [-Wimplicit-function-declaration]
gc.c:10912:48: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
                                               ^
<scratch space>:48:1: note: expanded from here
RUBY_DTRACE_GC_MARK_BEGIN
^
gc.c:10927:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_MARK_END_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_GC_HOOK(MARK_END);
    ^
gc.c:10912:13: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
            ^
<scratch space>:50:1: note: expanded from here
RUBY_DTRACE_GC_MARK_END_ENABLED
^
gc.c:10927:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_MARK_END' is invalid in C99 [-Wimplicit-function-declaration]
gc.c:10912:48: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
                                               ^
<scratch space>:51:1: note: expanded from here
RUBY_DTRACE_GC_MARK_END
^
gc.c:10939:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_SWEEP_BEGIN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_GC_HOOK(SWEEP_BEGIN);
    ^
gc.c:10912:13: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
            ^
<scratch space>:53:1: note: expanded from here
RUBY_DTRACE_GC_SWEEP_BEGIN_ENABLED
^
gc.c:10939:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_SWEEP_BEGIN' is invalid in C99 [-Wimplicit-function-declaration]
gc.c:10912:48: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
                                               ^
<scratch space>:54:1: note: expanded from here
RUBY_DTRACE_GC_SWEEP_BEGIN
^
gc.c:10952:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_SWEEP_END_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_GC_HOOK(SWEEP_END);
    ^
gc.c:10912:13: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
            ^
<scratch space>:56:1: note: expanded from here
RUBY_DTRACE_GC_SWEEP_END_ENABLED
^
gc.c:10952:5: warning: implicit declaration of function 'RUBY_DTRACE_GC_SWEEP_END' is invalid in C99 [-Wimplicit-function-declaration]
gc.c:10912:48: note: expanded from macro 'RUBY_DTRACE_GC_HOOK'
    do {if (RUBY_DTRACE_GC_##name##_ENABLED()) RUBY_DTRACE_GC_##name();} while (0)
                                               ^
<scratch space>:57:1: note: expanded from here
RUBY_DTRACE_GC_SWEEP_END
^
gc.c:11096:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11096:28: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_FLAGS")), gc_info_decode(0, rb_hash_new(), record->flags));
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11097:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_TIME")), DBL2NUM(record->gc_time));
                                  ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11098:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_INVOKE_TIME")), DBL2NUM(record->gc_invoke_time));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11099:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), SIZET2NUM(record->heap_use_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11100:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), SIZET2NUM(record->heap_total_size));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11101:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), SIZET2NUM(record->heap_total_objects));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: '{' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
gc.c:11102:35: note: ')' token is here
        rb_hash_aset(prof, ID2SYM(rb_intern("GC_IS_MARKED")), Qtrue);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
io.c:3819:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_line")), argc, argv);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3819:37: note: '{' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_line")), argc, argv);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3819:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_line")), argc, argv);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3819:37: note: ')' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_line")), argc, argv);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3870:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_byte")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3870:37: note: '{' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_byte")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3870:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_byte")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:3870:37: note: ')' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_byte")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4024:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_char")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4024:37: note: '{' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_char")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4024:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_char")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4024:37: note: ')' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_char")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4152:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4152:37: note: '{' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4152:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4152:37: note: ')' token is here
        return rb_enumeratorize(io, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:4860:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_check_funcall(io, rb_intern("close"), 0, 0);
                         ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:4860:26: note: '{' token is here
    rb_check_funcall(io, rb_intern("close"), 0, 0);
                         ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:4860:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_check_funcall(io, rb_intern("close"), 0, 0);
                         ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:4860:26: note: ')' token is here
    rb_check_funcall(io, rb_intern("close"), 0, 0);
                         ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:4880:41: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE closed = rb_check_funcall(io, rb_intern("closed?"), 0, 0);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:4880:41: note: '{' token is here
    VALUE closed = rb_check_funcall(io, rb_intern("closed?"), 0, 0);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:4880:41: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE closed = rb_check_funcall(io, rb_intern("closed?"), 0, 0);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:4880:41: note: ')' token is here
    VALUE closed = rb_check_funcall(io, rb_intern("closed?"), 0, 0);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:6756:27: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(port, rb_intern("@tied_io_for_writing"), write_port);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:6756:27: note: '{' token is here
        rb_ivar_set(port, rb_intern("@tied_io_for_writing"), write_port);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:6756:27: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(port, rb_intern("@tied_io_for_writing"), write_port);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:6756:27: note: ')' token is here
        rb_ivar_set(port, rb_intern("@tied_io_for_writing"), write_port);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:7494:27: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(dest, rb_intern("@tied_io_for_writing"), write_io);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:7494:27: note: '{' token is here
        rb_ivar_set(dest, rb_intern("@tied_io_for_writing"), write_io);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:7494:27: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(dest, rb_intern("@tied_io_for_writing"), write_io);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:7494:27: note: ')' token is here
        rb_ivar_set(dest, rb_intern("@tied_io_for_writing"), write_io);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:7684:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(rb_stdout, rb_intern("putc"), 1, &ch);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7684:35: note: '{' token is here
    return rb_funcallv(rb_stdout, rb_intern("putc"), 1, &ch);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7684:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(rb_stdout, rb_intern("putc"), 1, &ch);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7684:35: note: ')' token is here
    return rb_funcallv(rb_stdout, rb_intern("putc"), 1, &ch);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7798:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(rb_stdout, rb_intern("puts"), argc, argv);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7798:35: note: '{' token is here
    return rb_funcallv(rb_stdout, rb_intern("puts"), argc, argv);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7798:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(rb_stdout, rb_intern("puts"), argc, argv);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:7798:35: note: ')' token is here
    return rb_funcallv(rb_stdout, rb_intern("puts"), argc, argv);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:8949:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(argf, rb_intern("readline"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:8949:30: note: '{' token is here
    return rb_funcallv(argf, rb_intern("readline"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:8949:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(argf, rb_intern("readline"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:8949:30: note: ')' token is here
    return rb_funcallv(argf, rb_intern("readline"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:9003:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(argf, rb_intern("readlines"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:9003:30: note: '{' token is here
    return rb_funcallv(argf, rb_intern("readlines"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:9003:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(argf, rb_intern("readlines"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:9003:30: note: ')' token is here
    return rb_funcallv(argf, rb_intern("readlines"), argc, argv);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
io.c:9031:45: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            lines = rb_funcall3(ARGF.current_file, rb_intern("readlines"), argc, argv);
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:9031:45: note: '{' token is here
            lines = rb_funcall3(ARGF.current_file, rb_intern("readlines"), argc, argv);
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:9031:45: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            lines = rb_funcall3(ARGF.current_file, rb_intern("readlines"), argc, argv);
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:9031:45: note: ')' token is here
            lines = rb_funcall3(ARGF.current_file, rb_intern("readlines"), argc, argv);
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:11484:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
          rb_respond_to(src_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:11484:26: note: '{' token is here
          rb_respond_to(src_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:11484:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
          rb_respond_to(src_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:11484:26: note: ')' token is here
          rb_respond_to(src_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:11518:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
          rb_respond_to(dst_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:11518:26: note: '{' token is here
          rb_respond_to(dst_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:11518:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
          rb_respond_to(dst_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:11518:26: note: ')' token is here
          rb_respond_to(dst_io, rb_intern("to_path")))) {
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12268:38: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12268:38: note: '{' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12268:38: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12268:38: note: ')' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12308:38: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getbyte"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12308:38: note: '{' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getbyte"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12308:38: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getbyte"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12308:38: note: ')' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getbyte"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12348:38: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12348:38: note: '{' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12348:38: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12348:38: note: ')' token is here
        ch = rb_funcall3(ARGF.current_file, rb_intern("getc"), 0, 0);
                                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12478:23: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call_line(rb_intern("each_line"), argc, argv, argf);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12478:23: note: '{' token is here
        argf_block_call_line(rb_intern("each_line"), argc, argv, argf);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12478:23: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call_line(rb_intern("each_line"), argc, argv, argf);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12478:23: note: ')' token is here
        argf_block_call_line(rb_intern("each_line"), argc, argv, argf);
                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12492:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_line")), argc, argv);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12492:39: note: '{' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_line")), argc, argv);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12492:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_line")), argc, argv);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12492:39: note: ')' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_line")), argc, argv);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12525:18: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_byte"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12525:18: note: '{' token is here
        argf_block_call(rb_intern("each_byte"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12525:18: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_byte"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12525:18: note: ')' token is here
        argf_block_call(rb_intern("each_byte"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12539:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_byte")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12539:39: note: '{' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_byte")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12539:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_byte")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12539:39: note: ')' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_byte")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12564:18: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_char"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12564:18: note: '{' token is here
        argf_block_call(rb_intern("each_char"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12564:18: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_char"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12564:18: note: ')' token is here
        argf_block_call(rb_intern("each_char"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12578:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_char")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12578:39: note: '{' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_char")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12578:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_char")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12578:39: note: ')' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_char")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12603:18: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_codepoint"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
io.c:12603:18: note: '{' token is here
        argf_block_call(rb_intern("each_codepoint"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
io.c:12603:18: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        argf_block_call(rb_intern("each_codepoint"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
io.c:12603:18: note: ')' token is here
        argf_block_call(rb_intern("each_codepoint"), 0, 0, argf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
io.c:12617:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12617:39: note: '{' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12617:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
io.c:12617:39: note: ')' token is here
        return rb_enumeratorize(argf, ID2SYM(rb_intern("each_codepoint")), 0, 0);
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
2 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o iseq.o -c iseq.c
In file included from iseq.c:30:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:654:19: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_funcallv(err, rb_intern("set_backtrace"), 1, &path);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:654:19: note: '{' token is here
        rb_funcallv(err, rb_intern("set_backtrace"), 1, &path);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:654:19: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_funcallv(err, rb_intern("set_backtrace"), 1, &path);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:654:19: note: ')' token is here
        rb_funcallv(err, rb_intern("set_backtrace"), 1, &path);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:689:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, inline_const_cache);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:689:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, inline_const_cache);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:689:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, inline_const_cache);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:689:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, inline_const_cache);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:690:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, peephole_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:690:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, peephole_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:690:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, peephole_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:690:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, peephole_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:691:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, tailcall_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:691:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, tailcall_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:691:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, tailcall_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:691:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, tailcall_optimization);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:692:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, specialized_instruction);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:692:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, specialized_instruction);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:692:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, specialized_instruction);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:692:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, specialized_instruction);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:693:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, operands_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:693:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, operands_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:693:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, operands_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:693:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, operands_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:694:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, instructions_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:694:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, instructions_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:694:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, instructions_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:694:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, instructions_unification);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:695:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, stack_caching);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:695:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, stack_caching);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:695:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, stack_caching);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:695:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, stack_caching);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:696:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:696:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:696:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:696:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:697:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:697:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:697:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:697:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:698:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, coverage_enabled);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:698:5: note: '{' token is here
    SET_COMPILE_OPTION(option, opt, coverage_enabled);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:698:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION(option, opt, coverage_enabled);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:698:5: note: ')' token is here
    SET_COMPILE_OPTION(option, opt, coverage_enabled);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:681:43: note: expanded from macro 'SET_COMPILE_OPTION'
  { VALUE flag = rb_hash_aref((h), ID2SYM(rb_intern(#mem))); \
                                          ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:699:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION_NUM(option, opt, debug_level);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:686:42: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  { VALUE num = rb_hash_aref(opt, ID2SYM(rb_intern(#mem))); \
                                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:699:5: note: '{' token is here
    SET_COMPILE_OPTION_NUM(option, opt, debug_level);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:686:42: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  { VALUE num = rb_hash_aref(opt, ID2SYM(rb_intern(#mem))); \
                                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:699:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    SET_COMPILE_OPTION_NUM(option, opt, debug_level);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:686:42: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  { VALUE num = rb_hash_aref(opt, ID2SYM(rb_intern(#mem))); \
                                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:699:5: note: ')' token is here
    SET_COMPILE_OPTION_NUM(option, opt, debug_level);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:686:42: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  { VALUE num = rb_hash_aref(opt, ID2SYM(rb_intern(#mem))); \
                                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:743:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, inline_const_cache);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:743:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, inline_const_cache);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:743:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, inline_const_cache);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:743:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, inline_const_cache);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:744:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, peephole_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:744:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, peephole_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:744:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, peephole_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:744:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, peephole_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:745:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, tailcall_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:745:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, tailcall_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:745:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, tailcall_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:745:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, tailcall_optimization);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:746:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, specialized_instruction);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:746:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, specialized_instruction);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:746:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, specialized_instruction);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:746:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, specialized_instruction);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:747:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, operands_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:747:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, operands_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:747:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, operands_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:747:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, operands_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:748:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, instructions_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:748:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, instructions_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:748:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, instructions_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:748:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, instructions_unification);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:749:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, stack_caching);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:749:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, stack_caching);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:749:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, stack_caching);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:749:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, stack_caching);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:750:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:750:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:750:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:750:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:751:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:751:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:751:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:751:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, debug_frozen_string_literal);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:752:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, coverage_enabled);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:752:2: note: '{' token is here
        SET_COMPILE_OPTION(option, opt, coverage_enabled);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:752:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION(option, opt, coverage_enabled);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:752:2: note: ')' token is here
        SET_COMPILE_OPTION(option, opt, coverage_enabled);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:739:28: note: expanded from macro 'SET_COMPILE_OPTION'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), (o)->mem ? Qtrue : Qfalse)
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:753:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION_NUM(option, opt, debug_level);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:741:28: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), INT2NUM((o)->mem))
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:753:2: note: '{' token is here
        SET_COMPILE_OPTION_NUM(option, opt, debug_level);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:741:28: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), INT2NUM((o)->mem))
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:753:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        SET_COMPILE_OPTION_NUM(option, opt, debug_level);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:741:28: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), INT2NUM((o)->mem))
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:753:2: note: ')' token is here
        SET_COMPILE_OPTION_NUM(option, opt, debug_level);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:741:28: note: expanded from macro 'SET_COMPILE_OPTION_NUM'
  rb_hash_aset((h), ID2SYM(rb_intern(#mem)), INT2NUM((o)->mem))
                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:795:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (rb_respond_to(rb_cISeq, rb_intern("translate"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:795:33: note: '{' token is here
    if (rb_respond_to(rb_cISeq, rb_intern("translate"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:795:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (rb_respond_to(rb_cISeq, rb_intern("translate"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:795:33: note: ')' token is here
    if (rb_respond_to(rb_cISeq, rb_intern("translate"))) {
                                ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:797:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        VALUE v2 = rb_funcall(rb_cISeq, rb_intern("translate"), 1, v1);
                                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:797:34: note: '{' token is here
        VALUE v2 = rb_funcall(rb_cISeq, rb_intern("translate"), 1, v1);
                                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:797:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        VALUE v2 = rb_funcall(rb_cISeq, rb_intern("translate"), 1, v1);
                                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:797:34: note: ')' token is here
        VALUE v2 = rb_funcall(rb_cISeq, rb_intern("translate"), 1, v1);
                                        ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:849:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE iseqv = rb_check_funcall(rb_cISeq, rb_intern("load_iseq"), 1, &fname);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:849:46: note: '{' token is here
    VALUE iseqv = rb_check_funcall(rb_cISeq, rb_intern("load_iseq"), 1, &fname);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:849:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE iseqv = rb_check_funcall(rb_cISeq, rb_intern("load_iseq"), 1, &fname);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:849:46: note: ')' token is here
    VALUE iseqv = rb_check_funcall(rb_cISeq, rb_intern("load_iseq"), 1, &fname);
                                             ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:867:23: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_top = rb_intern("top");
                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:867:23: note: '{' token is here
    const ID id_top = rb_intern("top");
                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:867:23: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_top = rb_intern("top");
                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:867:23: note: ')' token is here
    const ID id_top = rb_intern("top");
                      ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:868:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_method = rb_intern("method");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:868:26: note: '{' token is here
    const ID id_method = rb_intern("method");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:868:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_method = rb_intern("method");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:868:26: note: ')' token is here
    const ID id_method = rb_intern("method");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:869:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_block = rb_intern("block");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:869:25: note: '{' token is here
    const ID id_block = rb_intern("block");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:869:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_block = rb_intern("block");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:869:25: note: ')' token is here
    const ID id_block = rb_intern("block");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:870:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_class = rb_intern("class");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:870:25: note: '{' token is here
    const ID id_class = rb_intern("class");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:870:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_class = rb_intern("class");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:870:25: note: ')' token is here
    const ID id_class = rb_intern("class");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:871:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_rescue = rb_intern("rescue");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:871:26: note: '{' token is here
    const ID id_rescue = rb_intern("rescue");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:871:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_rescue = rb_intern("rescue");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:871:26: note: ')' token is here
    const ID id_rescue = rb_intern("rescue");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:872:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_ensure = rb_intern("ensure");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:872:26: note: '{' token is here
    const ID id_ensure = rb_intern("ensure");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:872:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_ensure = rb_intern("ensure");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:872:26: note: ')' token is here
    const ID id_ensure = rb_intern("ensure");
                         ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:873:24: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_eval = rb_intern("eval");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:873:24: note: '{' token is here
    const ID id_eval = rb_intern("eval");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:873:24: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_eval = rb_intern("eval");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:873:24: note: ')' token is here
    const ID id_eval = rb_intern("eval");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:874:24: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_main = rb_intern("main");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:874:24: note: '{' token is here
    const ID id_main = rb_intern("main");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:874:24: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_main = rb_intern("main");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:874:24: note: ')' token is here
    const ID id_main = rb_intern("main");
                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:875:25: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_plain = rb_intern("plain");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:875:25: note: '{' token is here
    const ID id_plain = rb_intern("plain");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:875:25: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    const ID id_plain = rb_intern("plain");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:875:25: note: ')' token is here
    const ID id_plain = rb_intern("plain");
                        ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:938:41: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    node_id = rb_hash_aref(misc, ID2SYM(rb_intern("node_id")));
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:938:41: note: '{' token is here
    node_id = rb_hash_aref(misc, ID2SYM(rb_intern("node_id")));
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:938:41: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    node_id = rb_hash_aref(misc, ID2SYM(rb_intern("node_id")));
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:938:41: note: ')' token is here
    node_id = rb_hash_aref(misc, ID2SYM(rb_intern("node_id")));
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:940:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    code_location = rb_hash_aref(misc, ID2SYM(rb_intern("code_location")));
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:940:47: note: '{' token is here
    code_location = rb_hash_aref(misc, ID2SYM(rb_intern("code_location")));
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:940:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    code_location = rb_hash_aref(misc, ID2SYM(rb_intern("code_location")));
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:940:47: note: ')' token is here
    code_location = rb_hash_aref(misc, ID2SYM(rb_intern("code_location")));
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2383:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_CLASS,    "class",    rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2383:5: note: '{' token is here
    C(RUBY_EVENT_CLASS,    "class",    rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2383:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_CLASS,    "class",    rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2383:5: note: ')' token is here
    C(RUBY_EVENT_CLASS,    "class",    rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2384:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_CALL,     "call",     rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2384:5: note: '{' token is here
    C(RUBY_EVENT_CALL,     "call",     rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2384:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_CALL,     "call",     rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2384:5: note: ')' token is here
    C(RUBY_EVENT_CALL,     "call",     rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2385:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_B_CALL,   "b_call",   rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2385:5: note: '{' token is here
    C(RUBY_EVENT_B_CALL,   "b_call",   rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2385:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_B_CALL,   "b_call",   rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2385:5: note: ')' token is here
    C(RUBY_EVENT_B_CALL,   "b_call",   rb_iseq_first_lineno(iseq));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2386:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_LINE,     "line",     INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2386:5: note: '{' token is here
    C(RUBY_EVENT_LINE,     "line",     INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2386:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_LINE,     "line",     INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2386:5: note: ')' token is here
    C(RUBY_EVENT_LINE,     "line",     INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2387:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_END,      "end",      INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2387:5: note: '{' token is here
    C(RUBY_EVENT_END,      "end",      INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2387:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_END,      "end",      INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2387:5: note: ')' token is here
    C(RUBY_EVENT_END,      "end",      INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2388:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_RETURN,   "return",   INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2388:5: note: '{' token is here
    C(RUBY_EVENT_RETURN,   "return",   INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2388:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_RETURN,   "return",   INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2388:5: note: ')' token is here
    C(RUBY_EVENT_RETURN,   "return",   INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2389:5: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_B_RETURN, "b_return", INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2389:5: note: '{' token is here
    C(RUBY_EVENT_B_RETURN, "b_return", INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2389:5: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    C(RUBY_EVENT_B_RETURN, "b_return", INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2389:5: note: ')' token is here
    C(RUBY_EVENT_B_RETURN, "b_return", INT2FIX(line));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2382:92: note: expanded from macro 'C'
#define C(ev, cstr, l) if (events & ev) rb_ary_push(ary, rb_ary_new_from_args(2, l, ID2SYM(rb_intern(cstr))));
                                                                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./internal.h:1405:35: note: expanded from macro 'rb_ary_new_from_args'
        const VALUE args_to_new_ary[] = {__VA_ARGS__}; \
                                         ^~~~~~~~~~~
iseq.c:2626:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            insn_syms[i] = rb_intern(insn_name(i));
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2626:28: note: '{' token is here
            insn_syms[i] = rb_intern(insn_name(i));
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2626:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            insn_syms[i] = rb_intern(insn_name(i));
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2626:28: note: ')' token is here
            insn_syms[i] = rb_intern(insn_name(i));
                           ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2628:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(top);
        ^~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2628:2: note: '{' token is here
        INIT_SYMBOL(top);
        ^~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2628:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(top);
        ^~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2628:2: note: ')' token is here
        INIT_SYMBOL(top);
        ^~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2629:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(method);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2629:2: note: '{' token is here
        INIT_SYMBOL(method);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2629:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(method);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2629:2: note: ')' token is here
        INIT_SYMBOL(method);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2630:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(block);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2630:2: note: '{' token is here
        INIT_SYMBOL(block);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2630:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(block);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2630:2: note: ')' token is here
        INIT_SYMBOL(block);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2631:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(class);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2631:2: note: '{' token is here
        INIT_SYMBOL(class);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2631:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(class);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2631:2: note: ')' token is here
        INIT_SYMBOL(class);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2632:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(rescue);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2632:2: note: '{' token is here
        INIT_SYMBOL(rescue);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2632:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(rescue);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2632:2: note: ')' token is here
        INIT_SYMBOL(rescue);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2633:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(ensure);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2633:2: note: '{' token is here
        INIT_SYMBOL(ensure);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2633:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(ensure);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2633:2: note: ')' token is here
        INIT_SYMBOL(ensure);
        ^~~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2634:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(eval);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2634:2: note: '{' token is here
        INIT_SYMBOL(eval);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2634:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(eval);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2634:2: note: ')' token is here
        INIT_SYMBOL(eval);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2635:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(main);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2635:2: note: '{' token is here
        INIT_SYMBOL(main);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2635:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(main);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2635:2: note: ')' token is here
        INIT_SYMBOL(main);
        ^~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2636:2: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(plain);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
iseq.c:2636:2: note: '{' token is here
        INIT_SYMBOL(plain);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
iseq.c:2636:2: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        INIT_SYMBOL(plain);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
iseq.c:2636:2: note: ')' token is here
        INIT_SYMBOL(plain);
        ^~~~~~~~~~~~~~~~~~
iseq.c:2548:16: note: expanded from macro 'INIT_SYMBOL'
  sym_##name = rb_intern(#name)
               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
iseq.c:2665:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ary_push(locals, ID2SYM(rb_intern("#arg_rest")));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2665:33: note: '{' token is here
            rb_ary_push(locals, ID2SYM(rb_intern("#arg_rest")));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2665:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ary_push(locals, ID2SYM(rb_intern("#arg_rest")));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2665:33: note: ')' token is here
            rb_ary_push(locals, ID2SYM(rb_intern("#arg_rest")));
                                       ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2682:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("opt")), arg_opt_labels);
                                        ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2682:34: note: '{' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("opt")), arg_opt_labels);
                                        ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2682:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("opt")), arg_opt_labels);
                                        ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2682:34: note: ')' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("opt")), arg_opt_labels);
                                        ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2686:67: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_lead) rb_hash_aset(params, ID2SYM(rb_intern("lead_num")), INT2FIX(iseq_body->param.lead_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2686:67: note: '{' token is here
        if (iseq_body->param.flags.has_lead) rb_hash_aset(params, ID2SYM(rb_intern("lead_num")), INT2FIX(iseq_body->param.lead_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2686:67: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_lead) rb_hash_aset(params, ID2SYM(rb_intern("lead_num")), INT2FIX(iseq_body->param.lead_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2686:67: note: ')' token is here
        if (iseq_body->param.flags.has_lead) rb_hash_aset(params, ID2SYM(rb_intern("lead_num")), INT2FIX(iseq_body->param.lead_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2687:67: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_num")), INT2FIX(iseq_body->param.post_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2687:67: note: '{' token is here
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_num")), INT2FIX(iseq_body->param.post_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2687:67: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_num")), INT2FIX(iseq_body->param.post_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2687:67: note: ')' token is here
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_num")), INT2FIX(iseq_body->param.post_num));
                                                                         ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2688:67: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_start")), INT2FIX(iseq_body->param.post_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2688:67: note: '{' token is here
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_start")), INT2FIX(iseq_body->param.post_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2688:67: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_start")), INT2FIX(iseq_body->param.post_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2688:67: note: ')' token is here
        if (iseq_body->param.flags.has_post) rb_hash_aset(params, ID2SYM(rb_intern("post_start")), INT2FIX(iseq_body->param.post_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2689:67: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_rest) rb_hash_aset(params, ID2SYM(rb_intern("rest_start")), INT2FIX(iseq_body->param.rest_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2689:67: note: '{' token is here
        if (iseq_body->param.flags.has_rest) rb_hash_aset(params, ID2SYM(rb_intern("rest_start")), INT2FIX(iseq_body->param.rest_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2689:67: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_rest) rb_hash_aset(params, ID2SYM(rb_intern("rest_start")), INT2FIX(iseq_body->param.rest_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2689:67: note: ')' token is here
        if (iseq_body->param.flags.has_rest) rb_hash_aset(params, ID2SYM(rb_intern("rest_start")), INT2FIX(iseq_body->param.rest_start));
                                                                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2690:68: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_block) rb_hash_aset(params, ID2SYM(rb_intern("block_start")), INT2FIX(iseq_body->param.block_start));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2690:68: note: '{' token is here
        if (iseq_body->param.flags.has_block) rb_hash_aset(params, ID2SYM(rb_intern("block_start")), INT2FIX(iseq_body->param.block_start));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2690:68: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_block) rb_hash_aset(params, ID2SYM(rb_intern("block_start")), INT2FIX(iseq_body->param.block_start));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2690:68: note: ')' token is here
        if (iseq_body->param.flags.has_block) rb_hash_aset(params, ID2SYM(rb_intern("block_start")), INT2FIX(iseq_body->param.block_start));
                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2705:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("kwbits")),
                                        ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2705:34: note: '{' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("kwbits")),
                                        ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2705:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("kwbits")),
                                        ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2705:34: note: ')' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("kwbits")),
                                        ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2707:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("keyword")), keywords);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2707:34: note: '{' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("keyword")), keywords);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2707:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_hash_aset(params, ID2SYM(rb_intern("keyword")), keywords);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2707:34: note: ')' token is here
            rb_hash_aset(params, ID2SYM(rb_intern("keyword")), keywords);
                                        ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2709:69: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_kwrest) rb_hash_aset(params, ID2SYM(rb_intern("kwrest")), INT2FIX(keyword->rest_start));
                                                                           ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2709:69: note: '{' token is here
        if (iseq_body->param.flags.has_kwrest) rb_hash_aset(params, ID2SYM(rb_intern("kwrest")), INT2FIX(keyword->rest_start));
                                                                           ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2709:69: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.has_kwrest) rb_hash_aset(params, ID2SYM(rb_intern("kwrest")), INT2FIX(keyword->rest_start));
                                                                           ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2709:69: note: ')' token is here
        if (iseq_body->param.flags.has_kwrest) rb_hash_aset(params, ID2SYM(rb_intern("kwrest")), INT2FIX(keyword->rest_start));
                                                                           ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2710:75: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.ambiguous_param0) rb_hash_aset(params, ID2SYM(rb_intern("ambiguous_param0")), Qtrue);
                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2710:75: note: '{' token is here
        if (iseq_body->param.flags.ambiguous_param0) rb_hash_aset(params, ID2SYM(rb_intern("ambiguous_param0")), Qtrue);
                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2710:75: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (iseq_body->param.flags.ambiguous_param0) rb_hash_aset(params, ID2SYM(rb_intern("ambiguous_param0")), Qtrue);
                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2710:75: note: ')' token is here
        if (iseq_body->param.flags.ambiguous_param0) rb_hash_aset(params, ID2SYM(rb_intern("ambiguous_param0")), Qtrue);
                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2770:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("mid")), ci->mid ? ID2SYM(ci->mid) : Qnil);
                                           ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2770:30: note: '{' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("mid")), ci->mid ? ID2SYM(ci->mid) : Qnil);
                                           ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2770:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("mid")), ci->mid ? ID2SYM(ci->mid) : Qnil);
                                           ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2770:30: note: ')' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("mid")), ci->mid ? ID2SYM(ci->mid) : Qnil);
                                           ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2771:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("flag")), UINT2NUM(ci->flag));
                                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2771:30: note: '{' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("flag")), UINT2NUM(ci->flag));
                                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2771:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("flag")), UINT2NUM(ci->flag));
                                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2771:30: note: ')' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("flag")), UINT2NUM(ci->flag));
                                           ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2782:27: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                        rb_hash_aset(e, ID2SYM(rb_intern("kw_arg")), kw);
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2782:27: note: '{' token is here
                        rb_hash_aset(e, ID2SYM(rb_intern("kw_arg")), kw);
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2782:27: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                        rb_hash_aset(e, ID2SYM(rb_intern("kw_arg")), kw);
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2782:27: note: ')' token is here
                        rb_hash_aset(e, ID2SYM(rb_intern("kw_arg")), kw);
                                               ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2785:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("orig_argc")),
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2785:30: note: '{' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("orig_argc")),
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2785:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(e, ID2SYM(rb_intern("orig_argc")),
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2785:30: note: ')' token is here
                    rb_hash_aset(e, ID2SYM(rb_intern("orig_argc")),
                                           ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2829:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("func_ptr")), func_ptr);
                                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2829:46: note: '{' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("func_ptr")), func_ptr);
                                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2829:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("func_ptr")), func_ptr);
                                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2829:46: note: ')' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("func_ptr")), func_ptr);
                                             ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2830:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("argc")), INT2NUM(((RB_BUILTIN)*seq)->argc));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2830:46: note: '{' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("argc")), INT2NUM(((RB_BUILTIN)*seq)->argc));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2830:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("argc")), INT2NUM(((RB_BUILTIN)*seq)->argc));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2830:46: note: ')' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("argc")), INT2NUM(((RB_BUILTIN)*seq)->argc));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2831:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("index")), INT2NUM(((RB_BUILTIN)*seq)->index));
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2831:46: note: '{' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("index")), INT2NUM(((RB_BUILTIN)*seq)->index));
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2831:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("index")), INT2NUM(((RB_BUILTIN)*seq)->index));
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2831:46: note: ')' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("index")), INT2NUM(((RB_BUILTIN)*seq)->index));
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2832:46: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("name")), rb_str_new_cstr(((RB_BUILTIN)*seq)->name));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2832:46: note: '{' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("name")), rb_str_new_cstr(((RB_BUILTIN)*seq)->name));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2832:46: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                    rb_hash_aset(val, ID2SYM(rb_intern("name")), rb_str_new_cstr(((RB_BUILTIN)*seq)->name));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2832:46: note: ')' token is here
                    rb_hash_aset(val, ID2SYM(rb_intern("name")), rb_str_new_cstr(((RB_BUILTIN)*seq)->name));
                                             ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2888:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_LINE);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2888:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_LINE);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2888:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_LINE);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2888:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_LINE);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2889:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_CLASS);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2889:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_CLASS);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2889:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_CLASS);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2889:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_CLASS);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2890:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_END);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2890:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_END);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2890:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_END);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2890:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_END);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2891:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2891:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2891:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2891:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2892:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2892:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2892:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2892:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2893:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_B_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2893:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_B_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2893:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_B_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2893:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_B_CALL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2894:6: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_B_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2894:6: note: '{' token is here
            CHECK_EVENT(RUBY_EVENT_B_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2894:6: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            CHECK_EVENT(RUBY_EVENT_B_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2894:6: note: ')' token is here
            CHECK_EVENT(RUBY_EVENT_B_RETURN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iseq.c:2887:67: note: expanded from macro 'CHECK_EVENT'
#define CHECK_EVENT(ev) if (events & ev) rb_ary_push(body, ID2SYM(rb_intern(#ev)));
                                                                  ^~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2905:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("arg_size")), INT2FIX(iseq_body->param.size));
                              ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2905:31: note: '{' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("arg_size")), INT2FIX(iseq_body->param.size));
                              ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2905:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("arg_size")), INT2FIX(iseq_body->param.size));
                              ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2905:31: note: ')' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("arg_size")), INT2FIX(iseq_body->param.size));
                              ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2906:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("local_size")), INT2FIX(iseq_body->local_table_size));
                              ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2906:31: note: '{' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("local_size")), INT2FIX(iseq_body->local_table_size));
                              ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2906:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("local_size")), INT2FIX(iseq_body->local_table_size));
                              ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2906:31: note: ')' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("local_size")), INT2FIX(iseq_body->local_table_size));
                              ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2907:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("stack_max")), INT2FIX(iseq_body->stack_max));
                              ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2907:31: note: '{' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("stack_max")), INT2FIX(iseq_body->stack_max));
                              ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2907:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("stack_max")), INT2FIX(iseq_body->stack_max));
                              ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2907:31: note: ')' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("stack_max")), INT2FIX(iseq_body->stack_max));
                              ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2908:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("node_id")), INT2FIX(iseq_body->location.node_id));
                              ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2908:31: note: '{' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("node_id")), INT2FIX(iseq_body->location.node_id));
                              ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2908:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("node_id")), INT2FIX(iseq_body->location.node_id));
                              ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2908:31: note: ')' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("node_id")), INT2FIX(iseq_body->location.node_id));
                              ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2909:31: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("code_location")),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2909:31: note: '{' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("code_location")),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2909:31: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(misc, ID2SYM(rb_intern("code_location")),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:2909:31: note: ')' token is here
    rb_hash_aset(misc, ID2SYM(rb_intern("code_location")),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
iseq.c:3215:29: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (0) rb_funcall(Qnil, rb_intern("puts"), 1, rb_iseq_disasm(iseq)); /* for debug */
                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:3215:29: note: '{' token is here
    if (0) rb_funcall(Qnil, rb_intern("puts"), 1, rb_iseq_disasm(iseq)); /* for debug */
                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:3215:29: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (0) rb_funcall(Qnil, rb_intern("puts"), 1, rb_iseq_disasm(iseq)); /* for debug */
                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
iseq.c:3215:29: note: ')' token is here
    if (0) rb_funcall(Qnil, rb_intern("puts"), 1, rb_iseq_disasm(iseq)); /* for debug */
                            ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
173 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o load.o -c load.c
407 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o marshal.o -c marshal.c
load.c:693:5: warning: implicit declaration of function 'RUBY_DTRACE_LOAD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_HOOK(LOAD_ENTRY, RSTRING_PTR(orig_fname));
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:179:1: note: expanded from here
RUBY_DTRACE_LOAD_ENTRY_ENABLED
^
load.c:693:5: warning: implicit declaration of function 'RUBY_DTRACE_LOAD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:180:1: note: expanded from here
RUBY_DTRACE_LOAD_ENTRY
^
load.c:703:5: warning: implicit declaration of function 'RUBY_DTRACE_LOAD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_HOOK(LOAD_RETURN, RSTRING_PTR(orig_fname));
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:182:1: note: expanded from here
RUBY_DTRACE_LOAD_RETURN_ENABLED
^
load.c:703:5: warning: implicit declaration of function 'RUBY_DTRACE_LOAD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:183:1: note: expanded from here
RUBY_DTRACE_LOAD_RETURN
^
load.c:959:22: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        sym = ID2SYM(rb_intern("rb"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:959:22: note: '{' token is here
        sym = ID2SYM(rb_intern("rb"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:959:22: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        sym = ID2SYM(rb_intern("rb"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:959:22: note: ')' token is here
        sym = ID2SYM(rb_intern("rb"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:962:22: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        sym = ID2SYM(rb_intern("so"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:962:22: note: '{' token is here
        sym = ID2SYM(rb_intern("so"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:962:22: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        sym = ID2SYM(rb_intern("so"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:962:22: note: ')' token is here
        sym = ID2SYM(rb_intern("so"));
                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
load.c:992:5: warning: implicit declaration of function 'RUBY_DTRACE_REQUIRE_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_HOOK(REQUIRE_ENTRY, RSTRING_PTR(fname));
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:187:1: note: expanded from here
RUBY_DTRACE_REQUIRE_ENTRY_ENABLED
^
load.c:992:5: warning: implicit declaration of function 'RUBY_DTRACE_REQUIRE_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:188:1: note: expanded from here
RUBY_DTRACE_REQUIRE_ENTRY
^
load.c:1001:2: warning: implicit declaration of function 'RUBY_DTRACE_FIND_REQUIRE_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_HOOK(FIND_REQUIRE_ENTRY, RSTRING_PTR(fname));
        ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:190:1: note: expanded from here
RUBY_DTRACE_FIND_REQUIRE_ENTRY_ENABLED
^
load.c:1001:2: warning: implicit declaration of function 'RUBY_DTRACE_FIND_REQUIRE_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:191:1: note: expanded from here
RUBY_DTRACE_FIND_REQUIRE_ENTRY
^
load.c:1003:2: warning: implicit declaration of function 'RUBY_DTRACE_FIND_REQUIRE_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_HOOK(FIND_REQUIRE_RETURN, RSTRING_PTR(fname));
        ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:193:1: note: expanded from here
RUBY_DTRACE_FIND_REQUIRE_RETURN_ENABLED
^
load.c:1003:2: warning: implicit declaration of function 'RUBY_DTRACE_FIND_REQUIRE_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:194:1: note: expanded from here
RUBY_DTRACE_FIND_REQUIRE_RETURN
^
load.c:1060:5: warning: implicit declaration of function 'RUBY_DTRACE_REQUIRE_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_HOOK(REQUIRE_RETURN, RSTRING_PTR(fname));
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:196:1: note: expanded from here
RUBY_DTRACE_REQUIRE_RETURN_ENABLED
^
load.c:1060:5: warning: implicit declaration of function 'RUBY_DTRACE_REQUIRE_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:197:1: note: expanded from here
RUBY_DTRACE_REQUIRE_RETURN
^
16 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o math.o -c math.c
52 warnings generated.
+ echo #ifndef RUBY_MJIT_CONFIG_H
+ echo #define RUBY_MJIT_CONFIG_H 1
+ echo
+ sep=
+ echo #ifdef LOAD_RELATIVE
+ quote MJIT_HEADER_INSTALL_DIR /include/x86_64-linux-gnu/ruby-2.7.0
+ printf #define MJIT_HEADER_INSTALL_DIR
+ shift
+ printf  "%s" /include/x86_64-linux-gnu/ruby-2.7.0
+ echo
+ echo #else
+ quote MJIT_HEADER_INSTALL_DIR /usr/include/x86_64-linux-gnu/ruby-2.7.0
+ printf #define MJIT_HEADER_INSTALL_DIR
+ shift
+ printf  "%s" /usr/include/x86_64-linux-gnu/ruby-2.7.0
+ echo
+ echo #endif
+ quote MJIT_MIN_HEADER_NAME rb_mjit_min_header-2.7.4.h
+ printf #define MJIT_MIN_HEADER_NAME
+ shift
+ printf  "%s" rb_mjit_min_header-2.7.4.h
+ echo
+ sep=,
+ quote MJIT_CC_COMMON   /usr/bin/x86_64-linux-gnu-gcc
+ printf #define MJIT_CC_COMMON  
+ shift
+ printf  "%s", /usr/bin/x86_64-linux-gnu-gcc
+ echo
+ quote MJIT_CFLAGS      MJIT_ARCHFLAG -w
+ printf #define MJIT_CFLAGS      MJIT_ARCHFLAG
+ shift
+ printf  "%s", -w
+ echo
+ quote MJIT_OPTFLAGS    -O3
+ printf #define MJIT_OPTFLAGS   
+ shift
+ printf  "%s", -O3
+ echo
+ quote MJIT_DEBUGFLAGS  -ggdb3
+ printf #define MJIT_DEBUGFLAGS 
+ shift
+ printf  "%s", -ggdb3
+ echo
+ quote MJIT_LDSHARED    /usr/bin/x86_64-linux-gnu-gcc -shared
+ printf #define MJIT_LDSHARED   
+ shift
+ printf  "%s", /usr/bin/x86_64-linux-gnu-gcc -shared
+ echo
+ quote MJIT_DLDFLAGS    MJIT_ARCHFLAG -Wl,-z,relro -Wl,-z,now
+ printf #define MJIT_DLDFLAGS    MJIT_ARCHFLAG
+ shift
+ printf  "%s", -Wl,-z,relro -Wl,-z,now
+ echo
+ quote MJIT_LIBS        -lruby-2.7
+ printf #define MJIT_LIBS       
+ shift
+ printf  "%s", -lruby-2.7
+ echo
+ quote PRELOADENV       "LD_PRELOAD"
+ printf #define PRELOADENV       "LD_PRELOAD"
+ shift
+ 
+ echo
+ indent=
+ define_arch_flags
+ 
+ 
+ quote MJIT_ARCHFLAG    /* no flag */
+ printf #define MJIT_ARCHFLAG    /* no flag */
+ shift
+ 
+ echo
+ 
+ echo
+ echo #endif /* RUBY_MJIT_CONFIG_H */
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o mjit_compile.o -c mjit_compile.c
In file included from mjit_compile.c:19:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
58 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o node.o -c node.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o numeric.o -c numeric.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o object.o -c object.c
numeric.c:604:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(num_funcall1(x, '/', y), rb_intern("floor"), 0);
                                               ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
numeric.c:604:48: note: '{' token is here
    return rb_funcall(num_funcall1(x, '/', y), rb_intern("floor"), 0);
                                               ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
numeric.c:604:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(num_funcall1(x, '/', y), rb_intern("floor"), 0);
                                               ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
numeric.c:604:48: note: ')' token is here
    return rb_funcall(num_funcall1(x, '/', y), rb_intern("floor"), 0);
                                               ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
numeric.c:794:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (RTEST(num_funcall0(num, rb_intern("zero?")))) {
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
numeric.c:794:33: note: '{' token is here
    if (RTEST(num_funcall0(num, rb_intern("zero?")))) {
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
numeric.c:794:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (RTEST(num_funcall0(num, rb_intern("zero?")))) {
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
numeric.c:794:33: note: ')' token is here
    if (RTEST(num_funcall0(num, rb_intern("zero?")))) {
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:481:26: note: expanded from macro 'RTEST'
#define RTEST(v) RB_TEST(v)
                         ^
./include/ruby/ruby.h:479:31: note: expanded from macro 'RB_TEST'
#define RB_TEST(v) !(((VALUE)(v) & (VALUE)~RUBY_Qnil) == 0)
                              ^
numeric.c:1472:43: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (isinf(a) && (i = rb_check_funcall(y, rb_intern("infinite?"), 0, 0)) != Qundef) {
                                                 ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
numeric.c:1472:43: note: '{' token is here
        if (isinf(a) && (i = rb_check_funcall(y, rb_intern("infinite?"), 0, 0)) != Qundef) {
                                                 ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
numeric.c:1472:43: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (isinf(a) && (i = rb_check_funcall(y, rb_intern("infinite?"), 0, 0)) != Qundef) {
                                                 ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
numeric.c:1472:43: note: ')' token is here
        if (isinf(a) && (i = rb_check_funcall(y, rb_intern("infinite?"), 0, 0)) != Qundef) {
                                                 ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
object.c:2060:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (!rb_obj_respond_to(klass, rb_intern("allocate"), 1)) {
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
object.c:2060:35: note: '{' token is here
    if (!rb_obj_respond_to(klass, rb_intern("allocate"), 1)) {
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
object.c:2060:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (!rb_obj_respond_to(klass, rb_intern("allocate"), 1)) {
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
object.c:2060:35: note: ')' token is here
    if (!rb_obj_respond_to(klass, rb_intern("allocate"), 1)) {
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
object.c:2097:5: warning: implicit declaration of function 'RUBY_DTRACE_OBJECT_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(OBJECT, rb_class2name(klass));
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:115:1: note: expanded from here
RUBY_DTRACE_OBJECT_CREATE_ENABLED
^
object.c:2097:5: warning: implicit declaration of function 'RUBY_DTRACE_OBJECT_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:116:1: note: expanded from here
RUBY_DTRACE_OBJECT_CREATE
^
object.c:3126:28: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        conv_method_names[i].id : rb_intern(method);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
object.c:3126:28: note: '{' token is here
        conv_method_names[i].id : rb_intern(method);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
object.c:3126:28: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        conv_method_names[i].id : rb_intern(method);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
object.c:3126:28: note: ')' token is here
        conv_method_names[i].id : rb_intern(method);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o pack.o -c pack.c
6 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o parse.o -c parse.c
parse.y:6000:5: warning: implicit declaration of function 'RUBY_DTRACE_PARSE_BEGIN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_PARSE_HOOK(BEGIN);
    ^
parse.y:5997:9: note: expanded from macro 'RUBY_DTRACE_PARSE_HOOK'
    if (RUBY_DTRACE_PARSE_##name##_ENABLED()) { \
        ^
<scratch space>:221:1: note: expanded from here
RUBY_DTRACE_PARSE_BEGIN_ENABLED
^
parse.y:6000:5: warning: implicit declaration of function 'RUBY_DTRACE_PARSE_BEGIN' is invalid in C99 [-Wimplicit-function-declaration]
parse.y:5998:2: note: expanded from macro 'RUBY_DTRACE_PARSE_HOOK'
        RUBY_DTRACE_PARSE_##name(p->ruby_sourcefile, p->ruby_sourceline); \
        ^
<scratch space>:222:1: note: expanded from here
RUBY_DTRACE_PARSE_BEGIN
^
parse.y:6002:5: warning: implicit declaration of function 'RUBY_DTRACE_PARSE_END_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_PARSE_HOOK(END);
    ^
parse.y:5997:9: note: expanded from macro 'RUBY_DTRACE_PARSE_HOOK'
    if (RUBY_DTRACE_PARSE_##name##_ENABLED()) { \
        ^
<scratch space>:224:1: note: expanded from here
RUBY_DTRACE_PARSE_END_ENABLED
^
parse.y:6002:5: warning: implicit declaration of function 'RUBY_DTRACE_PARSE_END' is invalid in C99 [-Wimplicit-function-declaration]
parse.y:5998:2: note: expanded from macro 'RUBY_DTRACE_PARSE_HOOK'
        RUBY_DTRACE_PARSE_##name(p->ruby_sourcefile, p->ruby_sourceline); \
        ^
<scratch space>:225:1: note: expanded from here
RUBY_DTRACE_PARSE_END
^
parse.y:7839:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: '{' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: ')' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:50: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                 ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: '{' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: ')' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:29: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                            ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: '{' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: ')' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:22:71: note: expanded from macro 'rb_id2sym'
    RB_GNUC_EXTENSION_BLOCK(__builtin_constant_p(id) && !DYNAMIC_ID_P(id) ? \
                                                                      ^~
./symbol.h:17:48: note: expanded from macro 'DYNAMIC_ID_P'
#define DYNAMIC_ID_P(id) (!(id&ID_STATIC_SYM)&&id>tLAST_OP_ID)
                                               ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: '{' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: ')' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:22: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                          ^~
./symbol.h:18:38: note: expanded from macro 'STATIC_ID2SYM'
#define STATIC_ID2SYM(id)  (((VALUE)(id)<<RUBY_SPECIAL_SHIFT)|SYMBOL_FLAG)
                                     ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: '{' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:7839:44: note: ')' token is here
    rb_hash_aset(p->compile_option, ID2SYM(rb_intern(name)),
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
./symbol.h:23:38: note: expanded from macro 'rb_id2sym'
                            STATIC_ID2SYM(id) : rb_id2sym(id))
                                                          ^~
./include/ruby/defines.h:119:53: note: expanded from macro 'RB_GNUC_EXTENSION_BLOCK'
#define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
                                                    ^
parse.y:11123:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: note: '{' token is here
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
note: (skipping 5 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
note: (skipping 5 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: note: ')' token is here
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: note: '{' token is here
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
note: (skipping 5 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
note: (skipping 5 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:11123:47: note: ')' token is here
        return NEW_CALL(node, tEQ, NEW_LIST(NEW_GVAR(rb_intern("$."), loc), loc), loc);
                                                     ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:347:52: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                   ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:12295:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        NODE *print = NEW_FCALL(rb_intern("print"),
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:349:50: note: expanded from macro 'NEW_FCALL'
#define NEW_FCALL(m,a,loc) NEW_NODE(NODE_FCALL,0,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12295:26: note: '{' token is here
        NODE *print = NEW_FCALL(rb_intern("print"),
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:349:50: note: expanded from macro 'NEW_FCALL'
#define NEW_FCALL(m,a,loc) NEW_NODE(NODE_FCALL,0,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12295:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        NODE *print = NEW_FCALL(rb_intern("print"),
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:349:50: note: expanded from macro 'NEW_FCALL'
#define NEW_FCALL(m,a,loc) NEW_NODE(NODE_FCALL,0,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12295:26: note: ')' token is here
        NODE *print = NEW_FCALL(rb_intern("print"),
                                ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:349:50: note: expanded from macro 'NEW_FCALL'
#define NEW_FCALL(m,a,loc) NEW_NODE(NODE_FCALL,0,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12303:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: note: '{' token is here
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: note: ')' token is here
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:329:44: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: note: '{' token is here
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12303:37: note: ')' token is here
            NODE *args = NEW_LIST(NEW_GVAR(rb_intern("$;"), LOC), LOC);
                                           ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:329:64: note: expanded from macro 'NEW_GVAR'
#define NEW_GVAR(v,loc) NEW_NODE(NODE_GVAR,v,0,rb_global_entry(v),loc)
                                                               ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:312:44: note: expanded from macro 'NEW_LIST'
#define NEW_LIST(a,loc) NEW_NODE(NODE_LIST,a,1,0,loc)
                                           ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12304:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:316:50: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                 ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12304:30: note: '{' token is here
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:316:50: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                 ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12304:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:316:50: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                 ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12304:30: note: ')' token is here
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:316:50: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                 ^
./node.h:282:62: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                             ^~
parse.y:405:73: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                        ^~
parse.y:12306:11: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                             rb_intern("split"), args, LOC),
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:316:52: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                   ^~~
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12306:11: note: '{' token is here
                                             rb_intern("split"), args, LOC),
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:316:52: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                   ^~~
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12306:11: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                             rb_intern("split"), args, LOC),
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:316:52: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                   ^~~
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12306:11: note: ')' token is here
                                             rb_intern("split"), args, LOC),
                                             ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./node.h:316:52: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                   ^~~
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12304:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:316:72: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                                       ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:12304:30: note: '{' token is here
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:316:72: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                                       ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:12304:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:316:72: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                                       ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:12304:30: note: ')' token is here
            NODE *split = NEW_GASGN(rb_intern("$F"),
                                    ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:316:72: note: expanded from macro 'NEW_GASGN'
#define NEW_GASGN(v,val,loc) NEW_NODE(NODE_GASGN,v,val,rb_global_entry(v),loc)
                                                                       ^
./node.h:282:86: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                                     ^~
parse.y:405:85: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                                    ^~
parse.y:12312:8: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                   rb_intern("chomp!"), 0, LOC);
                                   ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12312:8: note: '{' token is here
                                   rb_intern("chomp!"), 0, LOC);
                                   ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12312:8: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                   rb_intern("chomp!"), 0, LOC);
                                   ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
parse.y:12312:8: note: ')' token is here
                                   rb_intern("chomp!"), 0, LOC);
                                   ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./node.h:347:50: note: expanded from macro 'NEW_CALL'
#define NEW_CALL(r,m,a,loc) NEW_NODE(NODE_CALL,r,m,a,loc)
                                                 ^
./node.h:282:74: note: expanded from macro 'NEW_NODE'
#define NEW_NODE(t,a0,a1,a2,loc) rb_node_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),loc)
                                                                         ^~
parse.y:405:79: note: expanded from macro 'rb_node_newnode'
#define rb_node_newnode(type, a1, a2, a3, loc) node_newnode(p, (type), (a1), (a2), (a3), (loc))
                                                                              ^~
6 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o proc.o -c proc.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o process.o -c process.c
1 warning generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o random.o -c random.c
proc.c:2878:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE req = ID2SYM(rb_intern("req"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2878:34: note: '{' token is here
        const VALUE req = ID2SYM(rb_intern("req"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2878:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE req = ID2SYM(rb_intern("req"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2878:34: note: ')' token is here
        const VALUE req = ID2SYM(rb_intern("req"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2879:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE opt = ID2SYM(rb_intern("opt"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2879:34: note: '{' token is here
        const VALUE opt = ID2SYM(rb_intern("opt"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2879:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE opt = ID2SYM(rb_intern("opt"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2879:34: note: ')' token is here
        const VALUE opt = ID2SYM(rb_intern("opt"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2880:37: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE keyreq = ID2SYM(rb_intern("keyreq"));
                                    ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2880:37: note: '{' token is here
        const VALUE keyreq = ID2SYM(rb_intern("keyreq"));
                                    ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2880:37: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE keyreq = ID2SYM(rb_intern("keyreq"));
                                    ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2880:37: note: ')' token is here
        const VALUE keyreq = ID2SYM(rb_intern("keyreq"));
                                    ^~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2881:34: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE key = ID2SYM(rb_intern("key"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2881:34: note: '{' token is here
        const VALUE key = ID2SYM(rb_intern("key"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2881:34: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE key = ID2SYM(rb_intern("key"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2881:34: note: ')' token is here
        const VALUE key = ID2SYM(rb_intern("key"));
                                 ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2882:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE rest = ID2SYM(rb_intern("rest"));
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2882:35: note: '{' token is here
        const VALUE rest = ID2SYM(rb_intern("rest"));
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2882:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE rest = ID2SYM(rb_intern("rest"));
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2882:35: note: ')' token is here
        const VALUE rest = ID2SYM(rb_intern("rest"));
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2883:38: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE keyrest = ID2SYM(rb_intern("keyrest"));
                                     ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2883:38: note: '{' token is here
        const VALUE keyrest = ID2SYM(rb_intern("keyrest"));
                                     ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2883:38: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE keyrest = ID2SYM(rb_intern("keyrest"));
                                     ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2883:38: note: ')' token is here
        const VALUE keyrest = ID2SYM(rb_intern("keyrest"));
                                     ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2884:36: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE block = ID2SYM(rb_intern("block"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2884:36: note: '{' token is here
        const VALUE block = ID2SYM(rb_intern("block"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2884:36: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE block = ID2SYM(rb_intern("block"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2884:36: note: ')' token is here
        const VALUE block = ID2SYM(rb_intern("block"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2885:36: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE nokey = ID2SYM(rb_intern("nokey"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2885:36: note: '{' token is here
        const VALUE nokey = ID2SYM(rb_intern("nokey"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2885:36: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        const VALUE nokey = ID2SYM(rb_intern("nokey"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
proc.c:2885:36: note: ')' token is here
        const VALUE nokey = ID2SYM(rb_intern("nokey"));
                                   ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o range.o -c range.c
range.c:1267:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        x = rb_check_funcall(range, rb_intern("exclude_end?"), 0, 0);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
range.c:1267:30: note: '{' token is here
        x = rb_check_funcall(range, rb_intern("exclude_end?"), 0, 0);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
range.c:1267:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        x = rb_check_funcall(range, rb_intern("exclude_end?"), 0, 0);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
range.c:1267:30: note: ')' token is here
        x = rb_check_funcall(range, rb_intern("exclude_end?"), 0, 0);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
range.c:1538:27: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(r, rb_intern("max"), 0, 0);
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
range.c:1538:27: note: '{' token is here
    return rb_funcallv(r, rb_intern("max"), 0, 0);
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
range.c:1538:27: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcallv(r, rb_intern("max"), 0, 0);
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
range.c:1538:27: note: ')' token is here
    return rb_funcallv(r, rb_intern("max"), 0, 0);
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
16 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o rational.o -c rational.c
rational.c:1074:40: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_bin(self, other, rb_intern("**"));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
rational.c:1074:40: note: '{' token is here
        return rb_num_coerce_bin(self, other, rb_intern("**"));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
rational.c:1074:40: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_bin(self, other, rb_intern("**"));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
rational.c:1074:40: note: ')' token is here
        return rb_num_coerce_bin(self, other, rb_intern("**"));
                                              ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
rational.c:1132:40: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_cmp(self, other, rb_intern("<=>"));
                                              ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
rational.c:1132:40: note: '{' token is here
        return rb_num_coerce_cmp(self, other, rb_intern("<=>"));
                                              ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
rational.c:1132:40: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        return rb_num_coerce_cmp(self, other, rb_intern("<=>"));
                                              ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
rational.c:1132:40: note: ')' token is here
        return rb_num_coerce_cmp(self, other, rb_intern("<=>"));
                                              ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
rational.c:1615:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(x, id_ceil, 0);
                         ^~~~~~~
rational.c:1606:17: note: expanded from macro 'id_ceil'
#define id_ceil rb_intern("ceil")
                ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:1615:26: note: '{' token is here
    return rb_funcall(x, id_ceil, 0);
                         ^~~~~~~
rational.c:1606:17: note: expanded from macro 'id_ceil'
#define id_ceil rb_intern("ceil")
                ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:1615:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_funcall(x, id_ceil, 0);
                         ^~~~~~~
rational.c:1606:17: note: expanded from macro 'id_ceil'
#define id_ceil rb_intern("ceil")
                ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:1615:26: note: ')' token is here
    return rb_funcall(x, id_ceil, 0);
                         ^~~~~~~
rational.c:1606:17: note: expanded from macro 'id_ceil'
#define id_ceil rb_intern("ceil")
                ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2001:12: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return f_numerator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1984:40: note: expanded from macro 'f_numerator'
#define f_numerator(x) rb_funcall((x), id_numerator, 0)
                                       ^~~~~~~~~~~~
rational.c:1983:22: note: expanded from macro 'id_numerator'
#define id_numerator rb_intern("numerator")
                     ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2001:12: note: '{' token is here
    return f_numerator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1984:40: note: expanded from macro 'f_numerator'
#define f_numerator(x) rb_funcall((x), id_numerator, 0)
                                       ^~~~~~~~~~~~
rational.c:1983:22: note: expanded from macro 'id_numerator'
#define id_numerator rb_intern("numerator")
                     ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2001:12: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return f_numerator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1984:40: note: expanded from macro 'f_numerator'
#define f_numerator(x) rb_funcall((x), id_numerator, 0)
                                       ^~~~~~~~~~~~
rational.c:1983:22: note: expanded from macro 'id_numerator'
#define id_numerator rb_intern("numerator")
                     ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2001:12: note: ')' token is here
    return f_numerator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1984:40: note: expanded from macro 'f_numerator'
#define f_numerator(x) rb_funcall((x), id_numerator, 0)
                                       ^~~~~~~~~~~~
rational.c:1983:22: note: expanded from macro 'id_numerator'
#define id_numerator rb_intern("numerator")
                     ^~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2013:12: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return f_denominator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1987:42: note: expanded from macro 'f_denominator'
#define f_denominator(x) rb_funcall((x), id_denominator, 0)
                                         ^~~~~~~~~~~~~~
rational.c:1986:24: note: expanded from macro 'id_denominator'
#define id_denominator rb_intern("denominator")
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2013:12: note: '{' token is here
    return f_denominator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1987:42: note: expanded from macro 'f_denominator'
#define f_denominator(x) rb_funcall((x), id_denominator, 0)
                                         ^~~~~~~~~~~~~~
rational.c:1986:24: note: expanded from macro 'id_denominator'
#define id_denominator rb_intern("denominator")
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2013:12: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return f_denominator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1987:42: note: expanded from macro 'f_denominator'
#define f_denominator(x) rb_funcall((x), id_denominator, 0)
                                         ^~~~~~~~~~~~~~
rational.c:1986:24: note: expanded from macro 'id_denominator'
#define id_denominator rb_intern("denominator")
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
rational.c:2013:12: note: ')' token is here
    return f_denominator(f_to_r(self));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
rational.c:1987:42: note: expanded from macro 'f_denominator'
#define f_denominator(x) rb_funcall((x), id_denominator, 0)
                                         ^~~~~~~~~~~~~~
rational.c:1986:24: note: expanded from macro 'id_denominator'
#define id_denominator rb_intern("denominator")
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
4 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o re.o -c re.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regcomp.o -c regcomp.c
10 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regenc.o -c regenc.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regerror.o -c regerror.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regexec.o -c regexec.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regparse.o -c regparse.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o regsyntax.o -c regsyntax.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o ruby.o -c ruby.c
In file included from ruby.c:55:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
ruby.c:961:20: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_funcall(ename, rb_intern("casecmp"), 1, *name) != INT2FIX(0)) {
                          ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ruby.c:961:20: note: '{' token is here
        rb_funcall(ename, rb_intern("casecmp"), 1, *name) != INT2FIX(0)) {
                          ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ruby.c:961:20: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_funcall(ename, rb_intern("casecmp"), 1, *name) != INT2FIX(0)) {
                          ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ruby.c:961:20: note: ')' token is here
        rb_funcall(ename, rb_intern("casecmp"), 1, *name) != INT2FIX(0)) {
                          ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
ruby.c:1522:56: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("sub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
ruby.c:1522:56: note: '{' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("sub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
ruby.c:1522:56: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("sub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
ruby.c:1522:56: note: ')' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("sub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ruby.c:1541:56: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("gsub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
ruby.c:1541:56: note: '{' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("gsub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
ruby.c:1541:56: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("gsub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
ruby.c:1541:56: note: ')' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("gsub"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ruby.c:1559:56: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chop"), 0, 0);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
ruby.c:1559:56: note: '{' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chop"), 0, 0);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
ruby.c:1559:56: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chop"), 0, 0);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
ruby.c:1559:56: note: ')' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chop"), 0, 0);
                                                       ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ruby.c:1579:56: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chomp"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
ruby.c:1579:56: note: '{' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chomp"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
ruby.c:1579:56: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chomp"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
ruby.c:1579:56: note: ')' token is here
    VALUE str = rb_funcall_passing_block(uscore_get(), rb_intern("chomp"), argc, argv);
                                                       ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
ruby.c:1901:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        GetBindingPtr(rb_const_get(rb_cObject, rb_intern("TOPLEVEL_BINDING")),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./vm_core.h:1066:25: note: expanded from macro 'GetBindingPtr'
  GetCoreDataFromValue((obj), rb_binding_t, (ptr))
                        ^~~
./vm_core.h:270:74: note: expanded from macro 'GetCoreDataFromValue'
#define GetCoreDataFromValue(obj, type, ptr) ((ptr) = CoreDataFromValue((obj), type))
                                                                         ^~~
./vm_core.h:266:54: note: expanded from macro 'CoreDataFromValue'
#define CoreDataFromValue(obj, type) (type*)DATA_PTR(obj)
                                                     ^~~
./include/ruby/ruby.h:1175:30: note: expanded from macro 'DATA_PTR'
#define DATA_PTR(dta) (RDATA(dta)->data)
                             ^~~
./include/ruby/ruby.h:1274:37: note: expanded from macro 'RDATA'
#define RDATA(obj)   (R_CAST(RData)(obj))
                                    ^~~
ruby.c:1901:48: note: '{' token is here
        GetBindingPtr(rb_const_get(rb_cObject, rb_intern("TOPLEVEL_BINDING")),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./vm_core.h:1066:25: note: expanded from macro 'GetBindingPtr'
  GetCoreDataFromValue((obj), rb_binding_t, (ptr))
                        ^~~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./vm_core.h:266:54: note: expanded from macro 'CoreDataFromValue'
#define CoreDataFromValue(obj, type) (type*)DATA_PTR(obj)
                                                     ^~~
./include/ruby/ruby.h:1175:30: note: expanded from macro 'DATA_PTR'
#define DATA_PTR(dta) (RDATA(dta)->data)
                             ^~~
./include/ruby/ruby.h:1274:37: note: expanded from macro 'RDATA'
#define RDATA(obj)   (R_CAST(RData)(obj))
                                    ^~~
ruby.c:1901:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        GetBindingPtr(rb_const_get(rb_cObject, rb_intern("TOPLEVEL_BINDING")),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./vm_core.h:1066:25: note: expanded from macro 'GetBindingPtr'
  GetCoreDataFromValue((obj), rb_binding_t, (ptr))
                        ^~~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./vm_core.h:266:54: note: expanded from macro 'CoreDataFromValue'
#define CoreDataFromValue(obj, type) (type*)DATA_PTR(obj)
                                                     ^~~
./include/ruby/ruby.h:1175:30: note: expanded from macro 'DATA_PTR'
#define DATA_PTR(dta) (RDATA(dta)->data)
                             ^~~
./include/ruby/ruby.h:1274:37: note: expanded from macro 'RDATA'
#define RDATA(obj)   (R_CAST(RData)(obj))
                                    ^~~
ruby.c:1901:48: note: ')' token is here
        GetBindingPtr(rb_const_get(rb_cObject, rb_intern("TOPLEVEL_BINDING")),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./vm_core.h:1066:25: note: expanded from macro 'GetBindingPtr'
  GetCoreDataFromValue((obj), rb_binding_t, (ptr))
                        ^~~
./vm_core.h:270:74: note: expanded from macro 'GetCoreDataFromValue'
#define GetCoreDataFromValue(obj, type, ptr) ((ptr) = CoreDataFromValue((obj), type))
                                                                         ^~~
./vm_core.h:266:54: note: expanded from macro 'CoreDataFromValue'
#define CoreDataFromValue(obj, type) (type*)DATA_PTR(obj)
                                                     ^~~
./include/ruby/ruby.h:1175:30: note: expanded from macro 'DATA_PTR'
#define DATA_PTR(dta) (RDATA(dta)->data)
                             ^~~
./include/ruby/ruby.h:1274:37: note: expanded from macro 'RDATA'
#define RDATA(obj)   (R_CAST(RData)(obj))
                                    ^~~
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o safe.o -c safe.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o signal.o -c signal.c
13 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o sprintf.o -c sprintf.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o st.o -c st.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o strftime.o -c strftime.c
strftime.c:492:45: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                VALUE sec = div(timev, INT2FIX(1));
                                            ^~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:492:45: note: '{' token is here
                                VALUE sec = div(timev, INT2FIX(1));
                                            ^~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:492:45: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                VALUE sec = div(timev, INT2FIX(1));
                                            ^~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:492:45: note: ')' token is here
                                VALUE sec = div(timev, INT2FIX(1));
                                            ^~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:544:48: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                off = NUM2LONG(rb_funcall(vtm->utc_offset, rb_intern("round"), 0));
                                                                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
strftime.c:544:48: note: '{' token is here
                                off = NUM2LONG(rb_funcall(vtm->utc_offset, rb_intern("round"), 0));
                                                                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
strftime.c:544:48: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                off = NUM2LONG(rb_funcall(vtm->utc_offset, rb_intern("round"), 0));
                                                                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
strftime.c:544:48: note: ')' token is here
                                off = NUM2LONG(rb_funcall(vtm->utc_offset, rb_intern("round"), 0));
                                                                           ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
./include/ruby/ruby.h:679:33: note: expanded from macro 'NUM2LONG'
#define NUM2LONG(x) RB_NUM2LONG(x)
                                ^
./include/ruby/ruby.h:678:43: note: expanded from macro 'RB_NUM2LONG'
#define RB_NUM2LONG(x) rb_num2long_inline(x)
                                          ^
strftime.c:706:43: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                        FMTV('0', 2, "d", div(vtm->year, INT2FIX(100)));
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:340:38: note: expanded from macro 'FMTV'
                        VALUE tmp = (val); \
                                     ^~~
strftime.c:706:43: note: '{' token is here
                        FMTV('0', 2, "d", div(vtm->year, INT2FIX(100)));
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:340:38: note: expanded from macro 'FMTV'
                        VALUE tmp = (val); \
                                     ^~~
strftime.c:706:43: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                        FMTV('0', 2, "d", div(vtm->year, INT2FIX(100)));
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:340:38: note: expanded from macro 'FMTV'
                        VALUE tmp = (val); \
                                     ^~~
strftime.c:706:43: note: ')' token is here
                        FMTV('0', 2, "d", div(vtm->year, INT2FIX(100)));
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:340:38: note: expanded from macro 'FMTV'
                        VALUE tmp = (val); \
                                     ^~~
strftime.c:820:42: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                subsec = div(subsec, INT2FIX(1));
                                         ^~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:820:42: note: '{' token is here
                                subsec = div(subsec, INT2FIX(1));
                                         ^~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:820:42: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
                                subsec = div(subsec, INT2FIX(1));
                                         ^~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
strftime.c:820:42: note: ')' token is here
                                subsec = div(subsec, INT2FIX(1));
                                         ^~~~~~~~~~~~~~~~~~~~~~~
strftime.c:155:35: note: expanded from macro 'div'
#define div(x,y) (rb_funcall((x), rb_intern("div"), 1, (y)))
                                  ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o string.o -c string.c
32 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o struct.o -c struct.c
string.c:735:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(STRING, 0);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:148:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE_ENABLED
^
string.c:735:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:149:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE
^
string.c:748:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(STRING, len);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:152:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE_ENABLED
^
string.c:748:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:153:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE
^
string.c:859:2: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_CREATE_HOOK(STRING, len);
        ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:156:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE_ENABLED
^
string.c:859:2: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:157:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE
^
string.c:1524:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(STRING, RSTRING_LEN(str));
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:107:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE_ENABLED
^
string.c:1524:5: warning: implicit declaration of function 'RUBY_DTRACE_STRING_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:108:1: note: expanded from here
RUBY_DTRACE_STRING_CREATE
^
string.c:3846:39: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    result = rb_funcallv(get_pat(re), rb_intern("match"), argc, argv);
                                      ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
string.c:3846:39: note: '{' token is here
    result = rb_funcallv(get_pat(re), rb_intern("match"), argc, argv);
                                      ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
string.c:3846:39: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    result = rb_funcallv(get_pat(re), rb_intern("match"), argc, argv);
                                      ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
string.c:3846:39: note: ')' token is here
    result = rb_funcallv(get_pat(re), rb_intern("match"), argc, argv);
                                      ^~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
struct.c:543:23: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[0] = rb_intern("keyword_init");
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
struct.c:543:23: note: '{' token is here
            keyword_ids[0] = rb_intern("keyword_init");
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
struct.c:543:23: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            keyword_ids[0] = rb_intern("keyword_init");
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
struct.c:543:23: note: ')' token is here
            keyword_ids[0] = rb_intern("keyword_init");
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o symbol.o -c symbol.c
symbol.c:468:5: warning: implicit declaration of function 'RUBY_DTRACE_SYMBOL_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(SYMBOL, RSTRING_PTR(str));
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:102:1: note: expanded from here
RUBY_DTRACE_SYMBOL_CREATE_ENABLED
^
symbol.c:468:5: warning: implicit declaration of function 'RUBY_DTRACE_SYMBOL_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:103:1: note: expanded from here
RUBY_DTRACE_SYMBOL_CREATE
^
symbol.c:536:5: warning: implicit declaration of function 'RUBY_DTRACE_SYMBOL_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(SYMBOL, RSTRING_PTR(RSYMBOL(dsym)->fstr));
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:116:1: note: expanded from here
RUBY_DTRACE_SYMBOL_CREATE_ENABLED
^
symbol.c:536:5: warning: implicit declaration of function 'RUBY_DTRACE_SYMBOL_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:117:1: note: expanded from here
RUBY_DTRACE_SYMBOL_CREATE
^
2 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o thread.o -c thread.c
8 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o time.o -c time.c
In file included from thread.c:77:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
time.c:2337:27: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (arg == ID2SYM(rb_intern("dst")))
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2337:27: note: '{' token is here
        if (arg == ID2SYM(rb_intern("dst")))
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2337:27: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        if (arg == ID2SYM(rb_intern("dst")))
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2337:27: note: ')' token is here
        if (arg == ID2SYM(rb_intern("dst")))
                          ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33:4 warnings generated.
 note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2339:32: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        else if (arg == ID2SYM(rb_intern("std")))
                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2339:32: note: '{' token is here
        else if (arg == ID2SYM(rb_intern("std")))
                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2339:32: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        else if (arg == ID2SYM(rb_intern("std")))
                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
time.c:2339:32: note: ')' token is here
        else if (arg == ID2SYM(rb_intern("std")))
                               ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:414:29: note: expanded from macro 'ID2SYM'
#define ID2SYM(x) RB_ID2SYM(x)
                            ^
./include/ruby/ruby.h:409:33: note: expanded from macro 'RB_ID2SYM'
#define RB_ID2SYM(x) (rb_id2sym(x))
                                ^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o transcode.o -c transcode.c
time.c:5662:18: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
time.c:5662:18: note: '{' token is here
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
time.c:5662:18: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
time.c:5662:18: note: ')' token is here
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
time.c:5662:40: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
time.c:5662:40: note: '{' token is here
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
time.c:5662:40: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
time.c:5662:40: note: ')' token is here
    rb_alias(tm, rb_intern("to_time"), rb_intern("utc"));
                                       ^~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
time.c:5678:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    abbr = rb_check_funcall(zone, rb_intern("abbr"), 1, &tm);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
time.c:5678:35: note: '{' token is here
    abbr = rb_check_funcall(zone, rb_intern("abbr"), 1, &tm);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
time.c:5678:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    abbr = rb_check_funcall(zone, rb_intern("abbr"), 1, &tm);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
time.c:5678:35: note: ')' token is here
    abbr = rb_check_funcall(zone, rb_intern("abbr"), 1, &tm);
                                  ^~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
time.c:5691:35: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    abbr = rb_check_funcall(zone, rb_intern("strftime"), 2, strftime_args);
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
time.c:5691:35: note: '{' token is here
    abbr = rb_check_funcall(zone, rb_intern("strftime"), 2, strftime_args);
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
time.c:5691:35: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    abbr = rb_check_funcall(zone, rb_intern("strftime"), 2, strftime_args);
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
time.c:5691:35: note: ')' token is here
    abbr = rb_check_funcall(zone, rb_intern("strftime"), 2, strftime_args);
                                  ^~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2063:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("error_bytes"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2063:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("error_bytes"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2063:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("error_bytes"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2063:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("error_bytes"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2064:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("readagain_bytes"), bytes2);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2064:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("readagain_bytes"), bytes2);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2064:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("readagain_bytes"), bytes2);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2064:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("readagain_bytes"), bytes2);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2065:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("incomplete_input"), ec->last_error.result == econv_incomplete_input ? Qtrue : Qfalse);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2065:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("incomplete_input"), ec->last_error.result == econv_incomplete_input ? Qtrue : Qfalse);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2065:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("incomplete_input"), ec->last_error.result == econv_incomplete_input ? Qtrue : Qfalse);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2065:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("incomplete_input"), ec->last_error.result == econv_incomplete_input ? Qtrue : Qfalse);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2068:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("source_encoding_name"), rb_str_new2(ec->last_error.source_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2068:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("source_encoding_name"), rb_str_new2(ec->last_error.source_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2068:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("source_encoding_name"), rb_str_new2(ec->last_error.source_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2068:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("source_encoding_name"), rb_str_new2(ec->last_error.source_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2069:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("destination_encoding_name"), rb_str_new2(ec->last_error.destination_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2069:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("destination_encoding_name"), rb_str_new2(ec->last_error.destination_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2069:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("destination_encoding_name"), rb_str_new2(ec->last_error.destination_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2069:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("destination_encoding_name"), rb_str_new2(ec->last_error.destination_encoding));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2072:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ivar_set(exc, rb_intern("source_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2072:30: note: '{' token is here
            rb_ivar_set(exc, rb_intern("source_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2072:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ivar_set(exc, rb_intern("source_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2072:30: note: ')' token is here
            rb_ivar_set(exc, rb_intern("source_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2075:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ivar_set(exc, rb_intern("destination_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2075:30: note: '{' token is here
            rb_ivar_set(exc, rb_intern("destination_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2075:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
            rb_ivar_set(exc, rb_intern("destination_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2075:30: note: ')' token is here
            rb_ivar_set(exc, rb_intern("destination_encoding"), rb_enc_from_encoding(rb_enc_from_index(idx)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:2124:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("error_char"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:2124:26: note: '{' token is here
        rb_ivar_set(exc, rb_intern("error_char"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:2124:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
        rb_ivar_set(exc, rb_intern("error_char"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:2124:26: note: ')' token is here
        rb_ivar_set(exc, rb_intern("error_char"), bytes);
                         ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4243:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("source_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4243:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("source_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4243:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("source_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4243:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("source_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4269:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("source_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4269:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("source_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4269:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("source_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4269:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("source_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4281:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("destination_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4281:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("destination_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4281:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("destination_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4281:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("destination_encoding_name"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4293:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("destination_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4293:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("destination_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4293:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("destination_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4293:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("destination_encoding"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4314:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("error_char"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4314:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("error_char"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4314:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("error_char"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4314:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("error_char"));
                             ^~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4335:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("error_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4335:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("error_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4335:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("error_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4335:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("error_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4347:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("readagain_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4347:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("readagain_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4347:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("readagain_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4347:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("readagain_bytes"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
transcode.c:4377:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("incomplete_input"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
transcode.c:4377:30: note: '{' token is here
    return rb_attr_get(self, rb_intern("incomplete_input"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
transcode.c:4377:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    return rb_attr_get(self, rb_intern("incomplete_input"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
transcode.c:4377:30: note: ')' token is here
    return rb_attr_get(self, rb_intern("incomplete_input"));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
32 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o transient_heap.o -c transient_heap.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o util.o -c util.c
1 warning generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o variable.o -c variable.c
12 warnings generated.
variable.c:445:30: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (name[0] == '$') id = rb_intern(name);
                             ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
variable.c:445:30: note: '{' token is here
    if (name[0] == '$') id = rb_intern(name);
                             ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
variable.c:445:30: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    if (name[0] == '$') id = rb_intern(name);
                             ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
variable.c:445:30: note: ')' token is here
    if (name[0] == '$') id = rb_intern(name);
                             ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
: > revision.tmp
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o vm.o -c vm.c
variable.c:2144:50: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    state->result = rb_funcall(rb_vm_top_self(), rb_intern("require"), 1,
                                                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
variable.c:2144:50: note: '{' token is here
    state->result = rb_funcall(rb_vm_top_self(), rb_intern("require"), 1,
                                                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
variable.c:2144:50: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    state->result = rb_funcall(rb_vm_top_self(), rb_intern("require"), 1,
                                                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
variable.c:2144:50: note: ')' token is here
    state->result = rb_funcall(rb_vm_top_self(), rb_intern("require"), 1,
                                                 ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
variable.c:2893:13: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
variable.c:2893:13: note: '{' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
variable.c:2893:13: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
variable.c:2893:13: note: ')' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
variable.c:3133:13: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
variable.c:3133:13: note: '{' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
variable.c:3133:13: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
variable.c:3133:13: note: ')' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
variable.c:3320:13: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
variable.c:3320:13: note: '{' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
variable.c:3320:13: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
variable.c:3320:13: note: ')' token is here
    ID id = rb_intern(name);
            ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
In file included from vm.c:341:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from vm.c:344:
./vm_insnhelper.c:2504:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CMETHOD_ENTRY_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:37:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:44:1: note: expanded from here
RUBY_DTRACE_CMETHOD_ENTRY_ENABLED
^
In file included from vm.c:344:
./vm_insnhelper.c:2504:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:37:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:45:1: note: expanded from here
RUBY_DTRACE_CMETHOD_ENTRY
^
In file included from vm.c:344:
./vm_insnhelper.c:2521:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CMETHOD_RETURN_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:47:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN_ENABLED
^
In file included from vm.c:344:
./vm_insnhelper.c:2521:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:48:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN
^
In file included from vm.c:344:
./vm_insnhelper.c:3728:9: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    if (RUBY_DTRACE_METHOD_ENTRY_ENABLED() ||
        ^
./vm_insnhelper.c:3729:2: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_METHOD_RETURN_ENABLED() ||
        ^
./vm_insnhelper.c:3730:2: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_CMETHOD_ENTRY_ENABLED() ||
        ^
./vm_insnhelper.c:3731:2: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_CMETHOD_RETURN_ENABLED()) {
        ^
./vm_insnhelper.c:3735:6: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
            RUBY_DTRACE_METHOD_ENTRY_HOOK(ec, 0, 0);
            ^
./probes_helper.h:31:5: note: expanded from macro 'RUBY_DTRACE_METHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:67:1: note: expanded from here
RUBY_DTRACE_METHOD_ENTRY
^
In file included from vm.c:344:
./vm_insnhelper.c:3738:6: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
            RUBY_DTRACE_CMETHOD_ENTRY_HOOK(ec, 0, 0);
            ^
./probes_helper.h:37:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:70:1: note: expanded from here
RUBY_DTRACE_CMETHOD_ENTRY
^
In file included from vm.c:344:
./vm_insnhelper.c:3741:6: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
            RUBY_DTRACE_METHOD_RETURN_HOOK(ec, 0, 0);
            ^
./probes_helper.h:34:5: note: expanded from macro 'RUBY_DTRACE_METHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:73:1: note: expanded from here
RUBY_DTRACE_METHOD_RETURN
^
In file included from vm.c:344:
./vm_insnhelper.c:3744:6: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
            RUBY_DTRACE_CMETHOD_RETURN_HOOK(ec, 0, 0);
            ^
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:76:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:471:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(ARRAY, RARRAY_LEN(ary));
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:125:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE_ENABLED
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:471:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:126:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:482:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(HASH, RHASH_SIZE(hash) << 1);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:140:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE_ENABLED
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:482:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:141:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:537:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(HASH, num);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:188:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE_ENABLED
^
In file included from vm.c:348:
In file included from ./vm_exec.c:124:
insns.def:537:5: warning: implicit declaration of function 'RUBY_DTRACE_HASH_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:189:1: note: expanded from here
RUBY_DTRACE_HASH_CREATE
^
In file included from vm.c:350:
./vm_method.c:98:2: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_CACHE_CLEAR_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
        RUBY_DTRACE_HOOK(METHOD_CACHE_CLEAR, (global ? "global" : rb_class2name(klass)));
        ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:93:1: note: expanded from here
RUBY_DTRACE_METHOD_CACHE_CLEAR_ENABLED
^
In file included from vm.c:350:
./vm_method.c:98:2: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_CACHE_CLEAR' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:94:1: note: expanded from here
RUBY_DTRACE_METHOD_CACHE_CLEAR
^
In file included from vm.c:350:
./vm_method.c:291:32: warning: cast to smaller integer type 'enum method_optimized_type' from 'void *' [-Wvoid-pointer-to-enum-cast]
            def->body.optimize_type = (enum method_optimized_type)opts;
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vm_method.c:1044:26: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    remove_method(klass, rb_intern(name));
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./vm_method.c:1044:26: note: '{' token is here
    remove_method(klass, rb_intern(name));
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
In file included from vm.c:350:
./vm_method.c:1044:26: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    remove_method(klass, rb_intern(name));
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./vm_method.c:1044:26: note: ')' token is here
    remove_method(klass, rb_intern(name));
                         ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
In file included from vm.c:352:
./vm_eval.c:80:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CMETHOD_ENTRY_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:37:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:96:1: note: expanded from here
RUBY_DTRACE_CMETHOD_ENTRY_ENABLED
^
In file included from vm.c:352:
./vm_eval.c:80:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:37:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:97:1: note: expanded from here
RUBY_DTRACE_CMETHOD_ENTRY
^
In file included from vm.c:352:
./vm_eval.c:97:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CMETHOD_RETURN_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:99:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN_ENABLED
^
In file included from vm.c:352:
./vm_eval.c:97:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:100:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN
^
vm.c:597:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CMETHOD_RETURN_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:143:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN_ENABLED
^
vm.c:597:5: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:144:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN
^
vm.c:1065:5: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_ENTRY_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_METHOD_ENTRY_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:31:5: note: expanded from macro 'RUBY_DTRACE_METHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:28:1: note: expanded from here
RUBY_DTRACE_METHOD_ENTRY_ENABLED
^
vm.c:1065:5: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_ENTRY' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:31:5: note: expanded from macro 'RUBY_DTRACE_METHOD_ENTRY_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_ENTRY, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:29:1: note: expanded from here
RUBY_DTRACE_METHOD_ENTRY
^
vm.c:1082:5: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_METHOD_RETURN_HOOK(ec, me->owner, me->def->original_id);
    ^
./probes_helper.h:34:5: note: expanded from macro 'RUBY_DTRACE_METHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:31:1: note: expanded from here
RUBY_DTRACE_METHOD_RETURN_ENABLED
^
vm.c:1082:5: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:34:5: note: expanded from macro 'RUBY_DTRACE_METHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:32:1: note: expanded from here
RUBY_DTRACE_METHOD_RETURN
^
vm.c:1764:13: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
            RUBY_DTRACE_METHOD_RETURN_HOOK(ec, 0, 0);
            ^
./probes_helper.h:34:5: note: expanded from macro 'RUBY_DTRACE_METHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:148:1: note: expanded from here
RUBY_DTRACE_METHOD_RETURN_ENABLED
^
vm.c:1764:13: warning: implicit declaration of function 'RUBY_DTRACE_METHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:34:5: note: expanded from macro 'RUBY_DTRACE_METHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(METHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:149:1: note: expanded from here
RUBY_DTRACE_METHOD_RETURN
^
vm.c:1966:3: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
                RUBY_DTRACE_CMETHOD_RETURN_HOOK(ec,
                ^
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:19:18: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:151:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN_ENABLED
^
vm.c:1966:3: warning: implicit declaration of function 'RUBY_DTRACE_CMETHOD_RETURN' is invalid in C99 [-Wimplicit-function-declaration]
./probes_helper.h:40:5: note: expanded from macro 'RUBY_DTRACE_CMETHOD_RETURN_HOOK'
    RUBY_DTRACE_METHOD_HOOK(CMETHOD_RETURN, ec, klass, id)
    ^
./probes_helper.h:22:6: note: expanded from macro 'RUBY_DTRACE_METHOD_HOOK'
            RUBY_DTRACE_##name(args.classname, \
            ^
<scratch space>:152:1: note: expanded from here
RUBY_DTRACE_CMETHOD_RETURN
^
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o vm_backtrace.o -c vm_backtrace.c
10 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o vm_dump.o -c vm_dump.c
10 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o vm_trace.o -c vm_trace.c
In file included from vm_trace.c:28:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
vm_trace.c:1143:40: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE iseqv = rb_funcall(rb_cISeq, rb_intern("of"), 1, target);
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
vm_trace.c:1143:40: note: '{' token is here
    VALUE iseqv = rb_funcall(rb_cISeq, rb_intern("of"), 1, target);
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
vm_trace.c:1143:40: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    VALUE iseqv = rb_funcall(rb_cISeq, rb_intern("of"), 1, target);
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
vm_trace.c:1143:40: note: ')' token is here
    VALUE iseqv = rb_funcall(rb_cISeq, rb_intern("of"), 1, target);
                                       ^~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./include/ruby/ruby.h:2689:27: note: expanded from macro 'rb_funcall'
        rb_funcallv(recv, mid, \
                          ^~~
./internal.h:2417:54: note: expanded from macro 'rb_funcallv'
        rb_funcallv_with_cc(&rb_funcallv_data, recv, mid, argc, argv); \
                                                     ^~~
/bin/mkdir -p coroutine/amd64
rm -f probes.o
dtrace  -G -C -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -s ./probes.d -o probes.o 
/bin/mkdir -p enc/trans .ext/.timestamp
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o setproctitle.o -c ./missing/setproctitle.c
# 1 "./probes.d"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 341 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./probes.d" 2

# 1 "./vm_opts.h" 1
# 3 "./probes.d" 2

provider ruby {
# 15 "./probes.d"
  probe method__entry(const char *classname, const char *methodname, const char *filename, int lineno);






  probe method__return(const char *classname, const char *methodname, const char *filename, int lineno);







  probe cmethod__entry(const char *classname, const char *methodname, const char *filename, int lineno);






  probe cmethod__return(const char *classname, const char *methodname, const char *filename, int lineno);
# 49 "./probes.d"
  probe require__entry(const char *rquiredfile, const char *filename, int lineno);
# 58 "./probes.d"
  probe require__return(const char *requiredfile, const char *filename, int lineno);
# 72 "./probes.d"
  probe find__require__entry(const char *requiredfile, const char *filename, int lineno);
# 81 "./probes.d"
  probe find__require__return(const char *requiredfile, const char *filename, int lineno);







  probe load__entry(const char *loadedfile, const char *filename, int lineno);







  probe load__return(const char *loadedfile, const char *filename, int lineno);
# 108 "./probes.d"
  probe raise(const char *classname, const char *filename, int lineno);
# 119 "./probes.d"
  probe object__create(const char *classname, const char *filename, int lineno);
# 130 "./probes.d"
  probe array__create(long length, const char *filename, int lineno);
# 141 "./probes.d"
  probe hash__create(long length, const char *filename, int lineno);
# 152 "./probes.d"
  probe string__create(long length, const char *filename, int lineno);
# 163 "./probes.d"
  probe symbol__create(const char *str, const char *filename, int lineno);
# 173 "./probes.d"
  probe parse__begin(const char *sourcefile, int lineno);
# 183 "./probes.d"
  probe parse__end(const char *sourcefile, int lineno);
# 195 "./probes.d"
  probe gc__mark__begin();






  probe gc__mark__end();






  probe gc__sweep__begin();






  probe gc__sweep__end();
# 227 "./probes.d"
  probe method__cache__clear(const char *class, const char *filename, int lineno);
};

#pragma D attributes Stable/Evolving/Common provider ruby provider
#pragma D attributes Stable/Evolving/Common provider ruby module
#pragma D attributes Stable/Evolving/Common provider ruby function
#pragma D attributes Evolving/Evolving/Common provider ruby name
#pragma D attributes Evolving/Evolving/Common provider ruby args
# 234 "./probes.d"

# 1 "/tmp/tmp5tb7i3kf.d"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 341 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/tmp/tmp5tb7i3kf.d" 2

x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o strlcat.o -c ./missing/strlcat.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o strlcpy.o -c ./missing/strlcpy.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o addr2line.o -c addr2line.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dmyenc.o -c dmyenc.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o dln.o -c dln.c
3 warnings generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o localeinit.o -c localeinit.c
/bin/mkdir -p .ext/.timestamp/x86_64-linux-gnu .ext/x86_64-linux-gnu
/bin/mkdir -p .ext/.timestamp .ext/common
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o array.o -c array.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o mjit.o -c mjit.c
array.c:290:17: warning: expression result unused [-Wunused-value]
                RB_OBJ_WRITE(buff_owner_ary, &ptr[i+beg], argv[i]);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./internal.h:2705:34: note: expanded from macro 'RB_OBJ_WRITE'
#define RB_OBJ_WRITE(a, slot, b) UNALIGNED_MEMBER_ACCESS(rb_obj_write((VALUE)(a), (VALUE *)(slot), (VALUE)(b), __FILE__, __LINE__))
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./internal.h:2697:5: note: expanded from macro 'UNALIGNED_MEMBER_ACCESS'
    unaligned_member_access_result; \
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1087:5: note: expanded from macro 'RARRAY_PTR_USE_TRANSIENT'
    expr; \
    ^~~~
In file included from mjit.c:18:
In file included from ./mjit_worker.c:76:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
array.c:686:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(ARRAY, 0);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:193:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE_ENABLED
^
array.c:686:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:194:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE
^
array.c:702:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE_ENABLED' is invalid in C99 [-Wimplicit-function-declaration]
    RUBY_DTRACE_CREATE_HOOK(ARRAY, capa);
    ^
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2605:18: note: expanded from macro 'RUBY_DTRACE_HOOK'
    if (UNLIKELY(RUBY_DTRACE_##name##_ENABLED())) { \
                 ^
<scratch space>:197:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE_ENABLED
^
array.c:702:5: warning: implicit declaration of function 'RUBY_DTRACE_ARRAY_CREATE' is invalid in C99 [-Wimplicit-function-declaration]
./internal.h:2602:5: note: expanded from macro 'RUBY_DTRACE_CREATE_HOOK'
    RUBY_DTRACE_HOOK(name##_CREATE, arg)
    ^
./internal.h:2609:2: note: expanded from macro 'RUBY_DTRACE_HOOK'
        RUBY_DTRACE_##name(arg, dtrace_file, dtrace_line); \
        ^
<scratch space>:198:1: note: expanded from here
RUBY_DTRACE_ARRAY_CREATE
^
array.c:1200:2: warning: expression result unused [-Wunused-value]
        RB_OBJ_WRITE(target_ary, &ptr[idx], item);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./internal.h:2705:34: note: expanded from macro 'RB_OBJ_WRITE'
#define RB_OBJ_WRITE(a, slot, b) UNALIGNED_MEMBER_ACCESS(rb_obj_write((VALUE)(a), (VALUE *)(slot), (VALUE)(b), __FILE__, __LINE__))
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./internal.h:2697:5: note: expanded from macro 'UNALIGNED_MEMBER_ACCESS'
    unaligned_member_access_result; \
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1087:5: note: expanded from macro 'RARRAY_PTR_USE_TRANSIENT'
    expr; \
    ^~~~
array.c:3029:33: warning: '(' and '{' tokens introducing statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    sorted = rb_block_call(ary, rb_intern("sort_by"), 0, 0, sort_by_i, 0);
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:23: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                      ^
array.c:3029:33: note: '{' token is here
    sorted = rb_block_call(ary, rb_intern("sort_by"), 0, 0, sort_by_i, 0);
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1832:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    {                                                   \
    ^
array.c:3029:33: warning: '}' and ')' tokens terminating statement expression appear in different macro expansion contexts [-Wcompound-token-split-by-macro]
    sorted = rb_block_call(ary, rb_intern("sort_by"), 0, 0, sort_by_i, 0);
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:24: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1837:5: note: expanded from macro 'RUBY_CONST_ID_CACHE'
    }
    ^
array.c:3029:33: note: ')' token is here
    sorted = rb_block_call(ary, rb_intern("sort_by"), 0, 0, sort_by_i, 0);
                                ^~~~~~~~~~~~~~~~~~~~
./include/ruby/ruby.h:1847:56: note: expanded from macro 'rb_intern'
        __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : \
                                                       ^
./tool/ifchange "--timestamp=.revision.time" "./revision.h" revision.tmp
./revision.h unchanged
x86_64-linux-gnu-gcc -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -DSYMBOL_PREFIX= -o coroutine/amd64/Context.o -c coroutine/amd64/Context.S
1 warning generated.
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enc/ascii.o -c enc/ascii.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enc/us_ascii.o -c enc/us_ascii.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enc/unicode.o -c enc/unicode.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enc/utf_8.o -c enc/utf_8.c
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o enc/trans/newline.o -c enc/trans/newline.c
# rm -f revision.h
# : > revision.h || : > revision.h
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    -o version.o -c version.c
In file included from version.c:15:
./mjit.h:131:17: warning: cast to smaller integer type 'enum rb_mjit_iseq_func' from 'mjit_func_t' (aka 'unsigned long (*)(struct rb_execution_context_struct *, struct rb_control_frame_struct *)') [-Wpointer-to-enum-cast]
        switch ((enum rb_mjit_iseq_func)func) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
8 warnings generated.
38 warnings generated.
x86_64-linux-gnu-gcc -E -DMJIT_HEADER -P -dD -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-strict-overflow -fvisibility=hidden -DRUBY_EXPORT -DCANONICALIZATION_FOR_MATHN -I. -I.ext/include/x86_64-linux-gnu -I./include -I. -I./enc/unicode/12.1.0 -Wdate-time -D_FORTIFY_SOURCE=2    ./vm.c -o rb_mjit_header.h.new
x86_64-linux-gnu-gcc -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC  -L. -Wl,-z,relro -Wl,-z,now -fstack-protector-strong -rdynamic -Wl,-export-dynamic -fstack-protector-strong  main.o dmydln.o miniinit.o dmyext.o array.o ast.o bignum.o class.o compar.o compile.o complex.o cont.o debug.o debug_counter.o dir.o dln_find.o encoding.o enum.o enumerator.o error.o eval.o file.o gc.o hash.o inits.o io.o iseq.o load.o marshal.o math.o mjit.o mjit_compile.o node.o numeric.o object.o pack.o parse.o proc.o process.o random.o range.o rational.o re.o regcomp.o regenc.o regerror.o regexec.o regparse.o regsyntax.o ruby.o safe.o signal.o sprintf.o st.o strftime.o string.o struct.o symbol.o thread.o time.o transcode.o transient_heap.o util.o variable.o version.o vm.o vm_backtrace.o vm_dump.o vm_trace.o coroutine/amd64/Context.o probes.o enc/ascii.o enc/us_ascii.o enc/unicode.o enc/utf_8.o enc/trans/newline.o setproctitle.o strlcat.o strlcpy.o addr2line.o  -lpthread -lrt -lrt -lgmp -ldl -lcrypt -lm  -lm   -o miniruby
./tool/ifchange "--timestamp=.ext/.timestamp/rb_mjit_header.time" rb_mjit_header.h rb_mjit_header.h.new
rb_mjit_header.h updated
/usr/bin/x86_64-linux-gnu-ld: gc.o: in function `gc_prof_mark_timer_start':
./gc.c:10916: undefined reference to `RUBY_DTRACE_GC_MARK_BEGIN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./gc.c:10916: undefined reference to `RUBY_DTRACE_GC_MARK_BEGIN'
/usr/bin/x86_64-linux-gnu-ld: gc.o: in function `gc_prof_mark_timer_stop':
./gc.c:10927: undefined reference to `RUBY_DTRACE_GC_MARK_END_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./gc.c:10927: undefined reference to `RUBY_DTRACE_GC_MARK_END'
/usr/bin/x86_64-linux-gnu-ld: gc.o: in function `gc_prof_sweep_timer_start':
./gc.c:10939: undefined reference to `RUBY_DTRACE_GC_SWEEP_BEGIN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./gc.c:10939: undefined reference to `RUBY_DTRACE_GC_SWEEP_BEGIN'
/usr/bin/x86_64-linux-gnu-ld: gc.o: in function `gc_prof_sweep_timer_stop':
./gc.c:10952: undefined reference to `RUBY_DTRACE_GC_SWEEP_END_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./gc.c:10952: undefined reference to `RUBY_DTRACE_GC_SWEEP_END'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `ary_new':
./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `empty_ary_alloc':
./array.c:686: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:686: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `ary_new':
./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `rb_ary_sample':
./array.c:(.text+0xcb01): undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `ary_new':
./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `rb_ary_sample':
./array.c:(.text+0xd36d): undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: array.o: in function `ary_new':
./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./array.c:702: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: eval.o: in function `setup_exception':
./eval.c:632: undefined reference to `RUBY_DTRACE_RAISE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./eval.c:632: undefined reference to `RUBY_DTRACE_RAISE'
/usr/bin/x86_64-linux-gnu-ld: hash.o: in function `empty_hash_alloc':
./hash.c:1533: undefined reference to `RUBY_DTRACE_HASH_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./hash.c:1533: undefined reference to `RUBY_DTRACE_HASH_CREATE'
/usr/bin/x86_64-linux-gnu-ld: load.o: in function `require_internal':
./load.c:992: undefined reference to `RUBY_DTRACE_REQUIRE_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1001: undefined reference to `RUBY_DTRACE_FIND_REQUIRE_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1003: undefined reference to `RUBY_DTRACE_FIND_REQUIRE_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1060: undefined reference to `RUBY_DTRACE_REQUIRE_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:992: undefined reference to `RUBY_DTRACE_REQUIRE_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1001: undefined reference to `RUBY_DTRACE_FIND_REQUIRE_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1003: undefined reference to `RUBY_DTRACE_FIND_REQUIRE_RETURN'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:1060: undefined reference to `RUBY_DTRACE_REQUIRE_RETURN'
/usr/bin/x86_64-linux-gnu-ld: load.o: in function `rb_f_load':
./load.c:693: undefined reference to `RUBY_DTRACE_LOAD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:703: undefined reference to `RUBY_DTRACE_LOAD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:693: undefined reference to `RUBY_DTRACE_LOAD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ./load.c:703: undefined reference to `RUBY_DTRACE_LOAD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: object.o: in function `class_call_alloc_func':
./object.c:2097: undefined reference to `RUBY_DTRACE_OBJECT_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./object.c:2097: undefined reference to `RUBY_DTRACE_OBJECT_CREATE'
/usr/bin/x86_64-linux-gnu-ld: parse.o: in function `yycompile0':
./parse.y:6000: undefined reference to `RUBY_DTRACE_PARSE_BEGIN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./parse.y:6000: undefined reference to `RUBY_DTRACE_PARSE_BEGIN'
/usr/bin/x86_64-linux-gnu-ld: ./parse.y:6002: undefined reference to `RUBY_DTRACE_PARSE_END_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./parse.y:6002: undefined reference to `RUBY_DTRACE_PARSE_END'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `str_new0':
./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `str_new_static':
./string.c:859: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:859: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `rb_str_resurrect':
./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `str_new0':
./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `rb_str_resurrect':
./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `str_new0':
./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `rb_str_resurrect':
./string.c:1524: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `empty_str_alloc':
./string.c:735: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:735: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: string.o: in function `str_new0':
./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./string.c:748: undefined reference to `RUBY_DTRACE_STRING_CREATE'
/usr/bin/x86_64-linux-gnu-ld: symbol.o: in function `dsymbol_alloc':
./symbol.c:536: undefined reference to `RUBY_DTRACE_SYMBOL_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./symbol.c:536: undefined reference to `RUBY_DTRACE_SYMBOL_CREATE'
/usr/bin/x86_64-linux-gnu-ld: symbol.o: in function `register_static_symid_str':
./symbol.c:468: undefined reference to `RUBY_DTRACE_SYMBOL_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./symbol.c:468: undefined reference to `RUBY_DTRACE_SYMBOL_CREATE'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `vm_exec_core':
./insns.def:471: undefined reference to `RUBY_DTRACE_ARRAY_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./insns.def:471: undefined reference to `RUBY_DTRACE_ARRAY_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./insns.def:482: undefined reference to `RUBY_DTRACE_HASH_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./insns.def:482: undefined reference to `RUBY_DTRACE_HASH_CREATE'
/usr/bin/x86_64-linux-gnu-ld: ./insns.def:537: undefined reference to `RUBY_DTRACE_HASH_CREATE_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./insns.def:537: undefined reference to `RUBY_DTRACE_HASH_CREATE'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `rb_clear_method_cache_by_class':
././vm_method.c:98: undefined reference to `RUBY_DTRACE_METHOD_CACHE_CLEAR_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_method.c:98: undefined reference to `RUBY_DTRACE_METHOD_CACHE_CLEAR'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `vm_call0_cfunc_with_frame':
././vm_eval.c:80: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_eval.c:97: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_eval.c:97: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: ././vm_eval.c:80: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `rb_vm_pop_cfunc_frame':
./vm.c:597: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:597: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `invoke_bmethod':
./vm.c:1065: undefined reference to `RUBY_DTRACE_METHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:1082: undefined reference to `RUBY_DTRACE_METHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:1065: undefined reference to `RUBY_DTRACE_METHOD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:1082: undefined reference to `RUBY_DTRACE_METHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `vm_exec_handle_exception':
./vm.c:1966: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:1966: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `vm_call_cfunc_with_frame':
././vm_insnhelper.c:2504: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:2521: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:2504: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:2521: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `vm_dtrace':
././vm_insnhelper.c:3728: undefined reference to `RUBY_DTRACE_METHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3729: undefined reference to `RUBY_DTRACE_METHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3730: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3731: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3735: undefined reference to `RUBY_DTRACE_METHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3735: undefined reference to `RUBY_DTRACE_METHOD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3738: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3738: undefined reference to `RUBY_DTRACE_CMETHOD_ENTRY'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3741: undefined reference to `RUBY_DTRACE_METHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3741: undefined reference to `RUBY_DTRACE_METHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3744: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ././vm_insnhelper.c:3744: undefined reference to `RUBY_DTRACE_CMETHOD_RETURN'
/usr/bin/x86_64-linux-gnu-ld: vm.o: in function `hook_before_rewind':
./vm.c:1764: undefined reference to `RUBY_DTRACE_METHOD_RETURN_ENABLED'
/usr/bin/x86_64-linux-gnu-ld: ./vm.c:1764: undefined reference to `RUBY_DTRACE_METHOD_RETURN'
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [Makefile:271: miniruby] Error 1
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
dh_auto_build: error: make -j4 main V=1 returned exit code 2
make[1]: *** [debian/rules:100: override_dh_auto_build-arch] Error 25
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
make: *** [debian/rules:78: binary] Error 2
dpkg-buildpackage: error: debian/rules binary subprocess returned exit status 2
--------------------------------------------------------------------------------
Build finished at 2021-10-26T20:51:16Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 145488
Build-Time: 81
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 9
Job: ruby2.7_2.7.4-1
Machine Architecture: amd64
Package: ruby2.7
Package-Time: 114
Source-Version: 2.7.4-1
Space: 145488
Status: attempted
Version: 2.7.4-1
--------------------------------------------------------------------------------
Finished at 2021-10-26T20:51:16Z
Build needed 00:01:54, 145488k disk space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 115.525379628s
DC-Time-Estimation: 115.525379628 versus expected 991 (r/m: 7.578201631460472 ; m: 115.525379628)
