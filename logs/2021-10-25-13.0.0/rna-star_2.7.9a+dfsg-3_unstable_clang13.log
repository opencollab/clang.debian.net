DC-Build-Header: rna-star 2.7.9a+dfsg-3 / 2021-10-26 20:16:10 +0000
DC-Task: type:rebuild-binarch-only source:rna-star version:2.7.9a+dfsg-3 chroot:unstable esttime:1652 logfile:/tmp/rna-star_2.7.9a+dfsg-3_unstable_clang13.log modes:clang13:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang13 rna-star_2.7.9a+dfsg-3'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-7-127.eu-central-1.compute.internal

+==============================================================================+
| rna-star 2.7.9a+dfsg-3 (amd64)               Tue, 26 Oct 2021 20:16:10 +0000 |
+==============================================================================+

Package: rna-star
Version: 2.7.9a+dfsg-3
Source Version: 2.7.9a+dfsg-3
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-538814ea-efd2-418b-9155-9729e718a499' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang13
------------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=13
+ echo 'Install of clang-13'
Install of clang-13
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [165 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [63.6 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [63.6 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [34.5 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [34.5 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [38.7 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 Packages T-2021-10-26-1401.46-F-2021-10-26-0202.15.pdiff [38.7 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Translation-en [6585 kB]
Fetched 6951 kB in 3s (2728 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-13 libomp-13-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386 libclang-common-13-dev
  libclang-cpp13 libclang1-13 libedit2 libgc1 libgcc-9-dev libicu67 libllvm13
  libmd0 libobjc-11-dev libobjc4 libomp5-13 libxml2 libz3-4
Suggested packages:
  clang-13-doc libomp-13-doc
Recommended packages:
  llvm-13-dev python3
The following NEW packages will be installed:
  clang-13 lib32gcc-s1 lib32stdc++6 libasan5 libbsd0 libc6-i386
  libclang-common-13-dev libclang-cpp13 libclang1-13 libedit2 libgc1
  libgcc-9-dev libicu67 libllvm13 libmd0 libobjc-11-dev libobjc-9-dev libobjc4
  libomp-13-dev libomp5-13 libxml2 libz3-4
0 upgraded, 22 newly installed, 0 to remove and 0 not upgraded.
Need to get 68.5 MB of archives.
After this operation, 379 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libmd0 amd64 1.0.4-1 [29.6 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.11.3-1 [108 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20210910-1 [97.5 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 libicu67 amd64 67.1-7 [8622 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.12+dfsg-5 [696 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 libz3-4 amd64 4.8.12-1+b1 [6997 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libllvm13 amd64 1:13.0.0-8 [19.7 MB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libclang-cpp13 amd64 1:13.0.0-8 [10.5 MB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libgc1 amd64 1:8.0.4-3 [239 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 11.2.0-10 [43.2 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libobjc-11-dev amd64 11.2.0-10 [170 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.32-4 [2624 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 11.2.0-10 [49.9 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 11.2.0-10 [601 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-13-dev amd64 1:13.0.0-8 [5730 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 libclang1-13 amd64 1:13.0.0-8 [6093 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 clang-13 amd64 1:13.0.0-8 [119 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libasan5 amd64 9.4.0-3 [2734 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libgcc-9-dev amd64 9.4.0-3 [2343 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.4.0-3 [219 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libomp5-13 amd64 1:13.0.0-8 [377 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libomp-13-dev amd64 1:13.0.0-8 [482 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 68.5 MB in 0s (151 MB/s)
Selecting previously unselected package libmd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12431 files and directories currently installed.)
Preparing to unpack .../00-libmd0_1.0.4-1_amd64.deb ...
Unpacking libmd0:amd64 (1.0.4-1) ...
Selecting previously unselected package libbsd0:amd64.
Preparing to unpack .../01-libbsd0_0.11.3-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.11.3-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../02-libedit2_3.1-20210910-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20210910-1) ...
Selecting previously unselected package libicu67:amd64.
Preparing to unpack .../03-libicu67_67.1-7_amd64.deb ...
Unpacking libicu67:amd64 (67.1-7) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../04-libxml2_2.9.12+dfsg-5_amd64.deb ...
Unpacking libxml2:amd64 (2.9.12+dfsg-5) ...
Selecting previously unselected package libz3-4:amd64.
Preparing to unpack .../05-libz3-4_4.8.12-1+b1_amd64.deb ...
Unpacking libz3-4:amd64 (4.8.12-1+b1) ...
Selecting previously unselected package libllvm13:amd64.
Preparing to unpack .../06-libllvm13_1%3a13.0.0-8_amd64.deb ...
Unpacking libllvm13:amd64 (1:13.0.0-8) ...
Selecting previously unselected package libclang-cpp13.
Preparing to unpack .../07-libclang-cpp13_1%3a13.0.0-8_amd64.deb ...
Unpacking libclang-cpp13 (1:13.0.0-8) ...
Selecting previously unselected package libgc1:amd64.
Preparing to unpack .../08-libgc1_1%3a8.0.4-3_amd64.deb ...
Unpacking libgc1:amd64 (1:8.0.4-3) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../09-libobjc4_11.2.0-10_amd64.deb ...
Unpacking libobjc4:amd64 (11.2.0-10) ...
Selecting previously unselected package libobjc-11-dev:amd64.
Preparing to unpack .../10-libobjc-11-dev_11.2.0-10_amd64.deb ...
Unpacking libobjc-11-dev:amd64 (11.2.0-10) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../11-libc6-i386_2.32-4_amd64.deb ...
Unpacking libc6-i386 (2.32-4) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../12-lib32gcc-s1_11.2.0-10_amd64.deb ...
Unpacking lib32gcc-s1 (11.2.0-10) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../13-lib32stdc++6_11.2.0-10_amd64.deb ...
Unpacking lib32stdc++6 (11.2.0-10) ...
Selecting previously unselected package libclang-common-13-dev.
Preparing to unpack .../14-libclang-common-13-dev_1%3a13.0.0-8_amd64.deb ...
Unpacking libclang-common-13-dev (1:13.0.0-8) ...
Selecting previously unselected package libclang1-13.
Preparing to unpack .../15-libclang1-13_1%3a13.0.0-8_amd64.deb ...
Unpacking libclang1-13 (1:13.0.0-8) ...
Selecting previously unselected package clang-13.
Preparing to unpack .../16-clang-13_1%3a13.0.0-8_amd64.deb ...
Unpacking clang-13 (1:13.0.0-8) ...
Selecting previously unselected package libasan5:amd64.
Preparing to unpack .../17-libasan5_9.4.0-3_amd64.deb ...
Unpacking libasan5:amd64 (9.4.0-3) ...
Selecting previously unselected package libgcc-9-dev:amd64.
Preparing to unpack .../18-libgcc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libgcc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../19-libobjc-9-dev_9.4.0-3_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.4.0-3) ...
Selecting previously unselected package libomp5-13:amd64.
Preparing to unpack .../20-libomp5-13_1%3a13.0.0-8_amd64.deb ...
Unpacking libomp5-13:amd64 (1:13.0.0-8) ...
Selecting previously unselected package libomp-13-dev.
Preparing to unpack .../21-libomp-13-dev_1%3a13.0.0-8_amd64.deb ...
Unpacking libomp-13-dev (1:13.0.0-8) ...
Setting up libicu67:amd64 (67.1-7) ...
Setting up libasan5:amd64 (9.4.0-3) ...
Setting up libz3-4:amd64 (4.8.12-1+b1) ...
Setting up libgc1:amd64 (1:8.0.4-3) ...
Setting up libmd0:amd64 (1.0.4-1) ...
Setting up libc6-i386 (2.32-4) ...
Setting up libomp5-13:amd64 (1:13.0.0-8) ...
Setting up libbsd0:amd64 (0.11.3-1) ...
Setting up libxml2:amd64 (2.9.12+dfsg-5) ...
Setting up libedit2:amd64 (3.1-20210910-1) ...
Setting up libobjc4:amd64 (11.2.0-10) ...
Setting up libgcc-9-dev:amd64 (9.4.0-3) ...
Setting up lib32gcc-s1 (11.2.0-10) ...
Setting up lib32stdc++6 (11.2.0-10) ...
Setting up libllvm13:amd64 (1:13.0.0-8) ...
Setting up libobjc-9-dev:amd64 (9.4.0-3) ...
Setting up libclang-common-13-dev (1:13.0.0-8) ...
Setting up libomp-13-dev (1:13.0.0-8) ...
Setting up libobjc-11-dev:amd64 (11.2.0-10) ...
Setting up libclang1-13 (1:13.0.0-8) ...
Setting up libclang-cpp13 (1:13.0.0-8) ...
Setting up clang-13 (1:13.0.0-8) ...
Processing triggers for libc-bin (2.32-4) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10 11'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-13 g++-4.6
+ ln -s clang-13 gcc-4.6
+ ln -s clang-13 cpp-4.6
+ ln -s clang-13 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-13 g++-4.7
+ ln -s clang-13 gcc-4.7
+ ln -s clang-13 cpp-4.7
+ ln -s clang-13 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-13 g++-4.8
+ ln -s clang-13 gcc-4.8
+ ln -s clang-13 cpp-4.8
+ ln -s clang-13 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-13 g++-4.9
+ ln -s clang-13 gcc-4.9
+ ln -s clang-13 cpp-4.9
+ ln -s clang-13 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-13 g++-5
+ ln -s clang-13 gcc-5
+ ln -s clang-13 cpp-5
+ ln -s clang-13 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-13 g++-6
+ ln -s clang-13 gcc-6
+ ln -s clang-13 cpp-6
+ ln -s clang-13 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-13 g++-7
+ ln -s clang-13 gcc-7
+ ln -s clang-13 cpp-7
+ ln -s clang-13 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-13 g++-8
+ ln -s clang-13 gcc-8
+ ln -s clang-13 cpp-8
+ ln -s clang-13 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-13 g++-9
+ ln -s clang-13 gcc-9
+ ln -s clang-13 cpp-9
+ ln -s clang-13 gcc
+ echo 'gcc-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-13 g++-10
+ ln -s clang-13 gcc-10
+ ln -s clang-13 cpp-10
+ ln -s clang-13 gcc
+ echo 'gcc-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-11 gcc-11 cpp-11 gcc
+ ln -s clang++-13 g++-11
+ ln -s clang-13 gcc-11
+ ln -s clang-13 cpp-11
+ ln -s clang-13 gcc
+ echo 'gcc-11 hold'
+ dpkg --set-selections
+ echo 'g++-11 hold'
+ dpkg --set-selections
+ cd -
/build/rna-star-sw4OXj
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang
+ cd /usr/bin/
+ rm -f clang++ clang
+ ln -s clang-13 clang++
+ ln -s clang-13 clang
+ clang++ --version
Debian clang version 13.0.0-8
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ clang --version
Debian clang version 13.0.0-8
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
+ cd -
/build/rna-star-sw4OXj
+ apt install --yes --no-install-recommends --force-yes qt5-qmake

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  qt5-qmake-bin qtchooser
The following NEW packages will be installed:
  qt5-qmake qt5-qmake-bin qtchooser
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
Need to get 1322 kB of archives.
After this operation, 4914 kB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake-bin amd64 5.15.2+dfsg-12 [1046 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 qtchooser amd64 66-2 [26.3 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 qt5-qmake amd64 5.15.2+dfsg-12 [249 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1322 kB in 0s (20.3 MB/s)
Selecting previously unselected package qt5-qmake-bin.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13528 files and directories currently installed.)
Preparing to unpack .../qt5-qmake-bin_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake-bin (5.15.2+dfsg-12) ...
Selecting previously unselected package qtchooser.
Preparing to unpack .../qtchooser_66-2_amd64.deb ...
Unpacking qtchooser (66-2) ...
Selecting previously unselected package qt5-qmake:amd64.
Preparing to unpack .../qt5-qmake_5.15.2+dfsg-12_amd64.deb ...
Unpacking qt5-qmake:amd64 (5.15.2+dfsg-12) ...
Setting up qt5-qmake-bin (5.15.2+dfsg-12) ...
Setting up qtchooser (66-2) ...
Setting up qt5-qmake:amd64 (5.15.2+dfsg-12) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ cp /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qmake.conf /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/qplatformdefs.h /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
+ ls -al /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/
total 16
drwxr-xr-x  2 root root 4096 Oct 26 20:16 .
drwxr-xr-x 76 root root 4096 Oct 26 20:16 ..
-rw-r--r--  1 root root  276 Oct 26 20:16 qmake.conf
-rw-r--r--  1 root root 3218 Oct 26 20:16 qplatformdefs.h
+ cat /usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++/qmake.conf
#
# qmake configuration for linux-clang
#

MAKEFILE_GENERATOR = UNIX
CONFIG += incremental

QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/clang.conf)

QMAKE_LFLAGS += -ccc-gcc-name g++

load(qt_config)
+ export QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ QMAKESPEC=/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-clang/
+ sed -i -e 's|compare_problem(2,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ sed -i -e 's|compare_problem(1,|compare_problem(0,|g' /usr/bin/dpkg-gensymbols
+ grep 'compare_problem(' /usr/bin/dpkg-gensymbols
        compare_problem(4, g_('new libraries appeared in the symbols file: %s'), "@libs");
        compare_problem(3, g_('some libraries disappeared in the symbols file: %s'), "@libs");
        compare_problem(0, g_('some new symbols appeared in the symbols file: %s'),
        compare_problem(0, g_('some symbols or patterns disappeared in the symbols file: %s'),

I: Finished running '/tmp/clang13'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/rna-star-sw4OXj/resolver-mPz5e3' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
NOTICE: 'rna-star' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/med-team/rna-star.git
Please use:
git clone https://salsa.debian.org/med-team/rna-star.git
to retrieve the latest (possibly unreleased) updates to the package.
Need to get 990 kB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main rna-star 2.7.9a+dfsg-3 (dsc) [2225 B]
Get:2 http://127.0.0.1:12990/debian sid/main rna-star 2.7.9a+dfsg-3 (tar) [611 kB]
Get:3 http://127.0.0.1:12990/debian sid/main rna-star 2.7.9a+dfsg-3 (diff) [377 kB]
Fetched 990 kB in 0s (9576 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/rna-star-sw4OXj/rna-star-2.7.9a+dfsg' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/rna-star-sw4OXj' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper-compat (= 13), libhts-dev, vim-common, xxd, zlib1g-dev, libsimde-dev, build-essential, fakeroot
Filtered Build-Depends: debhelper-compat (= 13), libhts-dev, vim-common, xxd, zlib1g-dev, libsimde-dev, build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [401 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [482 B]
Fetched 1840 B in 0s (183 kB/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdextrautils debhelper
  dh-autoreconf dh-strip-nondeterminism dwz file gettext gettext-base
  groff-base intltool-debian libarchive-zip-perl libbrotli1 libcurl3-gnutls
  libcurl4-gnutls-dev libdebhelper-perl libdeflate-dev libdeflate0 libelf1
  libfile-stripnondeterminism-perl libhts-dev libhts3 libhtscodecs2
  libldap-2.4-2 liblzma-dev libmagic-mgc libmagic1 libnghttp2-14 libpipeline1
  libpsl5 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsimde-dev
  libssh2-1 libsub-override-perl libtool libuchardet0 m4 man-db po-debconf
  sensible-utils vim-common xxd zlib1g-dev
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc dh-make gettext-doc
  libasprintf-dev libgettextpo-dev groff libcurl4-doc libgnutls28-dev
  libidn11-dev libkrb5-dev libldap2-dev librtmp-dev libssh2-1-dev pkg-config
  liblzma-doc libtool-doc gfortran | fortran95-compiler gcj-jdk m4-doc
  apparmor less www-browser libmail-box-perl
Recommended packages:
  curl | wget | lynx ca-certificates libarchive-cpio-perl libldap-common
  publicsuffix libsasl2-modules libltdl-dev libmail-sendmail-perl vim
  | vim-gtk3 | vim-athena | vim-nox | vim-tiny
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdextrautils debhelper
  dh-autoreconf dh-strip-nondeterminism dwz file gettext gettext-base
  groff-base intltool-debian libarchive-zip-perl libbrotli1 libcurl3-gnutls
  libcurl4-gnutls-dev libdebhelper-perl libdeflate-dev libdeflate0 libelf1
  libfile-stripnondeterminism-perl libhts-dev libhts3 libhtscodecs2
  libldap-2.4-2 liblzma-dev libmagic-mgc libmagic1 libnghttp2-14 libpipeline1
  libpsl5 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsimde-dev
  libssh2-1 libsub-override-perl libtool libuchardet0 m4 man-db po-debconf
  sbuild-build-depends-main-dummy sensible-utils vim-common xxd zlib1g-dev
0 upgraded, 50 newly installed, 0 to remove and 0 not upgraded.
Need to get 16.6 MB of archives.
After this operation, 49.7 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [908 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdextrautils amd64 2.37.2-4 [143 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.7-1 [67.8 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-7 [935 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.3-1 [34.3 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.4-2 [1354 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.17 [21.5 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 xxd amd64 2:8.2.3455-2 [213 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 vim-common all 2:8.2.3455-2 [247 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.39-3 [273 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.39-3 [126 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.39-3 [69.1 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.21-4 [175 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.13-1 [34.8 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-5 [204 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.71-2 [343 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1+nmu1 [77.1 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.5-1 [823 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.21-4 [510 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 13.5.2 [192 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-15 [513 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 20 [17.1 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.68-1 [104 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.12.0-2 [26.3 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.12.0-2 [15.5 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.185-2 [172 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.14-1 [98.3 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.21-4 [1311 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21+nmu1 [248 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 13.5.2 [1056 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 libbrotli1 amd64 1.0.9-2+b2 [279 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-modules-db amd64 2.1.27+dfsg-2.1 [69.1 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-2 amd64 2.1.27+dfsg-2.1 [106 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 libldap-2.4-2 amd64 2.4.59+dfsg-1 [232 kB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 libnghttp2-14 amd64 1.43.0-1 [77.1 kB]
Get:38 http://127.0.0.1:12990/debian sid/main amd64 libpsl5 amd64 0.21.0-1.2 [57.3 kB]
Get:39 http://127.0.0.1:12990/debian sid/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2+b2 [60.8 kB]
Get:40 http://127.0.0.1:12990/debian sid/main amd64 libssh2-1 amd64 1.10.0-2 [178 kB]
Get:41 http://127.0.0.1:12990/debian sid/main amd64 libcurl3-gnutls amd64 7.74.0-1.3+b1 [338 kB]
Get:42 http://127.0.0.1:12990/debian sid/main amd64 libcurl4-gnutls-dev amd64 7.74.0-1.3+b1 [429 kB]
Get:43 http://127.0.0.1:12990/debian sid/main amd64 libdeflate0 amd64 1.8-1 [53.1 kB]
Get:44 http://127.0.0.1:12990/debian sid/main amd64 libdeflate-dev amd64 1.8-1 [46.7 kB]
Get:45 http://127.0.0.1:12990/debian sid/main amd64 libhtscodecs2 amd64 1.1.1-3+b1 [50.1 kB]
Get:46 http://127.0.0.1:12990/debian sid/main amd64 libhts3 amd64 1.13+ds-2 [395 kB]
Get:47 http://127.0.0.1:12990/debian sid/main amd64 liblzma-dev amd64 5.2.5-2 [229 kB]
Get:48 http://127.0.0.1:12990/debian sid/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2 [190 kB]
Get:49 http://127.0.0.1:12990/debian sid/main amd64 libhts-dev amd64 1.13+ds-2 [4086 kB]
Get:50 http://127.0.0.1:12990/debian sid/main amd64 libsimde-dev all 0.7.2-5 [259 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 16.6 MB in 0s (108 MB/s)
Selecting previously unselected package bsdextrautils.
(Reading database ... 14273 files and directories currently installed.)
Preparing to unpack .../00-bsdextrautils_2.37.2-4_amd64.deb ...
Unpacking bsdextrautils (2.37.2-4) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../01-libuchardet0_0.0.7-1_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.7-1) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../02-groff-base_1.22.4-7_amd64.deb ...
Unpacking groff-base (1.22.4-7) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../03-libpipeline1_1.5.3-1_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.3-1) ...
Selecting previously unselected package man-db.
Preparing to unpack .../04-man-db_2.9.4-2_amd64.deb ...
Unpacking man-db (2.9.4-2) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../05-sensible-utils_0.0.17_all.deb ...
Unpacking sensible-utils (0.0.17) ...
Selecting previously unselected package xxd.
Preparing to unpack .../06-xxd_2%3a8.2.3455-2_amd64.deb ...
Unpacking xxd (2:8.2.3455-2) ...
Selecting previously unselected package vim-common.
Preparing to unpack .../07-vim-common_2%3a8.2.3455-2_all.deb ...
Unpacking vim-common (2:8.2.3455-2) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../08-libmagic-mgc_1%3a5.39-3_amd64.deb ...
Unpacking libmagic-mgc (1:5.39-3) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../09-libmagic1_1%3a5.39-3_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.39-3) ...
Selecting previously unselected package file.
Preparing to unpack .../10-file_1%3a5.39-3_amd64.deb ...
Unpacking file (1:5.39-3) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../11-gettext-base_0.21-4_amd64.deb ...
Unpacking gettext-base (0.21-4) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../12-libsigsegv2_2.13-1_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.13-1) ...
Selecting previously unselected package m4.
Preparing to unpack .../13-m4_1.4.18-5_amd64.deb ...
Unpacking m4 (1.4.18-5) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../14-autoconf_2.71-2_all.deb ...
Unpacking autoconf (2.71-2) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../15-autotools-dev_20180224.1+nmu1_all.deb ...
Unpacking autotools-dev (20180224.1+nmu1) ...
Selecting previously unselected package automake.
Preparing to unpack .../16-automake_1%3a1.16.5-1_all.deb ...
Unpacking automake (1:1.16.5-1) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../17-autopoint_0.21-4_all.deb ...
Unpacking autopoint (0.21-4) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../18-libdebhelper-perl_13.5.2_all.deb ...
Unpacking libdebhelper-perl (13.5.2) ...
Selecting previously unselected package libtool.
Preparing to unpack .../19-libtool_2.4.6-15_all.deb ...
Unpacking libtool (2.4.6-15) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../20-dh-autoreconf_20_all.deb ...
Unpacking dh-autoreconf (20) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../21-libarchive-zip-perl_1.68-1_all.deb ...
Unpacking libarchive-zip-perl (1.68-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../22-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../23-libfile-stripnondeterminism-perl_1.12.0-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.12.0-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../24-dh-strip-nondeterminism_1.12.0-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.12.0-2) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../25-libelf1_0.185-2_amd64.deb ...
Unpacking libelf1:amd64 (0.185-2) ...
Selecting previously unselected package dwz.
Preparing to unpack .../26-dwz_0.14-1_amd64.deb ...
Unpacking dwz (0.14-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../27-gettext_0.21-4_amd64.deb ...
Unpacking gettext (0.21-4) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../28-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../29-po-debconf_1.0.21+nmu1_all.deb ...
Unpacking po-debconf (1.0.21+nmu1) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../30-debhelper_13.5.2_all.deb ...
Unpacking debhelper (13.5.2) ...
Selecting previously unselected package libbrotli1:amd64.
Preparing to unpack .../31-libbrotli1_1.0.9-2+b2_amd64.deb ...
Unpacking libbrotli1:amd64 (1.0.9-2+b2) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../32-libsasl2-modules-db_2.1.27+dfsg-2.1_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.27+dfsg-2.1) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../33-libsasl2-2_2.1.27+dfsg-2.1_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.27+dfsg-2.1) ...
Selecting previously unselected package libldap-2.4-2:amd64.
Preparing to unpack .../34-libldap-2.4-2_2.4.59+dfsg-1_amd64.deb ...
Unpacking libldap-2.4-2:amd64 (2.4.59+dfsg-1) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../35-libnghttp2-14_1.43.0-1_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.43.0-1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../36-libpsl5_0.21.0-1.2_amd64.deb ...
Unpacking libpsl5:amd64 (0.21.0-1.2) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../37-librtmp1_2.4+20151223.gitfa8646d.1-2+b2_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../38-libssh2-1_1.10.0-2_amd64.deb ...
Unpacking libssh2-1:amd64 (1.10.0-2) ...
Selecting previously unselected package libcurl3-gnutls:amd64.
Preparing to unpack .../39-libcurl3-gnutls_7.74.0-1.3+b1_amd64.deb ...
Unpacking libcurl3-gnutls:amd64 (7.74.0-1.3+b1) ...
Selecting previously unselected package libcurl4-gnutls-dev:amd64.
Preparing to unpack .../40-libcurl4-gnutls-dev_7.74.0-1.3+b1_amd64.deb ...
Unpacking libcurl4-gnutls-dev:amd64 (7.74.0-1.3+b1) ...
Selecting previously unselected package libdeflate0:amd64.
Preparing to unpack .../41-libdeflate0_1.8-1_amd64.deb ...
Unpacking libdeflate0:amd64 (1.8-1) ...
Selecting previously unselected package libdeflate-dev:amd64.
Preparing to unpack .../42-libdeflate-dev_1.8-1_amd64.deb ...
Unpacking libdeflate-dev:amd64 (1.8-1) ...
Selecting previously unselected package libhtscodecs2:amd64.
Preparing to unpack .../43-libhtscodecs2_1.1.1-3+b1_amd64.deb ...
Unpacking libhtscodecs2:amd64 (1.1.1-3+b1) ...
Selecting previously unselected package libhts3:amd64.
Preparing to unpack .../44-libhts3_1.13+ds-2_amd64.deb ...
Unpacking libhts3:amd64 (1.13+ds-2) ...
Selecting previously unselected package liblzma-dev:amd64.
Preparing to unpack .../45-liblzma-dev_5.2.5-2_amd64.deb ...
Unpacking liblzma-dev:amd64 (5.2.5-2) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../46-zlib1g-dev_1%3a1.2.11.dfsg-2_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.11.dfsg-2) ...
Selecting previously unselected package libhts-dev:amd64.
Preparing to unpack .../47-libhts-dev_1.13+ds-2_amd64.deb ...
Unpacking libhts-dev:amd64 (1.13+ds-2) ...
Selecting previously unselected package libsimde-dev.
Preparing to unpack .../48-libsimde-dev_0.7.2-5_all.deb ...
Unpacking libsimde-dev (0.7.2-5) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../49-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up libhtscodecs2:amd64 (1.1.1-3+b1) ...
Setting up libpipeline1:amd64 (1.5.3-1) ...
Setting up libsimde-dev (0.7.2-5) ...
Setting up libpsl5:amd64 (0.21.0-1.2) ...
Setting up bsdextrautils (2.37.2-4) ...
update-alternatives: using /usr/bin/write.ul to provide /usr/bin/write (write) in auto mode
Setting up libmagic-mgc (1:5.39-3) ...
Setting up libarchive-zip-perl (1.68-1) ...
Setting up libdebhelper-perl (13.5.2) ...
Setting up libbrotli1:amd64 (1.0.9-2+b2) ...
Setting up libnghttp2-14:amd64 (1.43.0-1) ...
Setting up libmagic1:amd64 (1:5.39-3) ...
Setting up libdeflate0:amd64 (1.8-1) ...
Setting up gettext-base (0.21-4) ...
Setting up file (1:5.39-3) ...
Setting up xxd (2:8.2.3455-2) ...
Setting up libsasl2-modules-db:amd64 (2.1.27+dfsg-2.1) ...
Setting up autotools-dev (20180224.1+nmu1) ...
Setting up vim-common (2:8.2.3455-2) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Setting up libsigsegv2:amd64 (2.13-1) ...
Setting up autopoint (0.21-4) ...
Setting up libsasl2-2:amd64 (2.1.27+dfsg-2.1) ...
Setting up liblzma-dev:amd64 (5.2.5-2) ...
Setting up zlib1g-dev:amd64 (1:1.2.11.dfsg-2) ...
Setting up sensible-utils (0.0.17) ...
Setting up libuchardet0:amd64 (0.0.7-1) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up libssh2-1:amd64 (1.10.0-2) ...
Setting up libdeflate-dev:amd64 (1.8-1) ...
Setting up libelf1:amd64 (0.185-2) ...
Setting up libfile-stripnondeterminism-perl (1.12.0-2) ...
Setting up gettext (0.21-4) ...
Setting up libtool (2.4.6-15) ...
Setting up libldap-2.4-2:amd64 (2.4.59+dfsg-1) ...
Setting up m4 (1.4.18-5) ...
Setting up libcurl3-gnutls:amd64 (7.74.0-1.3+b1) ...
Setting up libcurl4-gnutls-dev:amd64 (7.74.0-1.3+b1) ...
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up autoconf (2.71-2) ...
Setting up dh-strip-nondeterminism (1.12.0-2) ...
Setting up dwz (0.14-1) ...
Setting up groff-base (1.22.4-7) ...
Setting up automake (1:1.16.5-1) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up libhts3:amd64 (1.13+ds-2) ...
Setting up po-debconf (1.0.21+nmu1) ...
Setting up libhts-dev:amd64 (1.13+ds-2) ...
Setting up man-db (2.9.4-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up dh-autoreconf (20) ...
Setting up debhelper (13.5.2) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.32-4) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in amd64 arm64 ppc64el mips64el)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.37-7 dpkg-dev_1.20.9 g++-11_11.2.0-10 gcc-11_11.2.0-10 libc6-dev_2.32-4 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 linux-libc-dev_5.14.12-1
Package versions: adduser_3.118 apt_2.3.11 autoconf_2.71-2 automake_1:1.16.5-1 autopoint_0.21-4 autotools-dev_20180224.1+nmu1 base-files_12 base-passwd_3.5.52 bash_5.1-3+b2 binutils_2.37-7 binutils-common_2.37-7 binutils-x86-64-linux-gnu_2.37-7 bsdextrautils_2.37.2-4 bsdutils_1:2.37.2-4 build-essential_12.9 bzip2_1.0.8-4 clang-13_1:13.0.0-8 coreutils_8.32-4+b1 cpp_4:11.2.0-2 cpp-11_11.2.0-10 dash_0.5.11+git20210120+802ebd4-2 debconf_1.5.78 debhelper_13.5.2 debian-archive-keyring_2021.1.1 debianutils_5.5-1 dh-autoreconf_20 dh-strip-nondeterminism_1.12.0-2 diffutils_1:3.7-5 dpkg_1.20.9 dpkg-dev_1.20.9 dwz_0.14-1 e2fsprogs_1.46.4-1 fakeroot_1.26-1 file_1:5.39-3 findutils_4.8.0-1 g++_4:11.2.0-2 g++-11_11.2.0-10 gcc_4:11.2.0-2 gcc-10-base_10.3.0-11 gcc-11_11.2.0-10 gcc-11-base_11.2.0-10 gcc-9-base_9.4.0-3 gettext_0.21-4 gettext-base_0.21-4 gpgv_2.2.27-2 grep_3.7-1 groff-base_1.22.4-7 gzip_1.10-4 hostname_3.23 init-system-helpers_1.60 intltool-debian_0.35.0+20060710.5 lib32gcc-s1_11.2.0-10 lib32stdc++6_11.2.0-10 libacl1_2.3.1-1 libapt-pkg6.0_2.3.11 libarchive-zip-perl_1.68-1 libasan5_9.4.0-3 libasan6_11.2.0-10 libatomic1_11.2.0-10 libattr1_1:2.5.1-1 libaudit-common_1:3.0.6-1 libaudit1_1:3.0.6-1 libbinutils_2.37-7 libblkid1_2.37.2-4 libbrotli1_1.0.9-2+b2 libbsd0_0.11.3-1 libbz2-1.0_1.0.8-4 libc-bin_2.32-4 libc-dev-bin_2.32-4 libc6_2.32-4 libc6-dev_2.32-4 libc6-i386_2.32-4 libcap-ng0_0.7.9-2.2+b1 libcap2_1:2.44-1 libcc1-0_11.2.0-10 libclang-common-13-dev_1:13.0.0-8 libclang-cpp13_1:13.0.0-8 libclang1-13_1:13.0.0-8 libcom-err2_1.46.4-1 libcrypt-dev_1:4.4.25-2 libcrypt1_1:4.4.25-2 libctf-nobfd0_2.37-7 libctf0_2.37-7 libcurl3-gnutls_7.74.0-1.3+b1 libcurl4-gnutls-dev_7.74.0-1.3+b1 libdb5.3_5.3.28+dfsg1-0.8 libdebconfclient0_0.260 libdebhelper-perl_13.5.2 libdeflate-dev_1.8-1 libdeflate0_1.8-1 libdpkg-perl_1.20.9 libedit2_3.1-20210910-1 libelf1_0.185-2 libext2fs2_1.46.4-1 libfakeroot_1.26-1 libffi8_3.4.2-3 libfile-stripnondeterminism-perl_1.12.0-2 libgc1_1:8.0.4-3 libgcc-11-dev_11.2.0-10 libgcc-9-dev_9.4.0-3 libgcc-s1_11.2.0-10 libgcrypt20_1.9.4-3+b1 libgdbm-compat4_1.22-1 libgdbm6_1.22-1 libgmp10_2:6.2.1+dfsg-2 libgnutls30_3.7.2-2 libgomp1_11.2.0-10 libgpg-error0_1.42-3 libgssapi-krb5-2_1.18.3-7 libhogweed6_3.7.3-1 libhts-dev_1.13+ds-2 libhts3_1.13+ds-2 libhtscodecs2_1.1.1-3+b1 libicu67_67.1-7 libidn2-0_2.3.2-2 libisl23_0.24-2 libitm1_11.2.0-10 libk5crypto3_1.18.3-7 libkeyutils1_1.6.1-2 libkrb5-3_1.18.3-7 libkrb5support0_1.18.3-7 libldap-2.4-2_2.4.59+dfsg-1 libllvm13_1:13.0.0-8 liblsan0_11.2.0-10 liblz4-1_1.9.3-2 liblzma-dev_5.2.5-2 liblzma5_5.2.5-2 libmagic-mgc_1:5.39-3 libmagic1_1:5.39-3 libmd0_1.0.4-1 libmount1_2.37.2-4 libmpc3_1.2.1-1 libmpfr6_4.1.0-3 libnettle8_3.7.3-1 libnghttp2-14_1.43.0-1 libnsl-dev_1.3.0-2 libnsl2_1.3.0-2 libobjc-11-dev_11.2.0-10 libobjc-9-dev_9.4.0-3 libobjc4_11.2.0-10 libomp-13-dev_1:13.0.0-8 libomp5-13_1:13.0.0-8 libp11-kit0_0.24.0-5 libpam-modules_1.4.0-10 libpam-modules-bin_1.4.0-10 libpam-runtime_1.4.0-10 libpam0g_1.4.0-10 libpcre2-8-0_10.36-2 libpcre3_2:8.39-13 libperl5.32_5.32.1-6 libpipeline1_1.5.3-1 libpsl5_0.21.0-1.2 libquadmath0_11.2.0-10 librtmp1_2.4+20151223.gitfa8646d.1-2+b2 libsasl2-2_2.1.27+dfsg-2.1 libsasl2-modules-db_2.1.27+dfsg-2.1 libseccomp2_2.5.2-2 libselinux1_3.1-3 libsemanage-common_3.1-1 libsemanage1_3.1-1+b2 libsepol1_3.1-1 libsigsegv2_2.13-1 libsimde-dev_0.7.2-5 libsmartcols1_2.37.2-4 libss2_1.46.4-1 libssh2-1_1.10.0-2 libssl1.1_1.1.1l-1 libstdc++-11-dev_11.2.0-10 libstdc++6_11.2.0-10 libsub-override-perl_0.09-2 libsystemd0_249.5-1 libtasn1-6_4.17.0-2 libtinfo6_6.2+20210905-1 libtirpc-common_1.3.2-2 libtirpc-dev_1.3.2-2 libtirpc3_1.3.2-2 libtool_2.4.6-15 libtsan0_11.2.0-10 libubsan1_11.2.0-10 libuchardet0_0.0.7-1 libudev1_249.5-1 libunistring2_0.9.10-6 libuuid1_2.37.2-4 libxml2_2.9.12+dfsg-5 libxxhash0_0.8.0-2 libz3-4_4.8.12-1+b1 libzstd1_1.4.8+dfsg-3 linux-libc-dev_5.14.12-1 login_1:4.8.1-1 logsave_1.46.4-1 lsb-base_11.1.0 m4_1.4.18-5 make_4.3-4.1 man-db_2.9.4-2 mawk_1.3.4.20200120-2 mount_2.37.2-4 ncurses-base_6.2+20210905-1 ncurses-bin_6.2+20210905-1 passwd_1:4.8.1-1 patch_2.7.6-7 perl_5.32.1-6 perl-base_5.32.1-6 perl-modules-5.32_5.32.1-6 po-debconf_1.0.21+nmu1 qt5-qmake_5.15.2+dfsg-12 qt5-qmake-bin_5.15.2+dfsg-12 qtchooser_66-2 rpcsvc-proto_1.4.2-4 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.8-1 sensible-utils_0.0.17 sysvinit-utils_3.00-1 tar_1.34+dfsg-1 tzdata_2021e-1 util-linux_2.37.2-4 vim-common_2:8.2.3455-2 xxd_2:8.2.3455-2 xz-utils_5.2.5-2 zlib1g_1:1.2.11.dfsg-2 zlib1g-dev_1:1.2.11.dfsg-2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Format: 3.0 (quilt)
Source: rna-star
Binary: rna-star
Architecture: amd64 arm64 ppc64el mips64el
Version: 2.7.9a+dfsg-3
Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
Uploaders: Steffen Moeller <moeller@debian.org>, Andreas Tille <tille@debian.org>, Sascha Steinbiss <satta@debian.org>, Nilesh Patra <nilesh@debian.org>
Homepage: https://github.com/alexdobin/STAR/
Standards-Version: 4.5.1
Vcs-Browser: https://salsa.debian.org/med-team/rna-star
Vcs-Git: https://salsa.debian.org/med-team/rna-star.git
Testsuite: autopkgtest
Build-Depends: debhelper-compat (= 13), libhts-dev, vim-common, xxd, zlib1g-dev, libsimde-dev
Package-List:
 rna-star deb science optional arch=amd64,arm64,ppc64el,mips64el
Checksums-Sha1:
 bad661623c96e4bd8d222ca35c2e3fc028f5c016 610764 rna-star_2.7.9a+dfsg.orig.tar.xz
 f6a3e79955f7a388e5079d222256d9a55816ed52 377344 rna-star_2.7.9a+dfsg-3.debian.tar.xz
Checksums-Sha256:
 8177d8d2055b40de9b172af2970a113284e7313ab9a7b9e3f8ef221dbbd38be6 610764 rna-star_2.7.9a+dfsg.orig.tar.xz
 baccc0b17c900e71b81dd06a04ef88e3fe352c1aa216c2929b661745c4775cc1 377344 rna-star_2.7.9a+dfsg-3.debian.tar.xz
Files:
 5d50de1ec3cb876836e138cb1fa247fd 610764 rna-star_2.7.9a+dfsg.orig.tar.xz
 a5f7713ce560b49cbfe7fbdfd568800d 377344 rna-star_2.7.9a+dfsg-3.debian.tar.xz

-----BEGIN PGP SIGNATURE-----

iQJIBAEBCgAyFiEEPpmlJvXcwMu/HO6mALrnSzQzafEFAmEc4RwUHG5wYXRyYTk3
NEBnbWFpbC5jb20ACgkQALrnSzQzafF7iRAAqzWadLiMyq219SeKMLGvOOm4nxKw
u2EH+LtMFXd71SXZy4t2C9vWAboP6nVOLg7P2DKngHCMD5/6LAh7VKQROzE2I8T6
qQZ5Y9hPG/hKvHpAIzlFd+XB7sElMz4P29NpdjUzi020SHaTbxTqy5wCwTY1NeLm
aR42pYbmrZD7moZ24h6YI97gLFg2+7x5Q+ER7p7x6tjB5rK2vYmtzegL+Std5N+g
9DuOEFEMk+LnJdV8iFnNIHJovdTRpbKcoMCM2v89cPIx2OLP12itRVgs5SdBG+br
ZNFxu9f6ESDEtff2rUyb8QfoxljkuMt0kRdZZl/9rXecsaR3tnNi7iodHpDYUKv+
FfNkDzWddhhWVG3oo3AT0Lw1K0yttl/fuxY5AAmM6ACnD2YRyOaTOGN7y3J2ggAs
/IFBd4hgcWxwjhfSb7G1q1NcSJLmFjYS3ofFSwHAH5Gtw+w/Tv3Uz14ZNTfEMcvz
yeTOGjN92LdGkG2QZxs3S/L27xaBTVxHwpt0PaAdriB773CJPD9Ftz9sHnZpfsDQ
HGJAg2VHbIMeVeD1QGWzIVs0rnsF7HgYLbaFN1xIZW5A8Kk/QBEYgfW9+dnWNIq/
6Uk7hjtRON2r+HFImx3Al0abcrZTREIXFknjH5XnQM7+qnY7ED48/kbgWv/y8t/g
mANxUnbrdWd/EWo=
=8G+X
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/tmp/dpkg-verify-sig.RnJASdSH/trustedkeys.kbx': General error
gpgv: Signature made Wed Aug 18 10:29:48 2021 UTC
gpgv:                using RSA key 3E99A526F5DCC0CBBF1CEEA600BAE74B343369F1
gpgv:                issuer "npatra974@gmail.com"
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./rna-star_2.7.9a+dfsg-3.dsc
dpkg-source: info: extracting rna-star in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking rna-star_2.7.9a+dfsg.orig.tar.xz
dpkg-source: info: unpacking rna-star_2.7.9a+dfsg-3.debian.tar.xz
dpkg-source: info: using patch list from debian/patches/series
dpkg-source: info: applying donotuse_own_htslib.patch
dpkg-source: info: applying mips_shm_noreserve.patch
dpkg-source: info: applying reproducible.patch
dpkg-source: info: applying mathRoutinesNotInScope.patch
dpkg-source: info: applying do-not-enforce-avx2.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-538814ea-efd2-418b-9155-9729e718a499
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package rna-star
dpkg-buildpackage: info: source version 2.7.9a+dfsg-3
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Nilesh Patra <nilesh@debian.org>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 debian/rules clean
dh clean --sourcedirectory=source
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
cd source && /usr/bin/make clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_autoreconf_clean -O--sourcedirectory=source
   dh_clean -O--sourcedirectory=source
 debian/rules binary
dh binary --sourcedirectory=source
   dh_update_autotools_config -O--sourcedirectory=source
   dh_autoreconf -O--sourcedirectory=source
   dh_auto_configure -O--sourcedirectory=source
   debian/rules override_dh_auto_build
make[1]: Entering directory '/<<PKGBUILDDIR>>'
mkdir --parents /<<PKGBUILDDIR>>/debian/rna-star/usr/lib/rna-star/bin
dh_auto_clean ; dh_auto_build -- SFX=-avx2 CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-avx2 STARlong-avx2 &&  dh_auto_clean ; dh_auto_build -- SFX=-avx CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-avx STARlong-avx &&  dh_auto_clean ; dh_auto_build -- SFX=-sse4.1 CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-sse4.1 STARlong-sse4.1 &&  dh_auto_clean ; dh_auto_build -- SFX=-ssse3 CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-ssse3 STARlong-ssse3 &&  dh_auto_clean ; dh_auto_build -- SFX=-sse3 CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CXXFLAGS="-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-sse3 STARlong-sse3 &&  true
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-avx2 "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CXXFLAGS=-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-avx2 STARlong-avx2
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
2 warnings generated.
g++ -o STAR-avx2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-avx2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx2 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-avx "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CXXFLAGS=-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-avx STARlong-avx
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
In file included from opal.cpp:10:
./simde_avx2.h:33980:11: warning: '_mm_i32gather_epi32' macro redefined [-Wmacro-redefined]
  #define _mm_i32gather_epi32(base_addr, vindex, scale) simde_mm_i32gather_epi32(SIMDE_CHECKED_REINTERPRET_CAST(int32_t const*, int const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1101:9: note: previous definition is here
#define _mm_i32gather_epi32(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34043:11: warning: '_mm256_i32gather_epi32' macro redefined [-Wmacro-redefined]
  #define _mm256_i32gather_epi32(base_addr, vindex, scale) simde_mm256_i32gather_epi32(SIMDE_CHECKED_REINTERPRET_CAST(int32_t const*, int const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1106:9: note: previous definition is here
#define _mm256_i32gather_epi32(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34106:11: warning: '_mm_i64gather_epi32' macro redefined [-Wmacro-redefined]
  #define _mm_i64gather_epi32(base_addr, vindex, scale) simde_mm_i64gather_epi32(SIMDE_CHECKED_REINTERPRET_CAST(int32_t const*, int const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1111:9: note: previous definition is here
#define _mm_i64gather_epi32(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34170:11: warning: '_mm256_i64gather_epi32' macro redefined [-Wmacro-redefined]
  #define _mm256_i64gather_epi32(base_addr, vindex, scale) simde_mm256_i64gather_epi32(SIMDE_CHECKED_REINTERPRET_CAST(int32_t const*, int const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1116:9: note: previous definition is here
#define _mm256_i64gather_epi32(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34238:11: warning: '_mm_i32gather_epi64' macro redefined [-Wmacro-redefined]
  #define _mm_i32gather_epi64(base_addr, vindex, scale) simde_mm_i32gather_epi64(HEDLEY_REINTERPRET_CAST(int64_t const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1121:9: note: previous definition is here
#define _mm_i32gather_epi64(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34310:11: warning: '_mm256_i32gather_epi64' macro redefined [-Wmacro-redefined]
  #define _mm256_i32gather_epi64(base_addr, vindex, scale) simde_mm256_i32gather_epi64(HEDLEY_REINTERPRET_CAST(int64_t const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1127:9: note: previous definition is here
#define _mm256_i32gather_epi64(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34382:11: warning: '_mm_i64gather_epi64' macro redefined [-Wmacro-redefined]
  #define _mm_i64gather_epi64(base_addr, vindex, scale) simde_mm_i64gather_epi64(HEDLEY_REINTERPRET_CAST(int64_t const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1133:9: note: previous definition is here
#define _mm_i64gather_epi64(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34453:11: warning: '_mm256_i64gather_epi64' macro redefined [-Wmacro-redefined]
  #define _mm256_i64gather_epi64(base_addr, vindex, scale) simde_mm256_i64gather_epi64(HEDLEY_REINTERPRET_CAST(int64_t const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1139:9: note: previous definition is here
#define _mm256_i64gather_epi64(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34521:11: warning: '_mm_i32gather_ps' macro redefined [-Wmacro-redefined]
  #define _mm_i32gather_ps(base_addr, vindex, scale) simde_mm_i32gather_ps(SIMDE_CHECKED_REINTERPRET_CAST(simde_float32 const*, float const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1068:9: note: previous definition is here
#define _mm_i32gather_ps(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34586:11: warning: '_mm256_i32gather_ps' macro redefined [-Wmacro-redefined]
  #define _mm256_i32gather_ps(base_addr, vindex, scale) simde_mm256_i32gather_ps(SIMDE_CHECKED_REINTERPRET_CAST(simde_float32 const*, float const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1076:9: note: previous definition is here
#define _mm256_i32gather_ps(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34651:11: warning: '_mm_i64gather_ps' macro redefined [-Wmacro-redefined]
  #define _mm_i64gather_ps(base_addr, vindex, scale) simde_mm_i64gather_ps(SIMDE_CHECKED_REINTERPRET_CAST(simde_float32 const*, float const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1085:9: note: previous definition is here
#define _mm_i64gather_ps(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34716:11: warning: '_mm256_i64gather_ps' macro redefined [-Wmacro-redefined]
  #define _mm256_i64gather_ps(base_addr, vindex, scale) simde_mm256_i64gather_ps(SIMDE_CHECKED_REINTERPRET_CAST(simde_float32 const*, float const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1093:9: note: previous definition is here
#define _mm256_i64gather_ps(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34781:11: warning: '_mm_i32gather_pd' macro redefined [-Wmacro-redefined]
  #define _mm_i32gather_pd(base_addr, vindex, scale) simde_mm_i32gather_pd(HEDLEY_REINTERPRET_CAST(simde_float64 const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1034:9: note: previous definition is here
#define _mm_i32gather_pd(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34846:11: warning: '_mm256_i32gather_pd' macro redefined [-Wmacro-redefined]
  #define _mm256_i32gather_pd(base_addr, vindex, scale) simde_mm256_i32gather_pd(HEDLEY_REINTERPRET_CAST(simde_float64 const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1042:9: note: previous definition is here
#define _mm256_i32gather_pd(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34911:11: warning: '_mm_i64gather_pd' macro redefined [-Wmacro-redefined]
  #define _mm_i64gather_pd(base_addr, vindex, scale) simde_mm_i64gather_pd(HEDLEY_REINTERPRET_CAST(simde_float64 const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1051:9: note: previous definition is here
#define _mm_i64gather_pd(m, i, s) \
        ^
In file included from opal.cpp:10:
./simde_avx2.h:34976:11: warning: '_mm256_i64gather_pd' macro redefined [-Wmacro-redefined]
  #define _mm256_i64gather_pd(base_addr, vindex, scale) simde_mm256_i64gather_pd(HEDLEY_REINTERPRET_CAST(simde_float64 const*, base_addr), vindex, scale)
          ^
/usr/lib/llvm-13/lib/clang/13.0.0/include/avx2intrin.h:1059:9: note: previous definition is here
#define _mm256_i64gather_pd(m, i, s) \
        ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
16 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
2 warnings generated.
g++ -o STAR-avx -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-avx -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mavx SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-sse4.1 "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CXXFLAGS=-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-sse4.1 STARlong-sse4.1
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:122:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
./simde_avx2.h:27303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:120:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
./simde_avx2.h:35406:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35407:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35419:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:118:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
./simde_avx2.h:37623:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37624:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37636:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:117:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
./simde_avx2.h:32740:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32741:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32753:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:88:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return _mmxxx_testz_si(a, a);
           ^
opal.cpp:26:25: note: expanded from macro '_mmxxx_testz_si'
#define _mmxxx_testz_si _mm256_testz_si256
                        ^
./simde_avx2.h:32208:36: note: expanded from macro '_mm256_testz_si256'
  #define _mm256_testz_si256(a, b) simde_mm256_testz_si256(a, b)
                                   ^
./simde_avx2.h:32189:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32190:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
opal.cpp:121:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
./simde_avx2.h:33521:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33536:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
./simde_avx2.h:32651:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32652:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32666:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:305:26: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = SIMD::min(ofTest, ulH_P);
                         ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:346:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:136:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
./simde_avx2.h:27329:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:134:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
./simde_avx2.h:35435:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35436:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35448:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:132:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
./simde_avx2.h:37495:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37496:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37510:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:131:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
./simde_avx2.h:32534:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32535:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32549:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:133:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
./simde_avx2.h:35522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35523:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35535:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:135:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
./simde_avx2.h:33552:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33553:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33567:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:208:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        scoreZeroes = SIMD::set1(LOWER_BOUND);
                      ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:303:26: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = _mmxxx_and_si(ofTest, ulH_P);
                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:358:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:449:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = SIMD::add(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:450:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = SIMD::add(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:452:24: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = SIMD::add(maxH, resetMaskPacked);
                       ^
opal.cpp:108:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
./simde_avx2.h:27277:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:106:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epu8(a, b); }
                                                                           ^
opal.cpp:32:27: note: expanded from macro '_mmxxx_max_epu8'
#define _mmxxx_max_epu8   _mm256_max_epu8
                          ^
./simde_avx2.h:35337:33: note: expanded from macro '_mm256_max_epu8'
  #define _mm256_max_epu8(a, b) simde_mm256_max_epu8(a, b)
                                ^
./simde_avx2.h:35319:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35320:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35332:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:104:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
./simde_avx2.h:37594:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37595:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37607:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:103:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
./simde_avx2.h:32711:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32712:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32724:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:107:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
./simde_avx2.h:33490:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33491:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33505:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:563:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
opal.cpp:559:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
opal.cpp:561:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi8(a, b); }
                                                                           ^
opal.cpp:33:27: note: expanded from macro '_mmxxx_max_epi8'
#define _mmxxx_max_epi8   _mm256_max_epi8
                          ^
./simde_avx2.h:35308:33: note: expanded from macro '_mm256_max_epi8'
  #define _mm256_max_epi8(a, b) simde_mm256_max_epi8(a, b)
                                ^
./simde_avx2.h:35290:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35291:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:560:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi8(a, b); }
                                                                           ^
opal.cpp:31:27: note: expanded from macro '_mmxxx_min_epi8'
#define _mmxxx_min_epi8   _mm256_min_epi8
                          ^
./simde_avx2.h:35482:33: note: expanded from macro '_mm256_min_epi8'
  #define _mm256_min_epi8(a, b) simde_mm256_min_epi8(a, b)
                                ^
./simde_avx2.h:35464:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35465:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35477:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:558:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
opal.cpp:562:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:576:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
opal.cpp:572:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
opal.cpp:574:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
opal.cpp:573:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi16(a, b); }
                                                                           ^
opal.cpp:39:28: note: expanded from macro '_mmxxx_min_epi16'
#define _mmxxx_min_epi16   _mm256_min_epi16
                           ^
./simde_avx2.h:35511:34: note: expanded from macro '_mm256_min_epi16'
  #define _mm256_min_epi16(a, b) simde_mm256_min_epi16(a, b)
                                 ^
./simde_avx2.h:35493:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35494:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35506:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:571:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
opal.cpp:575:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:589:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
opal.cpp:585:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
opal.cpp:587:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
opal.cpp:586:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
opal.cpp:584:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
opal.cpp:588:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
548 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -o STAR-sse4.1 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-sse4.1 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse4.1 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-ssse3 "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CXXFLAGS=-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-ssse3 STARlong-ssse3
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:208:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        scoreZeroes = SIMD::set1(LOWER_BOUND);
                      ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:303:26: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = _mmxxx_and_si(ofTest, ulH_P);
                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:358:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:449:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = SIMD::add(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:450:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = SIMD::add(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:452:24: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = SIMD::add(maxH, resetMaskPacked);
                       ^
opal.cpp:108:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
./simde_avx2.h:27277:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:106:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epu8(a, b); }
                                                                           ^
opal.cpp:32:27: note: expanded from macro '_mmxxx_max_epu8'
#define _mmxxx_max_epu8   _mm256_max_epu8
                          ^
./simde_avx2.h:35337:33: note: expanded from macro '_mm256_max_epu8'
  #define _mm256_max_epu8(a, b) simde_mm256_max_epu8(a, b)
                                ^
./simde_avx2.h:35319:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35320:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35332:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:104:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
./simde_avx2.h:37594:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37595:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37607:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:103:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
./simde_avx2.h:32711:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32712:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32724:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
./simde_avx2.h:32651:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32652:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32666:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:88:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return _mmxxx_testz_si(a, a);
           ^
opal.cpp:26:25: note: expanded from macro '_mmxxx_testz_si'
#define _mmxxx_testz_si _mm256_testz_si256
                        ^
./simde_avx2.h:32208:36: note: expanded from macro '_mm256_testz_si256'
  #define _mm256_testz_si256(a, b) simde_mm256_testz_si256(a, b)
                                   ^
./simde_avx2.h:32189:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32190:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
opal.cpp:107:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
./simde_avx2.h:33490:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33491:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33505:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:122:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
./simde_avx2.h:27303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:120:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
./simde_avx2.h:35406:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35407:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35419:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:118:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
./simde_avx2.h:37623:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37624:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37636:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:117:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
./simde_avx2.h:32740:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32741:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32753:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:121:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
./simde_avx2.h:33521:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33536:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:305:26: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = SIMD::min(ofTest, ulH_P);
                         ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:346:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:136:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
./simde_avx2.h:27329:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:134:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
./simde_avx2.h:35435:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35436:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35448:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:132:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
./simde_avx2.h:37495:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37496:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37510:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:131:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
./simde_avx2.h:32534:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32535:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32549:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:133:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
./simde_avx2.h:35522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35523:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35535:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:135:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
./simde_avx2.h:33552:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33553:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33567:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:563:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
opal.cpp:559:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
opal.cpp:561:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi8(a, b); }
                                                                           ^
opal.cpp:33:27: note: expanded from macro '_mmxxx_max_epi8'
#define _mmxxx_max_epi8   _mm256_max_epi8
                          ^
./simde_avx2.h:35308:33: note: expanded from macro '_mm256_max_epi8'
  #define _mm256_max_epi8(a, b) simde_mm256_max_epi8(a, b)
                                ^
./simde_avx2.h:35290:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35291:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:560:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi8(a, b); }
                                                                           ^
opal.cpp:31:27: note: expanded from macro '_mmxxx_min_epi8'
#define _mmxxx_min_epi8   _mm256_min_epi8
                          ^
./simde_avx2.h:35482:33: note: expanded from macro '_mm256_min_epi8'
  #define _mm256_min_epi8(a, b) simde_mm256_min_epi8(a, b)
                                ^
./simde_avx2.h:35464:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35465:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35477:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:558:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
opal.cpp:562:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:576:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
opal.cpp:572:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
opal.cpp:574:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
opal.cpp:573:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi16(a, b); }
                                                                           ^
opal.cpp:39:28: note: expanded from macro '_mmxxx_min_epi16'
#define _mmxxx_min_epi16   _mm256_min_epi16
                           ^
./simde_avx2.h:35511:34: note: expanded from macro '_mm256_min_epi16'
  #define _mm256_min_epi16(a, b) simde_mm256_min_epi16(a, b)
                                 ^
./simde_avx2.h:35493:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35494:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35506:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:571:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
opal.cpp:575:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:589:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
opal.cpp:585:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
opal.cpp:587:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
opal.cpp:586:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
opal.cpp:584:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
opal.cpp:588:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
548 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -o STAR-ssse3 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-ssse3 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -mssse3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-sse3 "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CXXFLAGS=-g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-sse3 STARlong-sse3
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:208:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        scoreZeroes = SIMD::set1(LOWER_BOUND);
                      ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:303:26: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = _mmxxx_and_si(ofTest, ulH_P);
                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:358:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:449:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = SIMD::add(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:450:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = SIMD::add(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:452:24: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = SIMD::add(maxH, resetMaskPacked);
                       ^
opal.cpp:108:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
./simde_avx2.h:27277:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:106:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epu8(a, b); }
                                                                           ^
opal.cpp:32:27: note: expanded from macro '_mmxxx_max_epu8'
#define _mmxxx_max_epu8   _mm256_max_epu8
                          ^
./simde_avx2.h:35337:33: note: expanded from macro '_mm256_max_epu8'
  #define _mm256_max_epu8(a, b) simde_mm256_max_epu8(a, b)
                                ^
./simde_avx2.h:35319:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35320:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35332:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:104:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
./simde_avx2.h:37594:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37595:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37607:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:103:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
./simde_avx2.h:32711:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32712:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32724:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
./simde_avx2.h:32651:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32652:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32666:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:88:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return _mmxxx_testz_si(a, a);
           ^
opal.cpp:26:25: note: expanded from macro '_mmxxx_testz_si'
#define _mmxxx_testz_si _mm256_testz_si256
                        ^
./simde_avx2.h:32208:36: note: expanded from macro '_mm256_testz_si256'
  #define _mm256_testz_si256(a, b) simde_mm256_testz_si256(a, b)
                                   ^
./simde_avx2.h:32189:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32190:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
opal.cpp:107:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
./simde_avx2.h:33490:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33491:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33505:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:122:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
./simde_avx2.h:27303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:120:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
./simde_avx2.h:35406:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35407:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35419:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:118:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
./simde_avx2.h:37623:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37624:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37636:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:117:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
./simde_avx2.h:32740:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32741:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32753:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:121:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
./simde_avx2.h:33521:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33536:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:305:26: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = SIMD::min(ofTest, ulH_P);
                         ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:346:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:136:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
./simde_avx2.h:27329:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:134:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
./simde_avx2.h:35435:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35436:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35448:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:132:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
./simde_avx2.h:37495:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37496:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37510:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:131:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
./simde_avx2.h:32534:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32535:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32549:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:133:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
./simde_avx2.h:35522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35523:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35535:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:135:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
./simde_avx2.h:33552:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33553:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33567:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:563:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
opal.cpp:559:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
opal.cpp:561:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi8(a, b); }
                                                                           ^
opal.cpp:33:27: note: expanded from macro '_mmxxx_max_epi8'
#define _mmxxx_max_epi8   _mm256_max_epi8
                          ^
./simde_avx2.h:35308:33: note: expanded from macro '_mm256_max_epi8'
  #define _mm256_max_epi8(a, b) simde_mm256_max_epi8(a, b)
                                ^
./simde_avx2.h:35290:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35291:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:560:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi8(a, b); }
                                                                           ^
opal.cpp:31:27: note: expanded from macro '_mmxxx_min_epi8'
#define _mmxxx_min_epi8   _mm256_min_epi8
                          ^
./simde_avx2.h:35482:33: note: expanded from macro '_mm256_min_epi8'
  #define _mm256_min_epi8(a, b) simde_mm256_min_epi8(a, b)
                                ^
./simde_avx2.h:35464:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35465:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35477:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:558:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
opal.cpp:562:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:576:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
opal.cpp:572:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
opal.cpp:574:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
opal.cpp:573:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi16(a, b); }
                                                                           ^
opal.cpp:39:28: note: expanded from macro '_mmxxx_min_epi16'
#define _mmxxx_min_epi16   _mm256_min_epi16
                           ^
./simde_avx2.h:35511:34: note: expanded from macro '_mm256_min_epi16'
  #define _mm256_min_epi16(a, b) simde_mm256_min_epi16(a, b)
                                 ^
./simde_avx2.h:35493:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35494:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35506:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:571:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
opal.cpp:575:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:589:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
opal.cpp:585:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
opal.cpp:587:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
opal.cpp:586:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
opal.cpp:584:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
opal.cpp:588:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
548 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
2 warnings generated.
g++ -o STAR-sse3 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-sse3 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -msse3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
dh_auto_clean ; dh_auto_build -- SFX=-plain CCFLAGS_common_add="-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" CCFLAGS="-flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" LDFLAGS_add="-Wl,-z,relro -Wl,-z,now" STAR-plain STARlong-plain
	cd source && make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
'rm' -f *.o opal/opal.o STAR STARstatic STARlong Depend.list parametersDefault.xxd
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
	cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-plain "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CCFLAGS=-flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-plain STARlong-plain
make[2]: Entering directory '/<<PKGBUILDDIR>>/source'
xxd -i parametersDefault > parametersDefault.xxd
echo BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c
'rm' -f ./Depend.list
g++ -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -MM BAMbinSortByCoordinate.cpp BAMbinSortUnmapped.cpp BAMfunctions.cpp BAMoutput.cpp Chain.cpp ChimericAlign.cpp ChimericAlign_chimericBAMoutput.cpp ChimericAlign_chimericJunctionOutput.cpp ChimericAlign_chimericStitching.cpp ChimericDetection.cpp ChimericDetection_chimericDetectionMult.cpp ChimericSegment.cpp ClipCR4.cpp ClipMate_clip.cpp ClipMate_clipChunk.cpp ClipMate_initialize.cpp ErrorWarning.cpp GTF.cpp GTF_superTranscript.cpp GTF_transcriptGeneSJ.cpp Genome.cpp Genome_genomeGenerate.cpp Genome_genomeLoad.cpp Genome_genomeOutLoad.cpp Genome_insertSequences.cpp Genome_transformGenome.cpp GlobalVariables.cpp InOutStreams.cpp OutSJ.cpp PackedArray.cpp Parameters.cpp ParametersChimeric_initialize.cpp ParametersClip_initialize.cpp ParametersGenome.cpp ParametersSolo.cpp Parameters_closeReadsFiles.cpp Parameters_openReadsFiles.cpp Parameters_readFilesInit.cpp Parameters_readSAMheader.cpp Parameters_samAttributes.cpp Quantifications.cpp ReadAlign.cpp ReadAlignChunk.cpp ReadAlignChunk_mapChunk.cpp ReadAlignChunk_processChunks.cpp ReadAlign_CIGAR.cpp ReadAlign_alignBAM.cpp ReadAlign_assignAlignToWindow.cpp ReadAlign_calcCIGAR.cpp ReadAlign_chimericDetection.cpp ReadAlign_chimericDetectionOld.cpp ReadAlign_chimericDetectionOldOutput.cpp ReadAlign_chimericDetectionPEmerged.cpp ReadAlign_createExtendWindowsWithAlign.cpp ReadAlign_mapOneRead.cpp ReadAlign_mapOneReadSpliceGraph.cpp ReadAlign_mappedFilter.cpp ReadAlign_maxMappableLength2strands.cpp ReadAlign_multMapSelect.cpp ReadAlign_oneRead.cpp ReadAlign_outputAlignments.cpp ReadAlign_outputSpliceGraphSAM.cpp ReadAlign_outputTranscriptCIGARp.cpp ReadAlign_outputTranscriptSAM.cpp ReadAlign_outputTranscriptSJ.cpp ReadAlign_outputVariation.cpp ReadAlign_peOverlapMergeMap.cpp ReadAlign_quantTranscriptome.cpp ReadAlign_stitchPieces.cpp ReadAlign_stitchWindowSeeds.cpp ReadAlign_storeAligns.cpp ReadAlign_transformGenome.cpp ReadAlign_waspMap.cpp STAR.cpp SequenceFuns.cpp SharedMemory.cpp Solo.cpp SoloBarcode.cpp SoloBarcode_extractBarcode.cpp SoloFeature.cpp SoloFeature_addBAMtags.cpp SoloFeature_cellFiltering.cpp SoloFeature_collapseUMI_Graph.cpp SoloFeature_collapseUMIall.cpp SoloFeature_collapseUMIall_multiMappers.cpp SoloFeature_countCBgeneUMI.cpp SoloFeature_countSmartSeq.cpp SoloFeature_countVelocyto.cpp SoloFeature_emptyDrops_CR.cpp SoloFeature_loadRawMatrix.cpp SoloFeature_outputResults.cpp SoloFeature_processRecords.cpp SoloFeature_quantTranscript.cpp SoloFeature_redistributeReadsByCB.cpp SoloFeature_statsOutput.cpp SoloFeature_sumThreads.cpp SoloRead.cpp SoloReadBarcode.cpp SoloReadBarcode_getCBandUMI.cpp SoloReadFeature.cpp SoloReadFeature_inputRecords.cpp SoloReadFeature_record.cpp SoloRead_record.cpp SpliceGraph.cpp SpliceGraph_findSuperTr.cpp SpliceGraph_swScoreSpliced.cpp SpliceGraph_swTraceBack.cpp Stats.cpp SuffixArrayFuns.cpp SuperTranscriptome.cpp ThreadControl.cpp TimeFunctions.cpp Transcript.cpp Transcript_alignScore.cpp Transcript_convertGenomeCigar.cpp Transcript_generateCigarP.cpp Transcript_transformGenome.cpp Transcript_variationAdjust.cpp Transcript_variationOutput.cpp Transcriptome.cpp Transcriptome_classifyAlign.cpp Transcriptome_geneCountsAddAlign.cpp Transcriptome_geneFullAlignOverlap.cpp Transcriptome_quantAlign.cpp Variation.cpp bamRemoveDuplicates.cpp bamSortByCoordinate.cpp binarySearch2.cpp blocksOverlap.cpp extendAlign.cpp funCompareUintAndSuffixes.cpp funCompareUintAndSuffixesMemcmp.cpp genomeParametersWrite.cpp genomeSAindex.cpp genomeScanFastaFiles.cpp insertSeqSA.cpp mapThreadsSpawn.cpp outputSJ.cpp readLoad.cpp samHeaders.cpp serviceFuns.cpp signalFromBAM.cpp sjAlignSplit.cpp sjdbBuildIndex.cpp sjdbInsertJunctions.cpp sjdbLoadFromFiles.cpp sjdbLoadFromStream.cpp sjdbPrepare.cpp soloInputFeatureUMI.cpp stitchAlignToTranscript.cpp stitchGapIndel.cpp stitchWindowAligns.cpp streamFuns.cpp stringSubstituteAll.cpp sysRemoveDir.cpp twoPassRunPass1.cpp bam_cat.c parametersDefault.xxd >> Depend.list
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: parametersDefault.xxd: 'linker' input unused [-Wunused-command-line-argument]
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMI_Graph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_collapseUMIall_multiMappers.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersClip_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clip.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipCR4.cpp
cd opal && \
g++ -c -I./ -std=c++11 -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3  opal.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_clipChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ClipMate_initialize.cpp
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:563:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
./simde_avx2.h:27277:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:559:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
./simde_avx2.h:37594:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37595:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37607:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
./simde_avx2.h:32651:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32652:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32666:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:561:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi8(a, b); }
                                                                           ^
opal.cpp:33:27: note: expanded from macro '_mmxxx_max_epi8'
#define _mmxxx_max_epi8   _mm256_max_epi8
                          ^
./simde_avx2.h:35308:33: note: expanded from macro '_mm256_max_epi8'
  #define _mm256_max_epi8(a, b) simde_mm256_max_epi8(a, b)
                                ^
./simde_avx2.h:35290:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35291:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:560:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi8(a, b); }
                                                                           ^
opal.cpp:31:27: note: expanded from macro '_mmxxx_min_epi8'
#define _mmxxx_min_epi8   _mm256_min_epi8
                          ^
./simde_avx2.h:35482:33: note: expanded from macro '_mm256_min_epi8'
  #define _mm256_min_epi8(a, b) simde_mm256_min_epi8(a, b)
                                ^
./simde_avx2.h:35464:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35465:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35477:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:558:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
./simde_avx2.h:32711:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32712:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32724:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:562:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
./simde_avx2.h:33490:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33491:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33505:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:576:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
./simde_avx2.h:27303:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:572:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
./simde_avx2.h:37623:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37624:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37636:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:574:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
./simde_avx2.h:35406:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35407:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35419:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:573:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi16(a, b); }
                                                                           ^
opal.cpp:39:28: note: expanded from macro '_mmxxx_min_epi16'
#define _mmxxx_min_epi16   _mm256_min_epi16
                           ^
./simde_avx2.h:35511:34: note: expanded from macro '_mm256_min_epi16'
  #define _mm256_min_epi16(a, b) simde_mm256_min_epi16(a, b)
                                 ^
./simde_avx2.h:35493:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35494:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35506:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:571:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
./simde_avx2.h:32740:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32741:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32753:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:575:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
./simde_avx2.h:33521:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33536:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:690:14: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        uH = SIMD::sub(R, Q); // -Q + R
             ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:724:49: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                                ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:725:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(uH, resetMaskPacked);
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:730:18: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            uH = SIMD::sub(uH, R); // uH is -Q - c*R
                 ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:954:23: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ulH = _mmxxx_and_si(ulH, resetMaskPacked); // to 0
                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:956:22: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = _mmxxx_and_si(uH, resetMaskPacked);
                     ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:65: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                                                ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:957:36: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                                   ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:957:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                uH = SIMD::add(uH, _mmxxx_and_si(setMaskPacked, SIMD::sub(R, Q)));
                     ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:589:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
./simde_avx2.h:27329:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:585:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
./simde_avx2.h:37495:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:37496:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:37510:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:587:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
./simde_avx2.h:35435:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35436:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35448:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:586:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
./simde_avx2.h:35522:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35523:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35535:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:584:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
./simde_avx2.h:32534:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32535:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:32549:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:588:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
./simde_avx2.h:33552:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:33553:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:33567:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:678:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[0] = SIMD::sub(ZERO_SIMD, Q);
                            ^
opal.cpp:680:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = SIMD::sub(prevHs[r-1], R);
                            ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:945:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[0] = SIMD::sub(prevHs[0], _mmxxx_and_si(setMaskPacked, Q));
                                    ^
opal.cpp:947:87: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
opal.cpp:947:58: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:947:37: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                        prevHs[r] = SIMD::add(prevHs[r], _mmxxx_and_si(setMaskPacked, SIMD::sub(prevHs[r-1], R)));
                                    ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:805:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi minEF = SIMD::min(minE, minF);
                            ^
opal.cpp:807:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedMinEF, minEF);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:639:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi ZERO_SIMD = SIMD::set1(0);
                              ^
opal.cpp:640:38: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_BOUND_SIMD = SIMD::set1(LOWER_BOUND);
                                     ^
opal.cpp:641:44: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi LOWER_SCORE_BOUND_SIMD = SIMD::set1(LOWER_SCORE_BOUND);
                                           ^
opal.cpp:666:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi Q = SIMD::set1(gapOpen);
                      ^
opal.cpp:667:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    const __mxxxi R = SIMD::set1(gapExt);
                      ^
opal.cpp:711:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:737:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        minE = minF = SIMD::set1(UPPER_BOUND);
                      ^
opal.cpp:752:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                  ^
opal.cpp:752:60: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                                                           ^
opal.cpp:752:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevHs[r], Q), SIMD::sub(prevEs[r], R)); // E could overflow
                        ^
opal.cpp:755:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                  ^
opal.cpp:755:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                                                    ^
opal.cpp:755:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R)); // F could overflow
                        ^
opal.cpp:756:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minF = SIMD::min(minF, F); // For overflow detection
                   ^
opal.cpp:759:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(F, E);
                ^
opal.cpp:760:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:761:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P); // H could overflow
                ^
opal.cpp:763:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score in column
                   ^
opal.cpp:776:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        maxLastRowH = SIMD::max(maxLastRowH, H);
                      ^
opal.cpp:785:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            minE = SIMD::min(minE, prevEs[r]);
                   ^
opal.cpp:790:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:826:31: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi greater = SIMD::cmpgt(maxLastRowH, prevMaxLastRowH);
                              ^
opal.cpp:828:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedGreater, greater);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:848:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                bestScore = SIMD::max(maxH, maxLastRowH); // Maximum of last row and column
                            ^
opal.cpp:854:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedBestScore, bestScore);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:888:37: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                    _mmxxx_store_si((__mxxxi*)unpackedPrevMaxLastRowH, prevMaxLastRowH);
                                    ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:896:45: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                                            _mmxxx_store_si((__mxxxi*)unpackedPrevH, prevHs[r]);
                                            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:930:45: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                            ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:931:43: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi setMaskPacked = _mmxxx_load_si((__mxxxi const*)setMask);
                                          ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:934:55: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            const __mxxxi maskedLowerScoreBoundSimd = _mmxxx_and_si(setMaskPacked, LOWER_SCORE_BOUND_SIMD);
                                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:936:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = _mmxxx_and_si(prevEs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:937:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                prevEs[r] = SIMD::add(prevEs[r], maskedLowerScoreBoundSimd);
                            ^
opal.cpp:942:29: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                prevHs[r] = _mmxxx_and_si(prevHs[r], resetMaskPacked);
                            ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:961:27: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = _mmxxx_and_si(maxLastRowH, resetMaskPacked);
                          ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:50: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                                                 ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:962:27: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxLastRowH = SIMD::add(maxLastRowH, _mmxxx_and_si(setMaskPacked, LOWER_BOUND_SIMD));
                          ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:208:23: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
        scoreZeroes = SIMD::set1(LOWER_BOUND);
                      ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:303:26: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = _mmxxx_and_si(ofTest, ulH_P);
                         ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:358:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:449:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = SIMD::add(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:450:39: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = SIMD::add(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:452:24: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = SIMD::add(maxH, resetMaskPacked);
                       ^
opal.cpp:108:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi8(a); }
                                               ^
opal.cpp:34:27: note: expanded from macro '_mmxxx_set1_epi8'
#define _mmxxx_set1_epi8  _mm256_set1_epi8
                          ^
./simde_avx2.h:27282:31: note: expanded from macro '_mm256_set1_epi8'
  #define _mm256_set1_epi8(a) simde_mm256_set1_epi8(a)
                              ^
opal.cpp:106:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epu8(a, b); }
                                                                           ^
opal.cpp:32:27: note: expanded from macro '_mmxxx_max_epu8'
#define _mmxxx_max_epu8   _mm256_max_epu8
                          ^
./simde_avx2.h:35337:33: note: expanded from macro '_mm256_max_epu8'
  #define _mm256_max_epu8(a, b) simde_mm256_max_epu8(a, b)
                                ^
./simde_avx2.h:35319:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:35320:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
./simde_avx2.h:35332:12: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return simde__m256i_from_private(r_);
           ^
opal.cpp:104:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi8(a, b); }
                                                                           ^
opal.cpp:29:27: note: expanded from macro '_mmxxx_subs_epi8'
#define _mmxxx_subs_epi8  _mm256_subs_epi8
                          ^
./simde_avx2.h:37612:34: note: expanded from macro '_mm256_subs_epi8'
  #define _mm256_subs_epi8(a, b) simde_mm256_subs_epi8(a, b)
                                 ^
opal.cpp:103:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi8(a, b); }
                                                                           ^
opal.cpp:28:27: note: expanded from macro '_mmxxx_adds_epi8'
#define _mmxxx_adds_epi8  _mm256_adds_epi8
                          ^
./simde_avx2.h:32729:34: note: expanded from macro '_mm256_adds_epi8'
  #define _mm256_adds_epi8(a, b) simde_mm256_adds_epi8(a, b)
                                 ^
opal.cpp:88:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    return _mmxxx_testz_si(a, a);
           ^
opal.cpp:26:25: note: expanded from macro '_mmxxx_testz_si'
#define _mmxxx_testz_si _mm256_testz_si256
                        ^
./simde_avx2.h:32208:36: note: expanded from macro '_mm256_testz_si256'
  #define _mm256_testz_si256(a, b) simde_mm256_testz_si256(a, b)
                                   ^
./simde_avx2.h:32189:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      a_ = simde__m256i_to_private(a),
           ^
./simde_avx2.h:32190:12: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
      b_ = simde__m256i_to_private(b);
           ^
opal.cpp:107:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi8(a, b); }
                                                                             ^
opal.cpp:35:27: note: expanded from macro '_mmxxx_cmpgt_epi8'
#define _mmxxx_cmpgt_epi8 _mm256_cmpgt_epi8
                          ^
./simde_avx2.h:33510:35: note: expanded from macro '_mm256_cmpgt_epi8'
  #define _mm256_cmpgt_epi8(a, b) simde_mm256_cmpgt_epi8(a, b)
                                  ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_loadRawMatrix.cpp
25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:122:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi16(a); }
                                               ^
opal.cpp:41:28: note: expanded from macro '_mmxxx_set1_epi16'
#define _mmxxx_set1_epi16  _mm256_set1_epi16
                           ^
./simde_avx2.h:27308:32: note: expanded from macro '_mm256_set1_epi16'
  #define _mm256_set1_epi16(a) simde_mm256_set1_epi16(a)
                               ^
opal.cpp:120:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi16(a, b); }
                                                                           ^
opal.cpp:40:28: note: expanded from macro '_mmxxx_max_epi16'
#define _mmxxx_max_epi16   _mm256_max_epi16
                           ^
./simde_avx2.h:35424:34: note: expanded from macro '_mm256_max_epi16'
  #define _mm256_max_epi16(a, b) simde_mm256_max_epi16(a, b)
                                 ^
opal.cpp:118:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_subs_epi16(a, b); }
                                                                           ^
opal.cpp:38:28: note: expanded from macro '_mmxxx_subs_epi16'
#define _mmxxx_subs_epi16  _mm256_subs_epi16
                           ^
./simde_avx2.h:37641:35: note: expanded from macro '_mm256_subs_epi16'
  #define _mm256_subs_epi16(a, b) simde_mm256_subs_epi16(a, b)
                                  ^
opal.cpp:117:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_adds_epi16(a, b); }
                                                                           ^
opal.cpp:37:28: note: expanded from macro '_mmxxx_adds_epi16'
#define _mmxxx_adds_epi16  _mm256_adds_epi16
                           ^
./simde_avx2.h:32758:35: note: expanded from macro '_mm256_adds_epi16'
  #define _mm256_adds_epi16(a, b) simde_mm256_adds_epi16(a, b)
                                  ^
opal.cpp:121:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi16(a, b); }
                                                                             ^
opal.cpp:42:28: note: expanded from macro '_mmxxx_cmpgt_epi16'
#define _mmxxx_cmpgt_epi16 _mm256_cmpgt_epi16
                           ^
./simde_avx2.h:33541:36: note: expanded from macro '_mm256_cmpgt_epi16'
  #define _mm256_cmpgt_epi16(a, b) simde_mm256_cmpgt_epi16(a, b)
                                   ^
opal.cpp:205:22: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi zeroes = SIMD::set1(0);
                     ^
opal.cpp:241:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi Q = SIMD::set1(gapOpen);
                ^
opal.cpp:242:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
    __mxxxi R = SIMD::set1(gapExt);
                ^
opal.cpp:269:25: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            P[letter] = _mmxxx_load_si((__mxxxi const*)profileRow);
                        ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:284:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                  ^
opal.cpp:284:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                                                                 ^
opal.cpp:284:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi E = SIMD::max(SIMD::sub(prevColumn[r].H, Q), SIMD::sub(prevColumn[r].E, R));
                        ^
opal.cpp:287:35: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                  ^
opal.cpp:287:53: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                                                    ^
opal.cpp:287:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi F = SIMD::max(SIMD::sub(uH, Q), SIMD::sub(uF, R));
                        ^
opal.cpp:290:25: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi H = SIMD::max(F, E);
                        ^
opal.cpp:293:21: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                H = SIMD::max(H, zeroes);
                    ^
opal.cpp:295:29: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi ulH_P = SIMD::add(ulH, P[query[r]]);
                            ^
opal.cpp:298:17: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            H = SIMD::max(H, ulH_P);
                ^
opal.cpp:305:26: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                ofTest = SIMD::min(ofTest, ulH_P);
                         ^
opal.cpp:313:66: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
                rowsWithImprovementLength += 1 - simdIsAllZeroes(SIMD::cmpgt(H, maxH));
                                                                 ^
opal.cpp:316:20: warning: AVX vector return of type '__mxxxi' (aka 'simde__m256i') without 'avx' enabled changes the ABI [-Wpsabi]
            maxH = SIMD::max(maxH, H); // update best score
                   ^
opal.cpp:337:9: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
        _mmxxx_store_si((__mxxxi*)unpackedMaxH, maxH);
        ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:346:13: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            _mmxxx_store_si((__mxxxi*)unpackedOfTest, ofTest);
            ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:391:17: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                _mmxxx_store_si((__mxxxi*)unpackedH, prevColumn[r].H);
                ^
opal.cpp:24:25: note: expanded from macro '_mmxxx_store_si'
#define _mmxxx_store_si _mm256_store_si256
                        ^
./simde_avx2.h:31351:43: note: expanded from macro '_mm256_store_si256'
  #define _mm256_store_si256(mem_addr, a) simde_mm256_store_si256(mem_addr, a)
                                          ^
opal.cpp:446:39: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
            __mxxxi resetMaskPacked = _mmxxx_load_si((__mxxxi const*)resetMask);
                                      ^
opal.cpp:23:25: note: expanded from macro '_mmxxx_load_si'
#define _mmxxx_load_si  _mm256_load_si256
                        ^
./simde_avx2.h:29974:32: note: expanded from macro '_mm256_load_si256'
  #define _mm256_load_si256(a) simde_mm256_load_si256(a)
                               ^
opal.cpp:455:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].H = _mmxxx_and_si(prevColumn[i].H, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:456:39: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                    prevColumn[i].E = _mmxxx_and_si(prevColumn[i].E, resetMaskPacked);
                                      ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:458:24: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
                maxH = _mmxxx_and_si(maxH, resetMaskPacked);
                       ^
opal.cpp:25:25: note: expanded from macro '_mmxxx_and_si'
#define _mmxxx_and_si   _mm256_and_si256
                        ^
./simde_avx2.h:32671:34: note: expanded from macro '_mm256_and_si256'
  #define _mm256_and_si256(a, b) simde_mm256_and_si256(a, b)
                                 ^
opal.cpp:136:48: warning: AVX vector return of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi set1(int a) { return _mmxxx_set1_epi32(a); }
                                               ^
opal.cpp:48:28: note: expanded from macro '_mmxxx_set1_epi32'
#define _mmxxx_set1_epi32  _mm256_set1_epi32
                           ^
./simde_avx2.h:27334:32: note: expanded from macro '_mm256_set1_epi32'
  #define _mm256_set1_epi32(a) simde_mm256_set1_epi32(a)
                               ^
opal.cpp:134:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi max(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_max_epi32(a, b); }
                                                                           ^
opal.cpp:47:28: note: expanded from macro '_mmxxx_max_epi32'
#define _mmxxx_max_epi32   _mm256_max_epi32
                           ^
./simde_avx2.h:35453:34: note: expanded from macro '_mm256_max_epi32'
  #define _mm256_max_epi32(a, b) simde_mm256_max_epi32(a, b)
                                 ^
opal.cpp:132:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi sub(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_sub_epi32(a, b); }
                                                                           ^
opal.cpp:45:28: note: expanded from macro '_mmxxx_sub_epi32'
#define _mmxxx_sub_epi32   _mm256_sub_epi32
                           ^
./simde_avx2.h:37515:34: note: expanded from macro '_mm256_sub_epi32'
  #define _mm256_sub_epi32(a, b) simde_mm256_sub_epi32(a, b)
                                 ^
opal.cpp:131:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi add(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_add_epi32(a, b); }
                                                                           ^
opal.cpp:44:28: note: expanded from macro '_mmxxx_add_epi32'
#define _mmxxx_add_epi32   _mm256_add_epi32
                           ^
./simde_avx2.h:32554:34: note: expanded from macro '_mm256_add_epi32'
  #define _mm256_add_epi32(a, b) simde_mm256_add_epi32(a, b)
                                 ^
opal.cpp:133:76: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi min(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_min_epi32(a, b); }
                                                                           ^
opal.cpp:46:28: note: expanded from macro '_mmxxx_min_epi32'
#define _mmxxx_min_epi32   _mm256_min_epi32
                           ^
./simde_avx2.h:35540:34: note: expanded from macro '_mm256_min_epi32'
  #define _mm256_min_epi32(a, b) simde_mm256_min_epi32(a, b)
                                 ^
opal.cpp:135:78: warning: AVX vector argument of type 'simde__m256i' (vector of 4 'int_fast32_t' values) without 'avx' enabled changes the ABI [-Wpsabi]
    static inline __mxxxi cmpgt(const __mxxxi& a, const __mxxxi& b) { return _mmxxx_cmpgt_epi32(a, b); }
                                                                             ^
opal.cpp:49:28: note: expanded from macro '_mmxxx_cmpgt_epi32'
#define _mmxxx_cmpgt_epi32 _mm256_cmpgt_epi32
                           ^
./simde_avx2.h:33572:36: note: expanded from macro '_mm256_cmpgt_epi32'
  #define _mm256_cmpgt_epi32(a, b) simde_mm256_cmpgt_epi32(a, b)
                                   ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_emptyDrops_CR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' soloInputFeatureUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countSmartSeq.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_redistributeReadsByCB.cpp
548 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_quantTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_sumThreads.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countVelocyto.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_countCBgeneUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_classifyAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_cellFiltering.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_statsOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamSortByCoordinate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersSolo.cpp
bamSortByCoordinate.cpp:67:31: warning: implicit conversion from 'double' to 'unsigned int' changes value from 0.1 to 0 [-Wliteral-conversion]
                        sleep(0.1);
                        ~~~~~ ^~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloRead_record.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadBarcode_getCBandUMI.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloBarcode_extractBarcode.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_record.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloReadFeature_inputRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Solo.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_outputResults.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_processRecords.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SoloFeature_addBAMtags.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_transformGenome.cpp
SoloFeature_outputResults.cpp:41:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            symlink("../../../SJ.out.tab", (outputPrefixMat+pSolo.outFileNames[1]).c_str());
            ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_transformGenome.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_convertGenomeCigar.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' twoPassRunPass1.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' samHeaders.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeOutLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_transformGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputSpliceGraphSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneReadSpliceGraph.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph.cpp
SpliceGraph.cpp:4:17: warning: using directive refers to implicitly-defined namespace 'std'
using namespace std;
                ^
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swScoreSpliced.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_swTraceBack.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SpliceGraph_findSuperTr.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjAlignSplit.cpp
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_transcriptGeneSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' GTF_superTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuperTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputAlignments.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' STAR.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SharedMemory.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' PackedArray.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SuffixArrayFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_samAttributes.cpp
STAR.cpp:189:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outBAMfileUnsorted);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
STAR.cpp:193:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_flush(P.inOut->outQuantBAMfile);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
SuffixArrayFuns.cpp:18:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:234:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int64 ii;
    ^~~~~~~~~
SuffixArrayFuns.cpp:359:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register uint saind=0;
    ^~~~~~~~~
SuffixArrayFuns.cpp:362:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+SAstr) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:365:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) g1;
            ^~~~~~~~~
SuffixArrayFuns.cpp:379:9: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register uint128 g1=*( (uint128*) (gSeq+mapGen.nGenome-SAstr-16) );
        ^~~~~~~~~
SuffixArrayFuns.cpp:382:13: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
            register char g2=(char) (g1>>(8*(15-ii)));
            ^~~~~~~~~
7 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' InOutStreams.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' SequenceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome.cpp
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersGenome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Stats.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_alignScore.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_generateCigarP.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Chain.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcript_variationAdjust.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Variation.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_waspMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_storeAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchPieces.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_multMapSelect.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mapOneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' readLoad.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_processChunks.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlignChunk_mapChunk.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' OutSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' outputSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' blocksOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ThreadControl.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sysRemoveDir.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_maxMappableLength2strands.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' binarySearch2.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptSJ.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_outputTranscriptCIGARp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_createExtendWindowsWithAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_assignAlignToWindow.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_oneRead.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_stitchWindowSeeds.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_peOverlapMergeMap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_mappedFilter.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ParametersChimeric_initialize.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOld.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionOldOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericDetection_chimericDetectionMult.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_chimericDetectionPEmerged.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchWindowAligns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' extendAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stitchAlignToTranscript.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericJunctionOutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericBAMoutput.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ChimericAlign_chimericStitching.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_genomeGenerate.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeParametersWrite.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeScanFastaFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' genomeSAindex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Genome_insertSequences.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' insertSeqSA.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixes.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' funCompareUintAndSuffixesMemcmp.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' TimeFunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ErrorWarning.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' streamFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' stringSubstituteAll.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_quantAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneFullAlignOverlap.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_quantTranscriptome.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Quantifications.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Transcriptome_geneCountsAddAlign.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromFiles.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbLoadFromStream.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbPrepare.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbBuildIndex.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' sjdbInsertJunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' mapThreadsSpawn.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readFilesInit.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' Parameters_readSAMheader.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bam_cat.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bam_cat.c:80:12: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    if (h) bam_hdr_write(fp, h);
           ^~~~~~~~~~~~~ ~~~~~
bam_cat.c:96:31: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        if (h == 0 && i == 0) bam_hdr_write(fp, old);
                              ^~~~~~~~~~~~~ ~~~~~~~
bam_cat.c:99:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(fp, (void*)((char*)in->uncompressed_block + in->block_offset), in->block_length - in->block_offset);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bam_cat.c:100:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_flush(fp);
            ^~~~~~~~~~ ~~
bam_cat.c:111:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~~
bam_cat.c:115:26: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                if(j!=0) bgzf_raw_write(fp, ebuf, es);
                         ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:118:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, buf, len);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
bam_cat.c:131:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_raw_write(fp, ebuf, es);
                ^~~~~~~~~~~~~~ ~~~~~~~~~~~~
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' serviceFuns.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMoutput.cpp
Parameters_readSAMheader.cpp:32:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        system(com1.c_str());
        ^~~~~~ ~~~~~~~~~~~~
1 warning generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMfunctions.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' ReadAlign_alignBAM.cpp
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortByCoordinate.cpp
BAMoutput.cpp:59:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBAM,bamArray,binBytes1);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMoutput.cpp:72:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfBAM,bamArray,binBytes1);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:78:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,"BAM\001",4);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~
BAMfunctions.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &hlen,sizeof(hlen));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:81:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,samh.c_str(),hlen);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:83:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(fp,(char*) &nchr,sizeof(nchr));
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:87:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &rlen,sizeof(rlen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:88:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,chrn.at(ii).data(),rlen); //this includes \0 at the end of the string
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:89:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(fp,(char*) &slen,sizeof(slen));
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BAMfunctions.cpp:91:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(fp);
    ^~~~~~~~~~ ~~
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' signalFromBAM.cpp
8 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' bamRemoveDuplicates.cpp
BAMbinSortByCoordinate.cpp:73:9: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
        bgzf_write(bgzfBin, bam0, size0);
        ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortByCoordinate.cpp:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -c -Wdate-time -D_FORTIFY_SOURCE=2  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' BAMbinSortUnmapped.cpp
bamRemoveDuplicates.cpp:130:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bam_hdr_write(bgzfOut, bamHeader);
    ^~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:157:17: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                bgzf_write(bgzfOut,bamRaw,bamS);
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_write(bgzfOut,bamRaw,bamLength);
    ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~
bamRemoveDuplicates.cpp:254:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfOut);
    ^~~~~~~~~~ ~~~~~~~
4 warnings generated.
BAMbinSortUnmapped.cpp:62:13: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
            bgzf_write(bgzfBin, bam0, size0);
            ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~
BAMbinSortUnmapped.cpp:80:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    bgzf_flush(bgzfBin);
    ^~~~~~~~~~ ~~~~~~~
2 warnings generated.
g++ -o STAR-plain  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
g++ -o STARlong-plain  -O3 -std=c++11 -fopenmp -D'COMPILATION_TIME_PLACE="2021-08-18T10:13:45+00:00 <place not set in Debian package>"' -flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x -D'COMPILE_FOR_LONG_READS' -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 SoloFeature_collapseUMI_Graph.o SoloFeature_collapseUMIall_multiMappers.o ParametersClip_initialize.o ClipMate_clip.o ClipCR4.o opal/opal.o ClipMate_clipChunk.o ClipMate_initialize.o SoloFeature_loadRawMatrix.o SoloFeature_emptyDrops_CR.o soloInputFeatureUMI.o SoloFeature_countSmartSeq.o SoloFeature_redistributeReadsByCB.o SoloFeature_quantTranscript.o SoloFeature_sumThreads.o SoloFeature_countVelocyto.o SoloFeature_countCBgeneUMI.o Transcriptome_classifyAlign.o SoloFeature_cellFiltering.o SoloFeature_statsOutput.o bamSortByCoordinate.o SoloBarcode.o ParametersSolo.o SoloRead.o SoloRead_record.o SoloReadBarcode.o SoloReadBarcode_getCBandUMI.o SoloBarcode_extractBarcode.o SoloReadFeature.o SoloReadFeature_record.o SoloReadFeature_inputRecords.o Solo.o SoloFeature.o SoloFeature_outputResults.o SoloFeature_processRecords.o SoloFeature_addBAMtags.o ReadAlign_transformGenome.o Genome_transformGenome.o Transcript_convertGenomeCigar.o twoPassRunPass1.o samHeaders.o Genome_genomeLoad.o Genome_genomeOutLoad.o Transcript_transformGenome.o ReadAlign_outputSpliceGraphSAM.o ReadAlign_mapOneReadSpliceGraph.o SpliceGraph.o SpliceGraph_swScoreSpliced.o SpliceGraph_swTraceBack.o SpliceGraph_findSuperTr.o sjAlignSplit.o GTF.o GTF_transcriptGeneSJ.o GTF_superTranscript.o SuperTranscriptome.o ReadAlign_outputAlignments.o ReadAlign.o STAR.o SharedMemory.o PackedArray.o SuffixArrayFuns.o Parameters.o Parameters_samAttributes.o InOutStreams.o SequenceFuns.o Genome.o ParametersGenome.o Stats.o Transcript.o Transcript_alignScore.o Transcript_generateCigarP.o Chain.o Transcript_variationAdjust.o Variation.o ReadAlign_waspMap.o ReadAlign_storeAligns.o ReadAlign_stitchPieces.o ReadAlign_multMapSelect.o ReadAlign_mapOneRead.o readLoad.o ReadAlignChunk.o ReadAlignChunk_processChunks.o ReadAlignChunk_mapChunk.o OutSJ.o outputSJ.o blocksOverlap.o ThreadControl.o sysRemoveDir.o ReadAlign_maxMappableLength2strands.o binarySearch2.o ReadAlign_outputTranscriptSAM.o ReadAlign_outputTranscriptSJ.o ReadAlign_outputTranscriptCIGARp.o ReadAlign_calcCIGAR.cpp ReadAlign_createExtendWindowsWithAlign.o ReadAlign_assignAlignToWindow.o ReadAlign_oneRead.o ReadAlign_stitchWindowSeeds.o ReadAlign_peOverlapMergeMap.o ReadAlign_mappedFilter.o ParametersChimeric_initialize.o ReadAlign_chimericDetection.o ReadAlign_chimericDetectionOld.o ReadAlign_chimericDetectionOldOutput.o ChimericDetection.o ChimericDetection_chimericDetectionMult.o ReadAlign_chimericDetectionPEmerged.o stitchWindowAligns.o extendAlign.o stitchAlignToTranscript.o ChimericSegment.cpp ChimericAlign.cpp ChimericAlign_chimericJunctionOutput.o ChimericAlign_chimericBAMoutput.o ChimericAlign_chimericStitching.o Genome_genomeGenerate.o genomeParametersWrite.o genomeScanFastaFiles.o genomeSAindex.o Genome_insertSequences.o insertSeqSA.o funCompareUintAndSuffixes.o funCompareUintAndSuffixesMemcmp.o TimeFunctions.o ErrorWarning.o streamFuns.o stringSubstituteAll.o Transcriptome.o Transcriptome_quantAlign.o Transcriptome_geneFullAlignOverlap.o ReadAlign_quantTranscriptome.o Quantifications.o Transcriptome_geneCountsAddAlign.o sjdbLoadFromFiles.o sjdbLoadFromStream.o sjdbPrepare.o sjdbBuildIndex.o sjdbInsertJunctions.o mapThreadsSpawn.o Parameters_readFilesInit.o Parameters_openReadsFiles.cpp Parameters_closeReadsFiles.cpp Parameters_readSAMheader.o bam_cat.o serviceFuns.o GlobalVariables.cpp BAMoutput.o BAMfunctions.o ReadAlign_alignBAM.o BAMbinSortByCoordinate.o signalFromBAM.o bamRemoveDuplicates.o BAMbinSortUnmapped.o  -pthread -lhts -Bdynamic -lz -Wl,-z,relro -Wl,-z,now
Parameters_openReadsFiles.cppParameters_openReadsFiles.cpp::5252::1717::  warning: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]

                system(("ls -lL " + readFilesNames[imate][ifile] + " > "+ outFileTmp+"/readFilesIn.info 2>&1").c_str());
                ^~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                system(("ls -lL " + readFilesNames[imate][ifile] + " > "+ outFileTmp+"/readFilesIn.info 2>&1").c_str());
                ^~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
1 warning generated.
/usr/bin/ld: /usr/lib/llvm-13/bin/../lib/LLVMgold.so: error loading plugin: /usr/lib/llvm-13/bin/../lib/LLVMgold.so: cannot open shared object file: No such file or directory
clang: error: linker command failed with exit code 1 (use -v to see invocation)
/usr/bin/ld: /usr/lib/llvm-13/bin/../lib/LLVMgold.so: error loading plugin: /usr/lib/llvm-13/bin/../lib/LLVMgold.so: cannot open shared object file: No such file or directory
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [Makefile:145: STARlong-plain] Error 1
make[2]: *** Waiting for unfinished jobs....
make[2]: *** [Makefile:135: STAR-plain] Error 1
make[2]: Leaving directory '/<<PKGBUILDDIR>>/source'
dh_auto_build: error: cd source && make -j4 "INSTALL=install --strip-program=true" SFX=-plain "CCFLAGS_common_add=-flto -flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "CCFLAGS=-flto -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -std=c++0x" "LDFLAGS_add=-Wl,-z,relro -Wl,-z,now" STAR-plain STARlong-plain returned exit code 2
make[1]: *** [debian/rules:27: override_dh_auto_build] Error 25
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
make: *** [debian/rules:21: binary] Error 2
dpkg-buildpackage: error: debian/rules binary subprocess returned exit status 2
--------------------------------------------------------------------------------
Build finished at 2021-10-26T20:24:30Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 292300
Build-Time: 473
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 6
Job: rna-star_2.7.9a+dfsg-3
Machine Architecture: amd64
Package: rna-star
Package-Time: 500
Source-Version: 2.7.9a+dfsg-3
Space: 292300
Status: attempted
Version: 2.7.9a+dfsg-3
--------------------------------------------------------------------------------
Finished at 2021-10-26T20:24:30Z
Build needed 00:08:20, 292300k disk space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 500.950087992s
DC-Time-Estimation: 500.950087992 versus expected 1652 (r/m: 2.297733725573039 ; m: 500.950087992)
